/*
Navicat MySQL Data Transfer

Source Server         : 122.152.234.87-腾讯云
Source Server Version : 50719
Source Host           : 122.152.234.87:3306
Source Database       : spring

Target Server Type    : MYSQL
Target Server Version : 50719
File Encoding         : 65001

Date: 2019-10-18 17:01:58
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for blog
-- ----------------------------
DROP TABLE IF EXISTS `blog`;
CREATE TABLE `blog` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT '' COMMENT '标题',
  `content` longtext COMMENT '内容',
  `html` longtext COMMENT 'html内容',
  `theme` char(10) DEFAULT '' COMMENT '代码块主题',
  `blogtag` varchar(255) DEFAULT '' COMMENT '文章标签',
  `blogclass` varchar(255) DEFAULT '' COMMENT '分类专栏',
  `blogtype` varchar(255) DEFAULT '' COMMENT '文章类型：原创，转载，翻译',
  `sourcename` varchar(255) DEFAULT '' COMMENT '资源名称',
  `sourcelink` varchar(255) DEFAULT '' COMMENT '资源路径',
  `isfinished` tinyint(4) DEFAULT '1' COMMENT '发布：2         保存：1',
  `create_by` int(11) DEFAULT NULL COMMENT '创建人',
  `create_time` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_by` int(11) DEFAULT NULL COMMENT '更新人',
  `update_time` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '更新事件',
  `deleted` tinyint(4) unsigned zerofill DEFAULT '0000' COMMENT '已删除？1：0',
  PRIMARY KEY (`id`),
  KEY `blog_type` (`blogtype`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog
-- ----------------------------
INSERT INTO `blog` VALUES ('1', '感知哈希算法实现简单图片搜索', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <!-- flowchart 箭头图标 勿删 --> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p>一、我先声明一下，本文中的源代码是来自网上资源，我这里演示一下如何在Java Web中使用该算法。 <br> 资源地址：<a href=\"http://download.csdn.net/detail/haigenwong/4412334\" rel=\"nofollow\" data-token=\"3f7c8078368a802677c721aa93573712\">http://download.csdn.net/detail/haigenwong/4412334</a></p> \n <p>二、 <br> 1：servlet部分代码：</p> \n <pre class=\"prettyprint\"><code class=\" hljs lasso\"><span class=\"hljs-built_in\">List</span><span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span> resultPic <span class=\"hljs-subst\">=</span> SimilarImageSearch<span class=\"hljs-built_in\">.</span>search(filenametest<span class=\"hljs-subst\">+</span><span class=\"hljs-string\">\".\"</span><span class=\"hljs-subst\">+</span>prefix);\n<span class=\"hljs-built_in\">List</span><span class=\"hljs-subst\">&lt;</span>Work<span class=\"hljs-subst\">&gt;</span> Indexsearchworks <span class=\"hljs-subst\">=</span> <span class=\"hljs-literal\">new</span> dao<span class=\"hljs-built_in\">.</span>WorkDAO()<span class=\"hljs-built_in\">.</span>queryOneWorkByPic(resultPic);</code></pre> \n <p>这里SimilarImageSearch是负责图片搜索的类，利用search方法搜寻图片，实参部分是用户上传的图片的图片名，resultPic为搜索到的图片名称</p> \n <p>2：search方法（里面用到的其他方法在源代码同类名下）</p> \n <pre class=\"prettyprint\"><code class=\" hljs lasso\"><span class=\"hljs-built_in\">List</span><span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span> hashCodes <span class=\"hljs-subst\">=</span> <span class=\"hljs-literal\">new</span> ArrayList<span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span>();\n        <span class=\"hljs-built_in\">String</span> t1 <span class=\"hljs-subst\">=</span> System<span class=\"hljs-built_in\">.</span>getProperty(<span class=\"hljs-string\">\"user.dir\"</span>)<span class=\"hljs-built_in\">.</span>substring(<span class=\"hljs-number\">0</span>,\n                System<span class=\"hljs-built_in\">.</span>getProperty(<span class=\"hljs-string\">\"user.dir\"</span>)<span class=\"hljs-built_in\">.</span>length() <span class=\"hljs-subst\">-</span> <span class=\"hljs-number\">4</span>);\n        <span class=\"hljs-comment\">//本地的图库目录</span>\n        <span class=\"hljs-built_in\">String</span> filename <span class=\"hljs-subst\">=</span> t1 <span class=\"hljs-subst\">+</span> <span class=\"hljs-string\">\"\\\\webapps\\\\media1\\\\work\\\\allworks\\\\\"</span>;\n        <span class=\"hljs-comment\">//存放用户上传的图片目录</span>\n        <span class=\"hljs-built_in\">String</span> filename2 <span class=\"hljs-subst\">=</span> t1 <span class=\"hljs-subst\">+</span> <span class=\"hljs-string\">\"\\\\webapps\\\\media1\\\\work\\\\searchPic\\\\\"</span>;\n        <span class=\"hljs-built_in\">String</span> hashCode <span class=\"hljs-subst\">=</span> <span class=\"hljs-built_in\">null</span>;\n        <span class=\"hljs-comment\">//存放本地图库的所有图片名称</span>\n        <span class=\"hljs-built_in\">List</span><span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span> fileNames <span class=\"hljs-subst\">=</span> <span class=\"hljs-literal\">new</span> ArrayList<span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span>();\n        <span class=\"hljs-comment\">//存放图片搜寻结果</span>\n        <span class=\"hljs-built_in\">List</span><span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span> results <span class=\"hljs-subst\">=</span> <span class=\"hljs-literal\">new</span> ArrayList<span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span>();\n        <span class=\"hljs-comment\">//利用FileName类的get方法获取所有图片的名称</span>\n        fileNames <span class=\"hljs-subst\">=</span> <span class=\"hljs-literal\">new</span> FileName()<span class=\"hljs-built_in\">.</span>get();\n        Iterator<span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span> iter <span class=\"hljs-subst\">=</span> fileNames<span class=\"hljs-built_in\">.</span>iterator();\n        <span class=\"hljs-comment\">//获取每张图片的hash值</span>\n        <span class=\"hljs-keyword\">while</span>(iter<span class=\"hljs-built_in\">.</span>hasNext())\n        {\n            <span class=\"hljs-built_in\">String</span> filen <span class=\"hljs-subst\">=</span> (<span class=\"hljs-built_in\">String</span>) iter<span class=\"hljs-built_in\">.</span>next();\n            hashCode <span class=\"hljs-subst\">=</span> produceFingerPrint(filename <span class=\"hljs-subst\">+</span> filen);\n            hashCodes<span class=\"hljs-built_in\">.</span>add(hashCode);<span class=\"hljs-comment\">//获取图片的hash值</span>\n        }\n        <span class=\"hljs-comment\">//获取用户上传的图片的hash值</span>\n        <span class=\"hljs-built_in\">String</span> sourceHashCode <span class=\"hljs-subst\">=</span> produceFingerPrint(filename2<span class=\"hljs-subst\">+</span>picName);\n        <span class=\"hljs-comment\">//比较原图与本地图片的汉明距离</span>\n        for (int i <span class=\"hljs-subst\">=</span> <span class=\"hljs-number\">0</span>; i <span class=\"hljs-subst\">&lt;</span> hashCodes<span class=\"hljs-built_in\">.</span>size(); i<span class=\"hljs-subst\">++</span>)\n        {\n            int difference <span class=\"hljs-subst\">=</span> hammingDistance(sourceHashCode, hashCodes<span class=\"hljs-built_in\">.</span>get(i));\n            System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>print(<span class=\"hljs-string\">\"汉明距离:\"</span><span class=\"hljs-subst\">+</span>difference<span class=\"hljs-subst\">+</span><span class=\"hljs-string\">\" \"</span>);\n            <span class=\"hljs-keyword\">if</span>(difference<span class=\"hljs-subst\">==</span><span class=\"hljs-number\">0</span>){\n                System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>print(<span class=\"hljs-string\">\"一样:\"</span>);\n                <span class=\"hljs-built_in\">String</span> name <span class=\"hljs-subst\">=</span> fileNames<span class=\"hljs-built_in\">.</span>get(i);\n                System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>println(name);\n                results<span class=\"hljs-built_in\">.</span>add(name);\n            }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(difference<span class=\"hljs-subst\">&lt;=</span><span class=\"hljs-number\">5</span>){\n                System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>print(<span class=\"hljs-string\">\"非常相似:\"</span>);\n                <span class=\"hljs-built_in\">String</span> name <span class=\"hljs-subst\">=</span> fileNames<span class=\"hljs-built_in\">.</span>get(i);\n                System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>println(name);\n                results<span class=\"hljs-built_in\">.</span>add(name);\n            }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(difference<span class=\"hljs-subst\">&lt;=</span><span class=\"hljs-number\">10</span>){\n                System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>print(<span class=\"hljs-string\">\"有点相似:\"</span>);\n                <span class=\"hljs-built_in\">String</span> name <span class=\"hljs-subst\">=</span> fileNames<span class=\"hljs-built_in\">.</span>get(i);\n                System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>println(name);\n                results<span class=\"hljs-built_in\">.</span>add(name);\n            }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(difference<span class=\"hljs-subst\">&gt;</span><span class=\"hljs-number\">10</span>){\n                System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>print(<span class=\"hljs-string\">\"完全不一样\"</span>);\n                <span class=\"hljs-built_in\">String</span> name <span class=\"hljs-subst\">=</span> fileNames<span class=\"hljs-built_in\">.</span>get(i);\n                System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>println(name);\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> results;\n    }</code></pre> \n <p>FileName类的get方法（里面用到的其他方法在源代码同类名下）：</p> \n <pre class=\"prettyprint\"><code class=\" hljs lasso\">        <span class=\"hljs-built_in\">List</span><span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span> filterName <span class=\"hljs-subst\">=</span> <span class=\"hljs-literal\">new</span> ArrayList<span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span>();\n        filterName<span class=\"hljs-built_in\">.</span>add(<span class=\"hljs-string\">\"jpeg\"</span>);\n        filterName<span class=\"hljs-built_in\">.</span>add(<span class=\"hljs-string\">\"jpg\"</span>);\n        filterName<span class=\"hljs-built_in\">.</span>add(<span class=\"hljs-string\">\"png\"</span>);\n        filterName<span class=\"hljs-built_in\">.</span>add(<span class=\"hljs-string\">\"bmp\"</span>);\n        filterName<span class=\"hljs-built_in\">.</span>add(<span class=\"hljs-string\">\"gif\"</span>);<span class=\"hljs-comment\">// 自己可以定义</span>\n        <span class=\"hljs-comment\">/* * System.out.println(getFileList(ImageHelper.path + \"\\\\allworks\\\\\", * filterName)); */</span>\n        <span class=\"hljs-comment\">// 获取本地目录下的图片名称</span>\n        <span class=\"hljs-built_in\">String</span> t1 <span class=\"hljs-subst\">=</span> System<span class=\"hljs-built_in\">.</span>getProperty(<span class=\"hljs-string\">\"user.dir\"</span>)<span class=\"hljs-built_in\">.</span>substring(<span class=\"hljs-number\">0</span>,\n                System<span class=\"hljs-built_in\">.</span>getProperty(<span class=\"hljs-string\">\"user.dir\"</span>)<span class=\"hljs-built_in\">.</span>length() <span class=\"hljs-subst\">-</span> <span class=\"hljs-number\">4</span>);\n        <span class=\"hljs-built_in\">List</span><span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span> filenames <span class=\"hljs-subst\">=</span> getFileList(t1\n                <span class=\"hljs-subst\">+</span> <span class=\"hljs-string\">\"/webapps/media1/work/allworks/\"</span>, filterName);\n        <span class=\"hljs-keyword\">return</span> filenames;</code></pre> \n <p>图片搜索的基本原理就是这样，源代码中注释都是有的，看懂并不难，推荐各位去看下。</p> \n</div>', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <!-- flowchart 箭头图标 勿删 --> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p>一、我先声明一下，本文中的源代码是来自网上资源，我这里演示一下如何在Java Web中使用该算法。 <br> 资源地址：<a href=\"http://download.csdn.net/detail/haigenwong/4412334\" rel=\"nofollow\" data-token=\"3f7c8078368a802677c721aa93573712\">http://download.csdn.net/detail/haigenwong/4412334</a></p> \n <p>二、 <br> 1：servlet部分代码：</p> \n <pre class=\"prettyprint\"><code class=\" hljs lasso\"><span class=\"hljs-built_in\">List</span><span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span> resultPic <span class=\"hljs-subst\">=</span> SimilarImageSearch<span class=\"hljs-built_in\">.</span>search(filenametest<span class=\"hljs-subst\">+</span><span class=\"hljs-string\">\".\"</span><span class=\"hljs-subst\">+</span>prefix);\n<span class=\"hljs-built_in\">List</span><span class=\"hljs-subst\">&lt;</span>Work<span class=\"hljs-subst\">&gt;</span> Indexsearchworks <span class=\"hljs-subst\">=</span> <span class=\"hljs-literal\">new</span> dao<span class=\"hljs-built_in\">.</span>WorkDAO()<span class=\"hljs-built_in\">.</span>queryOneWorkByPic(resultPic);</code></pre> \n <p>这里SimilarImageSearch是负责图片搜索的类，利用search方法搜寻图片，实参部分是用户上传的图片的图片名，resultPic为搜索到的图片名称</p> \n <p>2：search方法（里面用到的其他方法在源代码同类名下）</p> \n <pre class=\"prettyprint\"><code class=\" hljs lasso\"><span class=\"hljs-built_in\">List</span><span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span> hashCodes <span class=\"hljs-subst\">=</span> <span class=\"hljs-literal\">new</span> ArrayList<span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span>();\n        <span class=\"hljs-built_in\">String</span> t1 <span class=\"hljs-subst\">=</span> System<span class=\"hljs-built_in\">.</span>getProperty(<span class=\"hljs-string\">\"user.dir\"</span>)<span class=\"hljs-built_in\">.</span>substring(<span class=\"hljs-number\">0</span>,\n                System<span class=\"hljs-built_in\">.</span>getProperty(<span class=\"hljs-string\">\"user.dir\"</span>)<span class=\"hljs-built_in\">.</span>length() <span class=\"hljs-subst\">-</span> <span class=\"hljs-number\">4</span>);\n        <span class=\"hljs-comment\">//本地的图库目录</span>\n        <span class=\"hljs-built_in\">String</span> filename <span class=\"hljs-subst\">=</span> t1 <span class=\"hljs-subst\">+</span> <span class=\"hljs-string\">\"\\\\webapps\\\\media1\\\\work\\\\allworks\\\\\"</span>;\n        <span class=\"hljs-comment\">//存放用户上传的图片目录</span>\n        <span class=\"hljs-built_in\">String</span> filename2 <span class=\"hljs-subst\">=</span> t1 <span class=\"hljs-subst\">+</span> <span class=\"hljs-string\">\"\\\\webapps\\\\media1\\\\work\\\\searchPic\\\\\"</span>;\n        <span class=\"hljs-built_in\">String</span> hashCode <span class=\"hljs-subst\">=</span> <span class=\"hljs-built_in\">null</span>;\n        <span class=\"hljs-comment\">//存放本地图库的所有图片名称</span>\n        <span class=\"hljs-built_in\">List</span><span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span> fileNames <span class=\"hljs-subst\">=</span> <span class=\"hljs-literal\">new</span> ArrayList<span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span>();\n        <span class=\"hljs-comment\">//存放图片搜寻结果</span>\n        <span class=\"hljs-built_in\">List</span><span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span> results <span class=\"hljs-subst\">=</span> <span class=\"hljs-literal\">new</span> ArrayList<span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span>();\n        <span class=\"hljs-comment\">//利用FileName类的get方法获取所有图片的名称</span>\n        fileNames <span class=\"hljs-subst\">=</span> <span class=\"hljs-literal\">new</span> FileName()<span class=\"hljs-built_in\">.</span>get();\n        Iterator<span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span> iter <span class=\"hljs-subst\">=</span> fileNames<span class=\"hljs-built_in\">.</span>iterator();\n        <span class=\"hljs-comment\">//获取每张图片的hash值</span>\n        <span class=\"hljs-keyword\">while</span>(iter<span class=\"hljs-built_in\">.</span>hasNext())\n        {\n            <span class=\"hljs-built_in\">String</span> filen <span class=\"hljs-subst\">=</span> (<span class=\"hljs-built_in\">String</span>) iter<span class=\"hljs-built_in\">.</span>next();\n            hashCode <span class=\"hljs-subst\">=</span> produceFingerPrint(filename <span class=\"hljs-subst\">+</span> filen);\n            hashCodes<span class=\"hljs-built_in\">.</span>add(hashCode);<span class=\"hljs-comment\">//获取图片的hash值</span>\n        }\n        <span class=\"hljs-comment\">//获取用户上传的图片的hash值</span>\n        <span class=\"hljs-built_in\">String</span> sourceHashCode <span class=\"hljs-subst\">=</span> produceFingerPrint(filename2<span class=\"hljs-subst\">+</span>picName);\n        <span class=\"hljs-comment\">//比较原图与本地图片的汉明距离</span>\n        for (int i <span class=\"hljs-subst\">=</span> <span class=\"hljs-number\">0</span>; i <span class=\"hljs-subst\">&lt;</span> hashCodes<span class=\"hljs-built_in\">.</span>size(); i<span class=\"hljs-subst\">++</span>)\n        {\n            int difference <span class=\"hljs-subst\">=</span> hammingDistance(sourceHashCode, hashCodes<span class=\"hljs-built_in\">.</span>get(i));\n            System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>print(<span class=\"hljs-string\">\"汉明距离:\"</span><span class=\"hljs-subst\">+</span>difference<span class=\"hljs-subst\">+</span><span class=\"hljs-string\">\" \"</span>);\n            <span class=\"hljs-keyword\">if</span>(difference<span class=\"hljs-subst\">==</span><span class=\"hljs-number\">0</span>){\n                System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>print(<span class=\"hljs-string\">\"一样:\"</span>);\n                <span class=\"hljs-built_in\">String</span> name <span class=\"hljs-subst\">=</span> fileNames<span class=\"hljs-built_in\">.</span>get(i);\n                System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>println(name);\n                results<span class=\"hljs-built_in\">.</span>add(name);\n            }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(difference<span class=\"hljs-subst\">&lt;=</span><span class=\"hljs-number\">5</span>){\n                System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>print(<span class=\"hljs-string\">\"非常相似:\"</span>);\n                <span class=\"hljs-built_in\">String</span> name <span class=\"hljs-subst\">=</span> fileNames<span class=\"hljs-built_in\">.</span>get(i);\n                System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>println(name);\n                results<span class=\"hljs-built_in\">.</span>add(name);\n            }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(difference<span class=\"hljs-subst\">&lt;=</span><span class=\"hljs-number\">10</span>){\n                System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>print(<span class=\"hljs-string\">\"有点相似:\"</span>);\n                <span class=\"hljs-built_in\">String</span> name <span class=\"hljs-subst\">=</span> fileNames<span class=\"hljs-built_in\">.</span>get(i);\n                System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>println(name);\n                results<span class=\"hljs-built_in\">.</span>add(name);\n            }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(difference<span class=\"hljs-subst\">&gt;</span><span class=\"hljs-number\">10</span>){\n                System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>print(<span class=\"hljs-string\">\"完全不一样\"</span>);\n                <span class=\"hljs-built_in\">String</span> name <span class=\"hljs-subst\">=</span> fileNames<span class=\"hljs-built_in\">.</span>get(i);\n                System<span class=\"hljs-built_in\">.</span>out<span class=\"hljs-built_in\">.</span>println(name);\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> results;\n    }</code></pre> \n <p>FileName类的get方法（里面用到的其他方法在源代码同类名下）：</p> \n <pre class=\"prettyprint\"><code class=\" hljs lasso\">        <span class=\"hljs-built_in\">List</span><span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span> filterName <span class=\"hljs-subst\">=</span> <span class=\"hljs-literal\">new</span> ArrayList<span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span>();\n        filterName<span class=\"hljs-built_in\">.</span>add(<span class=\"hljs-string\">\"jpeg\"</span>);\n        filterName<span class=\"hljs-built_in\">.</span>add(<span class=\"hljs-string\">\"jpg\"</span>);\n        filterName<span class=\"hljs-built_in\">.</span>add(<span class=\"hljs-string\">\"png\"</span>);\n        filterName<span class=\"hljs-built_in\">.</span>add(<span class=\"hljs-string\">\"bmp\"</span>);\n        filterName<span class=\"hljs-built_in\">.</span>add(<span class=\"hljs-string\">\"gif\"</span>);<span class=\"hljs-comment\">// 自己可以定义</span>\n        <span class=\"hljs-comment\">/* * System.out.println(getFileList(ImageHelper.path + \"\\\\allworks\\\\\", * filterName)); */</span>\n        <span class=\"hljs-comment\">// 获取本地目录下的图片名称</span>\n        <span class=\"hljs-built_in\">String</span> t1 <span class=\"hljs-subst\">=</span> System<span class=\"hljs-built_in\">.</span>getProperty(<span class=\"hljs-string\">\"user.dir\"</span>)<span class=\"hljs-built_in\">.</span>substring(<span class=\"hljs-number\">0</span>,\n                System<span class=\"hljs-built_in\">.</span>getProperty(<span class=\"hljs-string\">\"user.dir\"</span>)<span class=\"hljs-built_in\">.</span>length() <span class=\"hljs-subst\">-</span> <span class=\"hljs-number\">4</span>);\n        <span class=\"hljs-built_in\">List</span><span class=\"hljs-subst\">&lt;</span><span class=\"hljs-built_in\">String</span><span class=\"hljs-subst\">&gt;</span> filenames <span class=\"hljs-subst\">=</span> getFileList(t1\n                <span class=\"hljs-subst\">+</span> <span class=\"hljs-string\">\"/webapps/media1/work/allworks/\"</span>, filterName);\n        <span class=\"hljs-keyword\">return</span> filenames;</code></pre> \n <p>图片搜索的基本原理就是这样，源代码中注释都是有的，看懂并不难，推荐各位去看下。</p> \n</div>', '', null, null, 'Java', null, null, '2', '1', '2019-10-16 15:20:48', null, '2019-10-16 15:20:48', '0000');
INSERT INTO `blog` VALUES ('2', 'windows下redis集群安装（V3.2.100）单机模式', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <!-- flowchart 箭头图标 勿删 --> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <h2><a id=\"windowsRedis_0\"></a>一、windows下的Redis资源：</h2> \n <p><a href=\"https://redis.io/\" rel=\"nofollow\" data-token=\"0495c6461da32ceeee71714fe596b597\">Redis官网</a>仅有linux版本，windows下redis由Microsoft维护，Github地址为：<a href=\"https://github.com/MicrosoftArchive/redis\" rel=\"nofollow\" data-token=\"9f0b19c6c68e7a276baea9897fe97716\">Microsoft Redis</a><br> 我这边直接采用自己环境的Redis资源做教程，地址如下：<a href=\"https://download.csdn.net/download/loverestart/11218421\" rel=\"nofollow\" data-token=\"1a6c05cc04a40a5bdec0239a1f8c2f40\">Redis</a></p> \n <h2><a id=\"_3\"></a>二、单服务安装：</h2> \n <p>Github上下载文件之后，直接解压到PC下，选择将Redis配置成服务：<br> CMD下运行：<br> <strong>配置服务</strong></p> \n <pre><code>redis-server --service-install redis.windows.conf --loglevel verbose --service-name redisService1\n --port 10001\n</code></pre> \n <p>redis.windows.conf为redis配置文件，loglevel为日志等级，包含四个可选等级：</p> \n <pre><code>#debug (a lot of information, useful for development/testing)\n#verbose (many rarely useful info, but not a mess like the debug level)\n#notice (moderately verbose, what you want in production probably)\n#warning (only very important / critical messages are logged)\n</code></pre> \n <p>service-name为服务名，port为运行端口，详细说明参见资源中：<br> <img src=\"https://img-blog.csdnimg.cn/20190531130333634.png\" alt=\"windows下Redis服务配置\"><br> 服务注册成功后可在服务中直接控制。<br> <img src=\"https://img-blog.csdnimg.cn/20190531130425849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvdmVSZXN0YXJ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">通过Redis连接<img src=\"https://img-blog.csdnimg.cn/20190531130533564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvdmVSZXN0YXJ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> CMD中连接<br> <img src=\"https://img-blog.csdnimg.cn/20190531130633708.png\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"_26\"></a>三、集群配置：</h2> \n <p>windows下集群配置需要ruby环境，下载地址：<a href=\"https://rubyinstaller.org/downloads/\" rel=\"nofollow\" data-token=\"487706bd34a0642934923af7f55eb173\">ruby下载</a>，<br> 安装完成之后配置到path中。<img src=\"https://img-blog.csdnimg.cn/20190531130908901.png\" alt=\"在这里插入图片描述\"></p> \n <p>本文以单机模式创建集群，实际过程中不可能。Redis集群配置需要开放Redis服务端口（默认6379）及集群端口（服务端口+10000），服务端接口建议修改或增加密码。<br> 以上述资源为例，创建7000至70056个文件夹，配置为三主三从。<br> 每个文件夹中需配置redis.windows.conf文件，部分配置说明如下：</p> \n <pre><code>port  7000		//端口\ncluster-enabled  yes		//开启集群  把注释#去掉\ncluster-config-file  nodes.conf		//集群的配置  配置文件首次启动自动生成\ncluster-node-timeout  5000			//请求超时  设置5秒够了\nappendonly  yes			//aof日志开启  有需要就开启，它会每次写操作都记录一条日志\n</code></pre> \n <p>配置修改完毕之后，修改为服务，cmd参考下方：</p> \n <pre><code>redis-server --service-install redis.windows.conf --loglevel verbose --service-name Redis7000\n</code></pre> \n <p>逐个启动Redis服务，结果如下：<br> <img src=\"https://img-blog.csdnimg.cn/20190531132027141.png\" alt=\"在这里插入图片描述\"><br> 四、创建集群<br> Ruby需要安装Redis库：<br> <img src=\"https://img-blog.csdnimg.cn/20190531132133245.png\" alt=\"在这里插入图片描述\"><br> 安装完成之后键入：</p> \n <pre><code>	ruby redis-trib.rb create --replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005\n	./redis-cli --cluster create 192.168.1.172:6379 192.168.1.172:6380 192.168.1.172:6381\n</code></pre> \n <p>最后需要输入yes创建集群：<br> <img src=\"https://img-blog.csdnimg.cn/20190531132228491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvdmVSZXN0YXJ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 连接集群：</p> \n <pre><code>redis-cli -c -h 127.0.0.1 -p 7000\n</code></pre> \n <p>-c表示集群方式连接，-h为主机ip，-p为端口</p> \n <p>查看集群状态：<br> <img src=\"https://img-blog.csdnimg.cn/20190531132411510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvdmVSZXN0YXJ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 可以看到所有槽位分配完毕。</p> \n</div>', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <!-- flowchart 箭头图标 勿删 --> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <h2><a id=\"windowsRedis_0\"></a>一、windows下的Redis资源：</h2> \n <p><a href=\"https://redis.io/\" rel=\"nofollow\" data-token=\"0495c6461da32ceeee71714fe596b597\">Redis官网</a>仅有linux版本，windows下redis由Microsoft维护，Github地址为：<a href=\"https://github.com/MicrosoftArchive/redis\" rel=\"nofollow\" data-token=\"9f0b19c6c68e7a276baea9897fe97716\">Microsoft Redis</a><br> 我这边直接采用自己环境的Redis资源做教程，地址如下：<a href=\"https://download.csdn.net/download/loverestart/11218421\" rel=\"nofollow\" data-token=\"1a6c05cc04a40a5bdec0239a1f8c2f40\">Redis</a></p> \n <h2><a id=\"_3\"></a>二、单服务安装：</h2> \n <p>Github上下载文件之后，直接解压到PC下，选择将Redis配置成服务：<br> CMD下运行：<br> <strong>配置服务</strong></p> \n <pre><code>redis-server --service-install redis.windows.conf --loglevel verbose --service-name redisService1\n --port 10001\n</code></pre> \n <p>redis.windows.conf为redis配置文件，loglevel为日志等级，包含四个可选等级：</p> \n <pre><code>#debug (a lot of information, useful for development/testing)\n#verbose (many rarely useful info, but not a mess like the debug level)\n#notice (moderately verbose, what you want in production probably)\n#warning (only very important / critical messages are logged)\n</code></pre> \n <p>service-name为服务名，port为运行端口，详细说明参见资源中：<br> <img src=\"https://img-blog.csdnimg.cn/20190531130333634.png\" alt=\"windows下Redis服务配置\"><br> 服务注册成功后可在服务中直接控制。<br> <img src=\"https://img-blog.csdnimg.cn/20190531130425849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvdmVSZXN0YXJ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">通过Redis连接<img src=\"https://img-blog.csdnimg.cn/20190531130533564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvdmVSZXN0YXJ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> CMD中连接<br> <img src=\"https://img-blog.csdnimg.cn/20190531130633708.png\" alt=\"在这里插入图片描述\"></p> \n <h2><a id=\"_26\"></a>三、集群配置：</h2> \n <p>windows下集群配置需要ruby环境，下载地址：<a href=\"https://rubyinstaller.org/downloads/\" rel=\"nofollow\" data-token=\"487706bd34a0642934923af7f55eb173\">ruby下载</a>，<br> 安装完成之后配置到path中。<img src=\"https://img-blog.csdnimg.cn/20190531130908901.png\" alt=\"在这里插入图片描述\"></p> \n <p>本文以单机模式创建集群，实际过程中不可能。Redis集群配置需要开放Redis服务端口（默认6379）及集群端口（服务端口+10000），服务端接口建议修改或增加密码。<br> 以上述资源为例，创建7000至70056个文件夹，配置为三主三从。<br> 每个文件夹中需配置redis.windows.conf文件，部分配置说明如下：</p> \n <pre><code>port  7000		//端口\ncluster-enabled  yes		//开启集群  把注释#去掉\ncluster-config-file  nodes.conf		//集群的配置  配置文件首次启动自动生成\ncluster-node-timeout  5000			//请求超时  设置5秒够了\nappendonly  yes			//aof日志开启  有需要就开启，它会每次写操作都记录一条日志\n</code></pre> \n <p>配置修改完毕之后，修改为服务，cmd参考下方：</p> \n <pre><code>redis-server --service-install redis.windows.conf --loglevel verbose --service-name Redis7000\n</code></pre> \n <p>逐个启动Redis服务，结果如下：<br> <img src=\"https://img-blog.csdnimg.cn/20190531132027141.png\" alt=\"在这里插入图片描述\"><br> 四、创建集群<br> Ruby需要安装Redis库：<br> <img src=\"https://img-blog.csdnimg.cn/20190531132133245.png\" alt=\"在这里插入图片描述\"><br> 安装完成之后键入：</p> \n <pre><code>	ruby redis-trib.rb create --replicas 1 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 127.0.0.1:7005\n	./redis-cli --cluster create 192.168.1.172:6379 192.168.1.172:6380 192.168.1.172:6381\n</code></pre> \n <p>最后需要输入yes创建集群：<br> <img src=\"https://img-blog.csdnimg.cn/20190531132228491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvdmVSZXN0YXJ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 连接集群：</p> \n <pre><code>redis-cli -c -h 127.0.0.1 -p 7000\n</code></pre> \n <p>-c表示集群方式连接，-h为主机ip，-p为端口</p> \n <p>查看集群状态：<br> <img src=\"https://img-blog.csdnimg.cn/20190531132411510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvdmVSZXN0YXJ0,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br> 可以看到所有槽位分配完毕。</p> \n</div>', '', null, null, 'Java', null, null, '2', '1', '2019-10-16 15:20:49', null, '2019-10-16 15:20:49', '0000');
INSERT INTO `blog` VALUES ('3', '设计模式--Delegate - ReDisaster的博客 - CSDN博客', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <!-- flowchart 箭头图标 勿删 --> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p><strong>委派模式</strong> <br> 在常用的23种设计模式中其实面没有委派模式（delegate）的影子，但是在Spring中委派模式确实用的比较多的一种模式，Spring MVC框架中的DispatcherServlet其实就用到了委派模式，有前辈将其总结为代理模式和策略模式的组合。下面通过一个简单的实例来总结委派模式</p> \n <p><strong>委派模式跟静态代理模式以及策略模式的区别？</strong> <br> <strong>委派模式</strong>：代理人全权负责这一件事。如：老板给项目经理安排任务，项目经理只是负责调度工作，真正干活的是底下的开发人员。 <br> <strong>静态代理模式</strong>：代理人只是参与被代理人一小部分的工作，最终的结论还是得由代理人来决定。如：张三没空找对象，媒婆帮张三物色到一个对象，最终得看张三喜不喜欢这个对象。 <br> <strong>策略模式</strong>：项目经理在分配任务的时候需要权衡，会产生多种分配方案，但是最终都是将手中的任务分配给底下的开发人员。</p> \n <p>示例： <br> <img src=\"https://img-blog.csdn.net/20180824220036472?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvdmVSZXN0YXJ0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br> Boss通过将任务发布给项目经理，体现静态代理，项目经理根据任务选择相应的员工完成任务，体现策略模式。 <br> 1.创建委派接口：</p> \n <pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> ITarget {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doing</span>(String command);\n}</code></pre> \n <p>2.接口实现</p> \n <pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TargetB</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ITarget</span>{</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doing</span>(String command) {\n        System.out.println(<span class=\"hljs-string\">\"开始开发销售代码\"</span>);\n    }\n}</code></pre> \n <pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TargetA</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ITarget</span> {</span>\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doing</span>(String command) {\n        System.out.println(<span class=\"hljs-string\">\"开始进行加密算法的实现\"</span>);\n    }\n\n}</code></pre> \n <p>3.委派类：</p> \n <pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Leader {\n    <span class=\"hljs-keyword\">private</span> Map&lt;String ,ITarget&gt; targets = <span class=\"hljs-keyword\">new</span> HashMap&lt;String ,ITarget&gt;();\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Leader</span>(){\n        targets.put(<span class=\"hljs-string\">\"加密\"</span>,<span class=\"hljs-keyword\">new</span> TargetA());\n        targets.put(<span class=\"hljs-string\">\"销售\"</span>,<span class=\"hljs-keyword\">new</span> TargetB());\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dispatch</span>(String command){\n        targets.<span class=\"hljs-keyword\">get</span>(command).doing(command);\n    }\n}</code></pre> \n <p>4.测试：</p> \n <pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Boss {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span>(String[] args) {\n<span class=\"hljs-comment\">// new Leader().dispatch(\"加密\");</span>\n\n        <span class=\"hljs-keyword\">new</span> Leader().dispatch(<span class=\"hljs-string\">\"销售\"</span>);\n\n    }\n}</code></pre> \n</div>', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <!-- flowchart 箭头图标 勿删 --> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p><strong>委派模式</strong> <br> 在常用的23种设计模式中其实面没有委派模式（delegate）的影子，但是在Spring中委派模式确实用的比较多的一种模式，Spring MVC框架中的DispatcherServlet其实就用到了委派模式，有前辈将其总结为代理模式和策略模式的组合。下面通过一个简单的实例来总结委派模式</p> \n <p><strong>委派模式跟静态代理模式以及策略模式的区别？</strong> <br> <strong>委派模式</strong>：代理人全权负责这一件事。如：老板给项目经理安排任务，项目经理只是负责调度工作，真正干活的是底下的开发人员。 <br> <strong>静态代理模式</strong>：代理人只是参与被代理人一小部分的工作，最终的结论还是得由代理人来决定。如：张三没空找对象，媒婆帮张三物色到一个对象，最终得看张三喜不喜欢这个对象。 <br> <strong>策略模式</strong>：项目经理在分配任务的时候需要权衡，会产生多种分配方案，但是最终都是将手中的任务分配给底下的开发人员。</p> \n <p>示例： <br> <img src=\"https://img-blog.csdn.net/20180824220036472?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvdmVSZXN0YXJ0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br> Boss通过将任务发布给项目经理，体现静态代理，项目经理根据任务选择相应的员工完成任务，体现策略模式。 <br> 1.创建委派接口：</p> \n <pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> ITarget {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doing</span>(String command);\n}</code></pre> \n <p>2.接口实现</p> \n <pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TargetB</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ITarget</span>{</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doing</span>(String command) {\n        System.out.println(<span class=\"hljs-string\">\"开始开发销售代码\"</span>);\n    }\n}</code></pre> \n <pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TargetA</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">ITarget</span> {</span>\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">doing</span>(String command) {\n        System.out.println(<span class=\"hljs-string\">\"开始进行加密算法的实现\"</span>);\n    }\n\n}</code></pre> \n <p>3.委派类：</p> \n <pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Leader {\n    <span class=\"hljs-keyword\">private</span> Map&lt;String ,ITarget&gt; targets = <span class=\"hljs-keyword\">new</span> HashMap&lt;String ,ITarget&gt;();\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Leader</span>(){\n        targets.put(<span class=\"hljs-string\">\"加密\"</span>,<span class=\"hljs-keyword\">new</span> TargetA());\n        targets.put(<span class=\"hljs-string\">\"销售\"</span>,<span class=\"hljs-keyword\">new</span> TargetB());\n    }\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">dispatch</span>(String command){\n        targets.<span class=\"hljs-keyword\">get</span>(command).doing(command);\n    }\n}</code></pre> \n <p>4.测试：</p> \n <pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Boss {\n\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span>(String[] args) {\n<span class=\"hljs-comment\">// new Leader().dispatch(\"加密\");</span>\n\n        <span class=\"hljs-keyword\">new</span> Leader().dispatch(<span class=\"hljs-string\">\"销售\"</span>);\n\n    }\n}</code></pre> \n</div>', '', null, null, 'Mybatis', null, null, '2', '1', '2019-10-16 15:20:49', null, '2019-10-16 15:20:49', '0000');
INSERT INTO `blog` VALUES ('4', '设计模式--Strategy - ReDisaster的博客 - CSDN博客', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <!-- flowchart 箭头图标 勿删 --> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p><strong>策略模式</strong> <br> 在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于<strong>行为型模式</strong>。 <br> 在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p> \n <p><strong>意图：</strong>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p> \n <p><strong>主要解决：</strong>在有多种算法相似的情况下，使用 <strong>if…else</strong> 所带来的复杂和难以维护。</p> \n <p><strong>如何解决</strong>：将这些算法封装成一个一个的类，任意地替换。</p> \n <p><strong>关键代码：</strong>实现同一个接口。</p> \n <p><strong>应用实例：</strong> 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。</p> \n <p><strong>优点：</strong> 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。</p> \n <p><strong>缺点：</strong> 1、策略类会增多。 2、所有策略类都需要对外暴露。</p> \n <p><strong>使用场景：</strong> 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p> \n <p><strong>注意事项</strong>：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</p> \n <p><strong>示例：</strong> <br> 我们将创建一个定义活动的 Strategy 接口和实现了 Strategy 接口的实体策略类。Context 是一个使用了某种策略的类。StrategyPatternDemo，我们的演示类使用 Context 和策略对象来演示 Context 在它所配置或使用的策略改变时的行为变化。 <br> <img src=\"https://img-blog.csdn.net/20180824212945669?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvdmVSZXN0YXJ0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></p> \n <p>这个模式涉及到三个角色</p> \n <ul> \n  <li>环境(Context)角色：持有一个Strategy的引用。</li> \n  <li>抽象策略(Strategy)角色：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。</li> \n  <li>具体策略(ConcreteStrategy)角色：包装了相关的算法或行为。</li> \n </ul> \n <p>1.创建接口：Strategy.java</p> \n <pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> Strategy {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">doOperation</span>(<span class=\"hljs-keyword\">int</span> num1, <span class=\"hljs-keyword\">int</span> num2);\n}</code></pre> \n <p>2.创建接口实现：OperationAdd .java &amp; OperationMultiply.java &amp;OperationSubstract.java</p> \n <pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">OperationAdd</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Strategy</span> {</span>\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">doOperation</span>(<span class=\"hljs-keyword\">int</span> num1, <span class=\"hljs-keyword\">int</span> num2) {\n        <span class=\"hljs-keyword\">return</span> num1 + num2;\n    }\n}</code></pre> \n <pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">OperationMultiply</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Strategy</span> {</span>\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">doOperation</span>(<span class=\"hljs-keyword\">int</span> num1, <span class=\"hljs-keyword\">int</span> num2) {\n        <span class=\"hljs-keyword\">return</span> num1 * num2;\n    }\n}</code></pre> \n <pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">OperationSubstract</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Strategy</span> {</span>\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">doOperation</span>(<span class=\"hljs-keyword\">int</span> num1, <span class=\"hljs-keyword\">int</span> num2) {\n        <span class=\"hljs-keyword\">return</span> num1 - num2;\n    }\n}</code></pre> \n <p>3.创建 Context 类</p> \n <pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Context {\n    <span class=\"hljs-keyword\">private</span> Strategy strategy;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Context</span>(Strategy strategy){\n        <span class=\"hljs-keyword\">this</span>.strategy = strategy;\n    }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">executeStrategy</span>(<span class=\"hljs-keyword\">int</span> num1, <span class=\"hljs-keyword\">int</span> num2){\n        <span class=\"hljs-keyword\">return</span> strategy.doOperation(num1, num2);\n    }\n}</code></pre> \n <p>4.测试：StrategyPatternDemo .java</p> \n <pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> StrategyPatternDemo {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span>(String[] args) {\n        Context context = <span class=\"hljs-keyword\">new</span> Context(<span class=\"hljs-keyword\">new</span> OperationAdd());\n        System.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"10 + 5 = \"</span> + context.executeStrategy(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>));\n\n        context = <span class=\"hljs-keyword\">new</span> Context(<span class=\"hljs-keyword\">new</span> OperationSubstract());\n        System.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"10 - 5 = \"</span> + context.executeStrategy(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>));\n\n        context = <span class=\"hljs-keyword\">new</span> Context(<span class=\"hljs-keyword\">new</span> OperationMultiply());\n        System.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"10 * 5 = \"</span> + context.executeStrategy(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>));\n    }\n}\n</code></pre> \n</div>', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <!-- flowchart 箭头图标 勿删 --> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p><strong>策略模式</strong> <br> 在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于<strong>行为型模式</strong>。 <br> 在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p> \n <p><strong>意图：</strong>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p> \n <p><strong>主要解决：</strong>在有多种算法相似的情况下，使用 <strong>if…else</strong> 所带来的复杂和难以维护。</p> \n <p><strong>如何解决</strong>：将这些算法封装成一个一个的类，任意地替换。</p> \n <p><strong>关键代码：</strong>实现同一个接口。</p> \n <p><strong>应用实例：</strong> 1、诸葛亮的锦囊妙计，每一个锦囊就是一个策略。 2、旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。</p> \n <p><strong>优点：</strong> 1、算法可以自由切换。 2、避免使用多重条件判断。 3、扩展性良好。</p> \n <p><strong>缺点：</strong> 1、策略类会增多。 2、所有策略类都需要对外暴露。</p> \n <p><strong>使用场景：</strong> 1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。 2、一个系统需要动态地在几种算法中选择一种。 3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p> \n <p><strong>注意事项</strong>：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</p> \n <p><strong>示例：</strong> <br> 我们将创建一个定义活动的 Strategy 接口和实现了 Strategy 接口的实体策略类。Context 是一个使用了某种策略的类。StrategyPatternDemo，我们的演示类使用 Context 和策略对象来演示 Context 在它所配置或使用的策略改变时的行为变化。 <br> <img src=\"https://img-blog.csdn.net/20180824212945669?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvdmVSZXN0YXJ0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></p> \n <p>这个模式涉及到三个角色</p> \n <ul> \n  <li>环境(Context)角色：持有一个Strategy的引用。</li> \n  <li>抽象策略(Strategy)角色：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。</li> \n  <li>具体策略(ConcreteStrategy)角色：包装了相关的算法或行为。</li> \n </ul> \n <p>1.创建接口：Strategy.java</p> \n <pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> Strategy {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">doOperation</span>(<span class=\"hljs-keyword\">int</span> num1, <span class=\"hljs-keyword\">int</span> num2);\n}</code></pre> \n <p>2.创建接口实现：OperationAdd .java &amp; OperationMultiply.java &amp;OperationSubstract.java</p> \n <pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">OperationAdd</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Strategy</span> {</span>\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">doOperation</span>(<span class=\"hljs-keyword\">int</span> num1, <span class=\"hljs-keyword\">int</span> num2) {\n        <span class=\"hljs-keyword\">return</span> num1 + num2;\n    }\n}</code></pre> \n <pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">OperationMultiply</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Strategy</span> {</span>\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">doOperation</span>(<span class=\"hljs-keyword\">int</span> num1, <span class=\"hljs-keyword\">int</span> num2) {\n        <span class=\"hljs-keyword\">return</span> num1 * num2;\n    }\n}</code></pre> \n <pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">OperationSubstract</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Strategy</span> {</span>\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">doOperation</span>(<span class=\"hljs-keyword\">int</span> num1, <span class=\"hljs-keyword\">int</span> num2) {\n        <span class=\"hljs-keyword\">return</span> num1 - num2;\n    }\n}</code></pre> \n <p>3.创建 Context 类</p> \n <pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> Context {\n    <span class=\"hljs-keyword\">private</span> Strategy strategy;\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title\">Context</span>(Strategy strategy){\n        <span class=\"hljs-keyword\">this</span>.strategy = strategy;\n    }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">executeStrategy</span>(<span class=\"hljs-keyword\">int</span> num1, <span class=\"hljs-keyword\">int</span> num2){\n        <span class=\"hljs-keyword\">return</span> strategy.doOperation(num1, num2);\n    }\n}</code></pre> \n <p>4.测试：StrategyPatternDemo .java</p> \n <pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> StrategyPatternDemo {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span>(String[] args) {\n        Context context = <span class=\"hljs-keyword\">new</span> Context(<span class=\"hljs-keyword\">new</span> OperationAdd());\n        System.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"10 + 5 = \"</span> + context.executeStrategy(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>));\n\n        context = <span class=\"hljs-keyword\">new</span> Context(<span class=\"hljs-keyword\">new</span> OperationSubstract());\n        System.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"10 - 5 = \"</span> + context.executeStrategy(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>));\n\n        context = <span class=\"hljs-keyword\">new</span> Context(<span class=\"hljs-keyword\">new</span> OperationMultiply());\n        System.<span class=\"hljs-keyword\">out</span>.println(<span class=\"hljs-string\">\"10 * 5 = \"</span> + context.executeStrategy(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">5</span>));\n    }\n}\n</code></pre> \n</div>', '', null, null, 'redis', null, null, '2', '1', '2019-10-16 15:20:49', null, '2019-10-16 15:20:49', '0000');
INSERT INTO `blog` VALUES ('5', '设计模式--Template - ReDisaster的博客 - CSDN博客', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <!-- flowchart 箭头图标 勿删 --> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p><strong>模板模式</strong> <br> 在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p> \n <p><strong>意图</strong>：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p> \n <p><strong>主要解决</strong>：一些方法通用，却在每一个子类都重新写了这一方法。</p> \n <p><strong>何时使用：</strong>有一些通用的方法。</p> \n <p><strong>如何解决</strong>：将这些通用算法抽象出来。</p> \n <p><strong>关键代码</strong>：在抽象类实现，其他步骤在子类实现。</p> \n <p><strong>应用实例</strong>： 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。</p> \n <p><strong>优点</strong>： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。</p> \n <p><strong>缺点</strong>：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p> \n <p><strong>使用场景</strong>： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。</p> \n <p><strong>注意事项</strong>：为防止恶意操作，一般模板方法都加上 final 关键词。</p> \n <p><strong>示例：</strong> <br> 创建一个定义操作的 Game 抽象类，其中，模板方法设置为 final，这样它就不会被重写。Cricket 和 Football 是扩展了 Game 的实体类，它们重写了抽象类的方法。 <br> TemplatePatternDemo，我们的演示类使用 Game 来演示模板模式的用法。 <br> <img src=\"https://img-blog.csdn.net/20180824172116138?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvdmVSZXN0YXJ0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></p> \n <pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> Game {\n    <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> initialize();\n    <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> startPlay();\n    <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> endPlay();\n    <span class=\"hljs-comment\">//模板</span>\n    <span class=\"hljs-keyword\">public</span> final <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">play</span>(){\n        <span class=\"hljs-comment\">//初始化游戏</span>\n        initialize();\n        <span class=\"hljs-comment\">//开始游戏</span>\n        startPlay();\n        <span class=\"hljs-comment\">//结束游戏</span>\n        endPlay();\n    }\n}</code></pre> \n <p>2.实现类：Football.java &amp;Cricket.java</p> \n <pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Football</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Game</span> {</span>\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">void</span> endPlay() {\n        System.out.println(<span class=\"hljs-string\">\"Football Game Finished!\"</span>);\n    }\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">void</span> initialize() {\n        System.out.println(<span class=\"hljs-string\">\"Football Game Initialized! Start playing.\"</span>);\n    }\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">void</span> startPlay() {\n        System.out.println(<span class=\"hljs-string\">\"Football Game Started. Enjoy the game!\"</span>);\n    }\n}\n</code></pre> \n <pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cricket</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Game</span> {</span>\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">void</span> endPlay() {\n        System.out.println(<span class=\"hljs-string\">\"Cricket Game Finished!\"</span>);\n    }\n\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">void</span> initialize() {\n        System.out.println(<span class=\"hljs-string\">\"Cricket Game Initialized! Start playing.\"</span>);\n    }\n\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">void</span> startPlay() {\n        System.out.println(<span class=\"hljs-string\">\"Cricket Game Started. Enjoy the game!\"</span>);\n    }\n}\n</code></pre> \n <p>3.测试：TemplatePatternDemo.java</p> \n <pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> TemplatePatternDemo {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span>(String[] args) {\n\n        Game game = <span class=\"hljs-keyword\">new</span> Cricket();\n        game.play();\n        System.<span class=\"hljs-keyword\">out</span>.println();\n        game = <span class=\"hljs-keyword\">new</span> Football();\n        game.play();\n    }\n}\n</code></pre> \n</div>', '<div id=\"content_views\" class=\"markdown_views prism-atom-one-dark\"> \n <!-- flowchart 箭头图标 勿删 --> \n <svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"> \n  <path stroke-linecap=\"round\" d=\"M5,0 0,2.5 5,5z\" id=\"raphael-marker-block\" style=\"-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\"></path> \n </svg> \n <p><strong>模板模式</strong> <br> 在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于行为型模式。</p> \n <p><strong>意图</strong>：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p> \n <p><strong>主要解决</strong>：一些方法通用，却在每一个子类都重新写了这一方法。</p> \n <p><strong>何时使用：</strong>有一些通用的方法。</p> \n <p><strong>如何解决</strong>：将这些通用算法抽象出来。</p> \n <p><strong>关键代码</strong>：在抽象类实现，其他步骤在子类实现。</p> \n <p><strong>应用实例</strong>： 1、在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。 2、西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。 3、spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。</p> \n <p><strong>优点</strong>： 1、封装不变部分，扩展可变部分。 2、提取公共代码，便于维护。 3、行为由父类控制，子类实现。</p> \n <p><strong>缺点</strong>：每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p> \n <p><strong>使用场景</strong>： 1、有多个子类共有的方法，且逻辑相同。 2、重要的、复杂的方法，可以考虑作为模板方法。</p> \n <p><strong>注意事项</strong>：为防止恶意操作，一般模板方法都加上 final 关键词。</p> \n <p><strong>示例：</strong> <br> 创建一个定义操作的 Game 抽象类，其中，模板方法设置为 final，这样它就不会被重写。Cricket 和 Football 是扩展了 Game 的实体类，它们重写了抽象类的方法。 <br> TemplatePatternDemo，我们的演示类使用 Game 来演示模板模式的用法。 <br> <img src=\"https://img-blog.csdn.net/20180824172116138?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0xvdmVSZXN0YXJ0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"></p> \n <pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> Game {\n    <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> initialize();\n    <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> startPlay();\n    <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">void</span> endPlay();\n    <span class=\"hljs-comment\">//模板</span>\n    <span class=\"hljs-keyword\">public</span> final <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">play</span>(){\n        <span class=\"hljs-comment\">//初始化游戏</span>\n        initialize();\n        <span class=\"hljs-comment\">//开始游戏</span>\n        startPlay();\n        <span class=\"hljs-comment\">//结束游戏</span>\n        endPlay();\n    }\n}</code></pre> \n <p>2.实现类：Football.java &amp;Cricket.java</p> \n <pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Football</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Game</span> {</span>\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">void</span> endPlay() {\n        System.out.println(<span class=\"hljs-string\">\"Football Game Finished!\"</span>);\n    }\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">void</span> initialize() {\n        System.out.println(<span class=\"hljs-string\">\"Football Game Initialized! Start playing.\"</span>);\n    }\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">void</span> startPlay() {\n        System.out.println(<span class=\"hljs-string\">\"Football Game Started. Enjoy the game!\"</span>);\n    }\n}\n</code></pre> \n <pre class=\"prettyprint\"><code class=\" hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Cricket</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Game</span> {</span>\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">void</span> endPlay() {\n        System.out.println(<span class=\"hljs-string\">\"Cricket Game Finished!\"</span>);\n    }\n\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">void</span> initialize() {\n        System.out.println(<span class=\"hljs-string\">\"Cricket Game Initialized! Start playing.\"</span>);\n    }\n\n    <span class=\"hljs-annotation\">@Override</span>\n    <span class=\"hljs-keyword\">void</span> startPlay() {\n        System.out.println(<span class=\"hljs-string\">\"Cricket Game Started. Enjoy the game!\"</span>);\n    }\n}\n</code></pre> \n <p>3.测试：TemplatePatternDemo.java</p> \n <pre class=\"prettyprint\"><code class=\" hljs cs\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> TemplatePatternDemo {\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span>(String[] args) {\n\n        Game game = <span class=\"hljs-keyword\">new</span> Cricket();\n        game.play();\n        System.<span class=\"hljs-keyword\">out</span>.println();\n        game = <span class=\"hljs-keyword\">new</span> Football();\n        game.play();\n    }\n}\n</code></pre> \n</div>', '', null, null, 'rabbitMQ', null, null, '2', '1', '2019-10-16 15:20:54', null, '2019-10-16 15:20:54', '0000');
INSERT INTO `blog` VALUES ('6', 'B树和B+树是怎么长的 - 掘金', '<div data-id=\"5d82d4cb5188257e8e46dfe4\" itemprop=\"articleBody\" class=\"article-content\" data-v-5e15fbe3>\n <h3 data-id=\"heading-0\">1 B树</h3>\n <p>在介绍B+树之前， 先简单的介绍一下B树，这两种数据结构既有相似之处，也有他们的区别，最后，我们也会对比一下这两种数据结构的区别。</p>\n <h4 data-id=\"heading-1\">1.1 B树概念</h4>\n <p>B树也称B-树,它是一颗多路平衡查找树。二叉树我想大家都不陌生，其实，B树和后面讲到的B+树也是从最简单的二叉树变换而来的，并没有什么神秘的地方，下面我们来看看B树的定义。</p>\n <ul>\n  <li><p>每个节点最多有m-1个<b>关键字</b>（可以存有的键值对）。</p></li>\n  <li><p>根节点最少可以只有1个<b>关键字</b>。</p></li>\n  <li><p>非根节点至少有m/2个<b>关键字</b>。</p></li>\n  <li><p>每个节点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它。</p></li>\n  <li><p>所有叶子节点都位于同一层，或者说根节点到每个叶子节点的长度都相同。</p></li>\n  <li><p>每个节点都存有索引和数据，也就是对应的key和value。</p></li>\n </ul>\n <p>所以，根节点的<b>关键字</b>数量范围：<code>1 &lt;= k &lt;= m-1</code>，非根节点的<b>关键字</b>数量范围：<code>m/2 &lt;= k &lt;= m-1</code>。</p>\n <p>另外，我们需要注意一个概念，描述一颗B树时需要指定它的阶数，阶数表示了一个节点最多有多少个孩子节点，一般用字母m表示阶数。</p>\n <p>我们再举个例子来说明一下上面的概念，比如这里有一个5阶的B树，根节点数量范围：1 &lt;= k &lt;= 4，非根节点数量范围：2 &lt;= k &lt;= 4。</p>\n <p>下面，我们通过一个插入的例子，讲解一下B树的插入过程，接着，再讲解一下删除关键字的过程。</p>\n <h4 data-id=\"heading-2\">1.2 B树插入</h4>\n <p>插入的时候，我们需要记住一个规则：<b>判断当前结点key的个数是否小于等于m-1，如果满足，直接插入即可，如果不满足，将节点的中间的key将这个节点分为左右两部分，中间的节点放到父节点中即可。</b></p>\n <p>例子：在5阶B树中，结点最多有4个key,最少有2个key（注意：下面的节点统一用一个节点表示key和value）。</p>\n <ul>\n  <li>插入18，70，50,40</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6609b2d5b?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"341\" data-height=\"95\"></p>\n <ul>\n  <li>插入22</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e660c1eab7?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"353\" data-height=\"101\"></p>\n <p>插入22时，发现这个节点的关键字已经大于4了，所以需要进行分裂，分裂的规则在上面已经讲了，分裂之后，如下。</p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6612ee6f6?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"451\" data-height=\"215\"></p>\n <ul>\n  <li>接着插入23，25，39</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e66164adaa?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"582\" data-height=\"194\"></p>\n <p>分裂，得到下面的。</p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e66175d922?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"571\" data-height=\"274\"></p>\n <p>更过的插入的过程就不多介绍了，相信有这个例子你已经知道怎么进行插入操作了。</p>\n <h4 data-id=\"heading-3\">1.3 B树的删除操作</h4>\n <p>B树的删除操作相对于插入操作是相对复杂一些的，但是，你知道记住几种情况，一样可以很轻松的掌握的。</p>\n <ul>\n  <li>现在有一个初始状态是下面这样的B树，然后进行删除操作。</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e661a57f72?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"887\" data-height=\"410\"></p>\n <ul>\n  <li>删除15，这种情况是删除叶子节点的元素，如果删除之后，节点数还是大于<code>m/2</code>，这种情况只要直接删除即可。</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e680f7b67d?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"897\" data-height=\"440\"></p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e682315a34?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"890\" data-height=\"402\"></p>\n <ul>\n  <li>接着，我们把22删除，这种情况的规则：22是非叶子节点，<b>对于非叶子节点的删除，我们需要用后继key（元素）覆盖要删除的key，然后在后继key所在的子支中删除该后继key</b>。对于删除22，需要将后继元素24移到被删除的22所在的节点。</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e68443be33?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"801\" data-height=\"448\"></p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e68526fb11?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"806\" data-height=\"359\"></p>\n <p>此时发现26所在的节点只有一个元素，小于2个（m/2），这个节点不符合要求，这时候的规则（向兄弟节点借元素）：<b>如果删除叶子节点，如果删除元素后元素个数少于（m/2），并且它的兄弟节点的元素大于（m/2），也就是说兄弟节点的元素比最少值m/2还多，将先将父节点的元素移到该节点，然后将兄弟节点的元素再移动到父节点</b>。这样就满足要求了。</p>\n <p>我们看看操作过程就更加明白了。</p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e687a27f3b?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"787\" data-height=\"350\"></p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e692e39b19?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"799\" data-height=\"358\"></p>\n <ul>\n  <li>接着删除28，<b>删除叶子节点</b>，删除后不满足要求，所以，我们需要考虑向兄弟节点借元素，但是，兄弟节点也没有多的节点（2个），借不了，怎么办呢？如果遇到这种情况，<b>首先，还是将先将父节点的元素移到该节点，然后，将当前节点及它的兄弟节点中的key合并，形成一个新的节点</b>。</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6a49ed3c1?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"808\" data-height=\"427\"></p>\n <p>移动之后，跟兄弟节点合并。</p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6ade12853?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"797\" data-height=\"381\"></p>\n <p>删除就只有上面的几种情况，根据不同的情况进行删除即可。</p>\n <p>上面的这些介绍，相信对于B树已经有一定的了解了，接下来的一部分，我们接着讲解B+树，我相信加上B+树的对比，就更加清晰明了了。</p>\n <h3 data-id=\"heading-4\">2 B+树</h3>\n <h4 data-id=\"heading-5\">2.1 B+树概述</h4>\n <p>B+树其实和B树是非常相似的，我们首先看看<b>相同点</b>。</p>\n <ul>\n  <li>根节点至少一个元素</li>\n  <li>非根节点元素范围：m/2 &lt;= k &lt;= m-1</li>\n </ul>\n <p><b>不同点</b>。</p>\n <ul>\n  <li>B+树有两种类型的节点：内部结点（也称索引结点）和叶子结点。内部节点就是非叶子节点，内部节点不存储数据，只存储索引，数据都存储在叶子节点。</li>\n  <li>内部结点中的key都按照从小到大的顺序排列，对于内部结点中的一个key，左树中的所有key都小于它，右子树中的key都大于等于它。叶子结点中的记录也按照key的大小排列。</li>\n  <li>每个叶子结点都存有相邻叶子结点的指针，叶子结点本身依关键字的大小自小而大顺序链接。</li>\n  <li>父节点存有右孩子的第一个元素的索引。</li>\n </ul>\n <p>下面我们看一个B+树的例子，感受感受它吧！</p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6adc6109b?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"628\" data-height=\"358\"></p>\n <h4 data-id=\"heading-6\">2.2 插入操作</h4>\n <p>对于插入操作很简单，只需要记住一个技巧即可：<b>当节点元素数量大于m-1的时候，按中间元素分裂成左右两部分，中间元素分裂到父节点当做索引存储，但是，本身中间元素还是分裂右边这一部分的</b>。</p>\n <p>下面以一颗5阶B+树的插入过程为例，5阶B+树的节点最少2个元素，最多4个元素。</p>\n <ul>\n  <li>插入5，10，15，20</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6b1013c31?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"352\" data-height=\"154\"></p>\n <ul>\n  <li>插入25，此时元素数量大于4个了，分裂</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6b20d520d?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"542\" data-height=\"242\"></p>\n <ul>\n  <li>接着插入26，30，继续分裂</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6c0741f1a?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"602\" data-height=\"221\"></p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6cfa7ab47?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"687\" data-height=\"249\"></p>\n <p>有了这几个例子，相信插入操作没什么问题了，下面接着看看删除操作。</p>\n <h4 data-id=\"heading-7\">2.3 删除操作</h4>\n <p>对于删除操作是比B树简单一些的，因为<b>叶子节点有指针的存在，向兄弟节点借元素时，不需要通过父节点了，而是可以直接通过兄弟节移动即可（前提是兄弟节点的元素大于m/2），然后更新父节点的索引；如果兄弟节点的元素不大于m/2（兄弟节点也没有多余的元素），则将当前节点和兄弟节点合并，并且删除父节点中的key</b>，下面我们看看具体的实例。</p>\n <ul>\n  <li>初始状态</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6d3a3a507?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"963\" data-height=\"320\"></p>\n <ul>\n  <li>删除10，删除后，不满足要求，发现左边兄弟节点有多余的元素，所以去借元素，最后，修改父节点索引</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6d55ef87e?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"995\" data-height=\"332\"></p>\n <ul>\n  <li>删除元素5，发现不满足要求，并且发现左右兄弟节点都没有多余的元素，所以，可以选择和兄弟节点合并，最后修改父节点索引</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6d7a1d8de?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"944\" data-height=\"366\"></p>\n <ul>\n  <li>发现父节点索引也不满足条件，所以，需要做跟上面一步一样的操作</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6e1ede308?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"919\" data-height=\"362\"></p>\n <p>这样，B+树的删除操作也就完成了，是不是看完之后，觉得非常简单！</p>\n <h3 data-id=\"heading-8\">3 B树和B+树总结</h3>\n <p>B+树相对于B树有一些自己的优势，可以归结为下面几点。</p>\n <ul>\n  <li>单一节点存储的元素更多，使得查询的IO次数更少，所以也就使得它更适合做为数据库MySQL的底层数据结构了。</li>\n  <li>所有的查询都要查找到叶子节点，查询性能是稳定的，而B树，每个节点都可以查找到数据，所以不稳定。</li>\n  <li>所有的叶子节点形成了一个有序链表，更加便于查找。</li>\n </ul>\n <p><br></p>\n</div>', '<div data-id=\"5d82d4cb5188257e8e46dfe4\" itemprop=\"articleBody\" class=\"article-content\" data-v-5e15fbe3>\n <h3 data-id=\"heading-0\">1 B树</h3>\n <p>在介绍B+树之前， 先简单的介绍一下B树，这两种数据结构既有相似之处，也有他们的区别，最后，我们也会对比一下这两种数据结构的区别。</p>\n <h4 data-id=\"heading-1\">1.1 B树概念</h4>\n <p>B树也称B-树,它是一颗多路平衡查找树。二叉树我想大家都不陌生，其实，B树和后面讲到的B+树也是从最简单的二叉树变换而来的，并没有什么神秘的地方，下面我们来看看B树的定义。</p>\n <ul>\n  <li><p>每个节点最多有m-1个<b>关键字</b>（可以存有的键值对）。</p></li>\n  <li><p>根节点最少可以只有1个<b>关键字</b>。</p></li>\n  <li><p>非根节点至少有m/2个<b>关键字</b>。</p></li>\n  <li><p>每个节点中的关键字都按照从小到大的顺序排列，每个关键字的左子树中的所有关键字都小于它，而右子树中的所有关键字都大于它。</p></li>\n  <li><p>所有叶子节点都位于同一层，或者说根节点到每个叶子节点的长度都相同。</p></li>\n  <li><p>每个节点都存有索引和数据，也就是对应的key和value。</p></li>\n </ul>\n <p>所以，根节点的<b>关键字</b>数量范围：<code>1 &lt;= k &lt;= m-1</code>，非根节点的<b>关键字</b>数量范围：<code>m/2 &lt;= k &lt;= m-1</code>。</p>\n <p>另外，我们需要注意一个概念，描述一颗B树时需要指定它的阶数，阶数表示了一个节点最多有多少个孩子节点，一般用字母m表示阶数。</p>\n <p>我们再举个例子来说明一下上面的概念，比如这里有一个5阶的B树，根节点数量范围：1 &lt;= k &lt;= 4，非根节点数量范围：2 &lt;= k &lt;= 4。</p>\n <p>下面，我们通过一个插入的例子，讲解一下B树的插入过程，接着，再讲解一下删除关键字的过程。</p>\n <h4 data-id=\"heading-2\">1.2 B树插入</h4>\n <p>插入的时候，我们需要记住一个规则：<b>判断当前结点key的个数是否小于等于m-1，如果满足，直接插入即可，如果不满足，将节点的中间的key将这个节点分为左右两部分，中间的节点放到父节点中即可。</b></p>\n <p>例子：在5阶B树中，结点最多有4个key,最少有2个key（注意：下面的节点统一用一个节点表示key和value）。</p>\n <ul>\n  <li>插入18，70，50,40</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6609b2d5b?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"341\" data-height=\"95\"></p>\n <ul>\n  <li>插入22</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e660c1eab7?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"353\" data-height=\"101\"></p>\n <p>插入22时，发现这个节点的关键字已经大于4了，所以需要进行分裂，分裂的规则在上面已经讲了，分裂之后，如下。</p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6612ee6f6?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"451\" data-height=\"215\"></p>\n <ul>\n  <li>接着插入23，25，39</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e66164adaa?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"582\" data-height=\"194\"></p>\n <p>分裂，得到下面的。</p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e66175d922?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"571\" data-height=\"274\"></p>\n <p>更过的插入的过程就不多介绍了，相信有这个例子你已经知道怎么进行插入操作了。</p>\n <h4 data-id=\"heading-3\">1.3 B树的删除操作</h4>\n <p>B树的删除操作相对于插入操作是相对复杂一些的，但是，你知道记住几种情况，一样可以很轻松的掌握的。</p>\n <ul>\n  <li>现在有一个初始状态是下面这样的B树，然后进行删除操作。</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e661a57f72?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"887\" data-height=\"410\"></p>\n <ul>\n  <li>删除15，这种情况是删除叶子节点的元素，如果删除之后，节点数还是大于<code>m/2</code>，这种情况只要直接删除即可。</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e680f7b67d?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"897\" data-height=\"440\"></p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e682315a34?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"890\" data-height=\"402\"></p>\n <ul>\n  <li>接着，我们把22删除，这种情况的规则：22是非叶子节点，<b>对于非叶子节点的删除，我们需要用后继key（元素）覆盖要删除的key，然后在后继key所在的子支中删除该后继key</b>。对于删除22，需要将后继元素24移到被删除的22所在的节点。</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e68443be33?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"801\" data-height=\"448\"></p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e68526fb11?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"806\" data-height=\"359\"></p>\n <p>此时发现26所在的节点只有一个元素，小于2个（m/2），这个节点不符合要求，这时候的规则（向兄弟节点借元素）：<b>如果删除叶子节点，如果删除元素后元素个数少于（m/2），并且它的兄弟节点的元素大于（m/2），也就是说兄弟节点的元素比最少值m/2还多，将先将父节点的元素移到该节点，然后将兄弟节点的元素再移动到父节点</b>。这样就满足要求了。</p>\n <p>我们看看操作过程就更加明白了。</p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e687a27f3b?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"787\" data-height=\"350\"></p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e692e39b19?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"799\" data-height=\"358\"></p>\n <ul>\n  <li>接着删除28，<b>删除叶子节点</b>，删除后不满足要求，所以，我们需要考虑向兄弟节点借元素，但是，兄弟节点也没有多的节点（2个），借不了，怎么办呢？如果遇到这种情况，<b>首先，还是将先将父节点的元素移到该节点，然后，将当前节点及它的兄弟节点中的key合并，形成一个新的节点</b>。</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6a49ed3c1?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"808\" data-height=\"427\"></p>\n <p>移动之后，跟兄弟节点合并。</p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6ade12853?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"797\" data-height=\"381\"></p>\n <p>删除就只有上面的几种情况，根据不同的情况进行删除即可。</p>\n <p>上面的这些介绍，相信对于B树已经有一定的了解了，接下来的一部分，我们接着讲解B+树，我相信加上B+树的对比，就更加清晰明了了。</p>\n <h3 data-id=\"heading-4\">2 B+树</h3>\n <h4 data-id=\"heading-5\">2.1 B+树概述</h4>\n <p>B+树其实和B树是非常相似的，我们首先看看<b>相同点</b>。</p>\n <ul>\n  <li>根节点至少一个元素</li>\n  <li>非根节点元素范围：m/2 &lt;= k &lt;= m-1</li>\n </ul>\n <p><b>不同点</b>。</p>\n <ul>\n  <li>B+树有两种类型的节点：内部结点（也称索引结点）和叶子结点。内部节点就是非叶子节点，内部节点不存储数据，只存储索引，数据都存储在叶子节点。</li>\n  <li>内部结点中的key都按照从小到大的顺序排列，对于内部结点中的一个key，左树中的所有key都小于它，右子树中的key都大于等于它。叶子结点中的记录也按照key的大小排列。</li>\n  <li>每个叶子结点都存有相邻叶子结点的指针，叶子结点本身依关键字的大小自小而大顺序链接。</li>\n  <li>父节点存有右孩子的第一个元素的索引。</li>\n </ul>\n <p>下面我们看一个B+树的例子，感受感受它吧！</p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6adc6109b?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"628\" data-height=\"358\"></p>\n <h4 data-id=\"heading-6\">2.2 插入操作</h4>\n <p>对于插入操作很简单，只需要记住一个技巧即可：<b>当节点元素数量大于m-1的时候，按中间元素分裂成左右两部分，中间元素分裂到父节点当做索引存储，但是，本身中间元素还是分裂右边这一部分的</b>。</p>\n <p>下面以一颗5阶B+树的插入过程为例，5阶B+树的节点最少2个元素，最多4个元素。</p>\n <ul>\n  <li>插入5，10，15，20</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6b1013c31?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"352\" data-height=\"154\"></p>\n <ul>\n  <li>插入25，此时元素数量大于4个了，分裂</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6b20d520d?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"542\" data-height=\"242\"></p>\n <ul>\n  <li>接着插入26，30，继续分裂</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6c0741f1a?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"602\" data-height=\"221\"></p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6cfa7ab47?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"687\" data-height=\"249\"></p>\n <p>有了这几个例子，相信插入操作没什么问题了，下面接着看看删除操作。</p>\n <h4 data-id=\"heading-7\">2.3 删除操作</h4>\n <p>对于删除操作是比B树简单一些的，因为<b>叶子节点有指针的存在，向兄弟节点借元素时，不需要通过父节点了，而是可以直接通过兄弟节移动即可（前提是兄弟节点的元素大于m/2），然后更新父节点的索引；如果兄弟节点的元素不大于m/2（兄弟节点也没有多余的元素），则将当前节点和兄弟节点合并，并且删除父节点中的key</b>，下面我们看看具体的实例。</p>\n <ul>\n  <li>初始状态</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6d3a3a507?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"963\" data-height=\"320\"></p>\n <ul>\n  <li>删除10，删除后，不满足要求，发现左边兄弟节点有多余的元素，所以去借元素，最后，修改父节点索引</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6d55ef87e?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"995\" data-height=\"332\"></p>\n <ul>\n  <li>删除元素5，发现不满足要求，并且发现左右兄弟节点都没有多余的元素，所以，可以选择和兄弟节点合并，最后修改父节点索引</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6d7a1d8de?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"944\" data-height=\"366\"></p>\n <ul>\n  <li>发现父节点索引也不满足条件，所以，需要做跟上面一步一样的操作</li>\n </ul>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470e6e1ede308?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"919\" data-height=\"362\"></p>\n <p>这样，B+树的删除操作也就完成了，是不是看完之后，觉得非常简单！</p>\n <h3 data-id=\"heading-8\">3 B树和B+树总结</h3>\n <p>B+树相对于B树有一些自己的优势，可以归结为下面几点。</p>\n <ul>\n  <li>单一节点存储的元素更多，使得查询的IO次数更少，所以也就使得它更适合做为数据库MySQL的底层数据结构了。</li>\n  <li>所有的查询都要查找到叶子节点，查询性能是稳定的，而B树，每个节点都可以查找到数据，所以不稳定。</li>\n  <li>所有的叶子节点形成了一个有序链表，更加便于查找。</li>\n </ul>\n <p><br></p>\n</div>', '', null, null, 'MySQL', null, null, '2', '1', '2019-10-16 15:20:50', null, '2019-10-16 15:20:50', '0000');
INSERT INTO `blog` VALUES ('7', '到底什么是二叉树 - 掘金', '<div data-id=\"5d82d3ef5188252eb077dc7d\" itemprop=\"articleBody\" class=\"article-content\" data-v-5e15fbe3>\n <p>&nbsp; &nbsp;二叉树又称为红黑树，是一种每个节点最多有两个子节点的数据结构，两个节点分别有左右之分，称为左子树和右子树，并且顺序不能颠倒。二叉树的遍历有前序，中序和后序遍历，以及广度优先遍历（也成为层序遍历）。这四种遍历方式都是相对于根节点而言的，假设有根节点A和左右子节点B、C，前序遍历顺序为ABC，中序遍历顺序为BAC，后序遍历顺序为BCA，广度优先遍历顺序则为ABC。可以看出这里的遍历次序是相对于根节点A而言的，A先于左右子节点被访问，则称为前序遍历，A在左右子节点访问的中间被访问则称为中序遍历，A后于左右子节点被访问则称为后序遍历，而广度优先遍历则是一层一层的从左往右进行遍历。对于如图A所示的二叉树，我们则有如下所示的遍历顺序：</p>\n <p> <img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470b763c3a8b7?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"505\" data-height=\"239\"></p>\n <p>图A</p>\n <p>前序遍历：ABDHEICFJG</p>\n <p>中序遍历：HDBIEAFJCG</p>\n <p>后序遍历：HDIEBJFGCA</p>\n <p>层序遍历：ABCDEFGHIJ</p>\n <p> 对于前序，中序和后序遍历，使用递归的方式实现较为简便，并且代码也容易阅读。我们可以定义recursive(BinaryNode&lt;AnyType&gt; node)，该方法以一定的顺序访问当前方法及其子树，若左子节点为空则终止对左子节点的访问，否则递归访问左子节点；若右子节点为空则终止对右子节点的访问，则递归访问右子节点；若都为空则访问当前结点即可。对于前序遍历，我们只需要在递归方法中以“当前结点--&gt;左子树--&gt;右子树”的顺序进行访问即可；对于中序遍历，遍历顺序则为“左子树--&gt;当前结点--&gt;右子树”；对于后序遍历则为“左子树--&gt;右子树--&gt;当前结点”。</p>\n <p>对于二叉树的每个节点，我们需要使用一个辅助的内部类来保存每个节点的信息，该内部类有三个域，分别保存左子节点，右子节点的引用以及当前数据，具体的代码如下：</p>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">​\n  private static class BinaryNode&lt;AnyType&gt; {\n    BinaryNode(AnyType theElement) {\n      this(theElement, null, null);\n    }\n\n    BinaryNode(AnyType theElement, BinaryNode&lt;AnyType&gt; lt, BinaryNode&lt;AnyType&gt; rt) {\n      element = theElement;\n      left = lt;\n      right = rt;\n    }\n\n    AnyType element;\n    BinaryNode&lt;AnyType&gt; left;\n    BinaryNode&lt;AnyType&gt; right;\n  }\n\n​<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p>通过辅助的内部类，我们可以很方便的对二叉树进行前序，中序和后序访问：</p>\n <ul>\n  <li>递归前序</li>\n </ul>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">​\n​\n  public void <span class=\"hljs-function\"><span class=\"hljs-title\">preOrder</span></span>() {\n    <span class=\"hljs-keyword\">if</span> (null == root) {\n      <span class=\"hljs-built_in\">return</span>;\n    }\n    recursive(root);\n  }\n\n  private void recursive(BinaryNode&lt;AnyType&gt; node) {\n    // 访问当前结点\n    visit(node);\n\n    // 访问左子节点\n    <span class=\"hljs-keyword\">if</span> (null != node.left) {\n      recursive(node.left);\n    }\n\n    // 访问右子节点\n    <span class=\"hljs-keyword\">if</span> (null != node.right) {\n      recursive(node.right);\n    }\n  }\n\n​\n\n​<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <ul>\n  <li>递归中序</li>\n </ul>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">​\n  public void <span class=\"hljs-function\"><span class=\"hljs-title\">inOrder</span></span>() {\n    <span class=\"hljs-keyword\">if</span> (null == root) {\n      <span class=\"hljs-built_in\">return</span>;\n    }\n    recursive(root);\n  }\n\n  private void recursive(BinaryNode&lt;AnyType&gt; node) {\n    // 访问左子节点\n    <span class=\"hljs-keyword\">if</span> (null != node.left) {\n      recursive(node.left);\n    }\n    \n    // 访问当前结点\n    visit(node);\n\n    // 访问右子节点\n    <span class=\"hljs-keyword\">if</span> (null != node.right) {\n      recursive(node.right);\n    }\n  }\n\n​<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <ul>\n  <li>递归后序</li>\n </ul>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">​\n  public void <span class=\"hljs-function\"><span class=\"hljs-title\">laterOrder</span></span>() {  \n    <span class=\"hljs-keyword\">if</span> (null == root) {\n      <span class=\"hljs-built_in\">return</span>;\n    }\n    recursive(root);\n  }\n  \n  private void recursive(BinaryNode&lt;AnyType&gt; node) {\n    // 访问左子节点\n    <span class=\"hljs-keyword\">if</span> (null != node.left) {\n      recursive(node.left);\n    }\n    \n    // 访问右子节点\n    <span class=\"hljs-keyword\">if</span> (null != node.right) {\n      recursive(node.right);\n    }\n    \n    // 访问当前结点\n    visit(node);\n  }\n\n​<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p> 从上述代码中可以看出，使用递归对二叉树进行前序，中序和后序访问的时候变化的只是visit(BinaryNode&lt;AnyType&gt;)方法的位置，其实现思路是没有变化的。</p>\n <p> 对于二叉树的非递归访问，我们则必须分别整理清楚二叉树的前序、中序、后序以及层序遍历的实际过程，首先我们看如图B所示的二叉树</p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470b763e28b85?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"558\" data-height=\"420\"></p>\n <p>图B</p>\n <p> 对于如图B所示的二叉树，根据我们前面讲述的前序遍历的规则，我们可以得出前序遍历的顺序为：</p>\n <p><b>15 10 6 14 11 13 22 20 24 23 28</b></p>\n <p> 首先，当前结点处于根节点15的位置，ABC三角对应于15、10、22，根据前序的规则，首先访问三角根节点，即15被打印出来；接着访问左子节点，当前结点切换到10，此时10、6、14也组成一个三角，首先访问三角根节点，10被打印出来；然后访问6，当前结点被切换到6，6和它的左右子节点组成一个三角，根据前序规则，首先打印6，其次访问左子节点，由于左子节点为空，转而访问右子节点，由于右子节点也为空，当前三角访问完成，此时返回到10、6、14的三角，该三角的左子节点访问完成，进而访问该三角的右子节点14，当前结点切换到14。14和其左右子节点组成一个三角，首先访问14，14被打印出来；依次类推，直至访问完成。</p>\n <p> 从上边的分析可以看出，对于二叉树的先序遍历，我们访问了一个节点之后继而访问其左子节点，再访问左子节点的左子节点，访问完之后还要依此顺序的倒序返回回来进而访问右子节点，这里很明显需要用到栈来帮我们实现“先访问后退出”的遍历顺序。从前面的分析我们也总结出前序遍历的顺序为，首先访问当前结点，然后当前结点入栈，当前结点切换到左子节点，继续访问当前结点并且入栈，当前结点切换到左子节点，直至当前结点为空，此时当前结点所在三角访问完毕，从栈中弹出一个元素，由于该元素已经访问过，因而将当前结点切换到该节点的右子节点并访问当前结点，继续将当前结点入栈，访问当前结点的左子节点，以此类推。这里面有三个关键点：</p>\n <ol>\n  <li>当前结点沿链的左子节点一直访问；</li>\n  <li>当当前结点为空时从栈中弹出元素将当前结点切换到该元素的右子节点；</li>\n  <li>重复1和2的步骤</li>\n </ol>\n <p>具体的实现代码如下：</p>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">  public void <span class=\"hljs-function\"><span class=\"hljs-title\">preOrder</span></span>() {\n    <span class=\"hljs-keyword\">if</span> (null == root) {\n      <span class=\"hljs-built_in\">return</span>;\n    }\n\n    Stack&lt;BinaryNode&lt;AnyType&gt;&gt; stack = new Stack&lt;&gt;();\n    BinaryNode&lt;AnyType&gt; pointer = root;\n\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n      <span class=\"hljs-keyword\">if</span> (null != pointer) {\n        visit(pointer);\n        stack.push(pointer);\n        pointer = pointer.left;\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (stack.isEmpty()) {\n          <span class=\"hljs-built_in\">break</span>;\n        }\n        pointer = stack.pop().right;\n      }\n    }\n  }<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p> 对于图B所示的二叉树，如果我们使用中序遍历的方式，遍历次序如下：</p>\n <p><b>6 10 11 13 14 15 20 22 23 24 28</b></p>\n <p> 中序遍历按照“左子树--&gt;当前结点--&gt;右子树”的顺序进行遍历，对于二叉树而言，由于二叉树排布有一个规则，即对于每个节点，其左子树的所有节点都小于当前结点的值，其右子树的值都大于当前结点的值。因而按照中序遍历的方式，最终得到的结果将是有序的，从上述遍历次序我们也可以看出这一点。</p>\n <p> 对于中序遍历，首先当前结点处于15处，而三角ABC分别对应15、10、22。根据中序的遍历规则（B--&gt;A--&gt;C），首先访问的是左子树，因而当前结点切换到10处，此时遍历三角变为10、6、14，因为对于当前结点而言，其左子节点不为空，因而必须先访问当前结点的左子节点（即6），当前结点切换到6。此时当前结点和其左右子节点（虽都为空节点）组成三角，虽然6的左右子节点都为空，但是还是得将当前结点切换到6的左子节点，因为对于一个空子树而言，其已经相当于被完全遍历了。通过判空我们已经知道6的左子树遍历完全，根据中序遍历规则，此时我们可以对6进行访问了，然后将当前结点切换到6的右子节点，由于当前结点为空，右子树被访问完全，因而当前三角访问完毕，当前结点切换到10处，并且10所在左子树被完全访问完毕，因而可以访问10所在节点，访问完毕后当前结点切换到其右子树，即14，由于14的左子树没有被访问，因而当前结点切换到14的左子节点11，根据前面对6所在节点的分析，因为11所在节点为空，因而当前结点切换到其左子树（空子树）之后即访问完全了，当前结点切换回11，并对11进行访问，接着访问其右子树。依此类推，从而对整棵树进行遍历。</p>\n <p> 从上边的访问我们可以看出，中序遍历从根节点开始，沿着向左的链依次向左进行判空，直至左子节点为空即可访问该节点，然后访问其右子节点，访问完右子节点之后沿着该链返回，继续访问上一左子节点。很明显，这里是先进后出的访问次序，因而在访问过程中需要借助栈来协助我们进行中序遍历。</p>\n <p> 中序遍历有三条规则：</p>\n <ol>\n  <li>从当前结点（初始为根节点）依次切换到其左子节点，沿途元素入栈；</li>\n  <li>当当前结点为空时表示当前子树访问完毕，从栈顶弹出元素，当前结点指向该元素并访问该元素；</li>\n  <li>当前结点切换到其右子节点，重复1和2的步骤；</li>\n </ol>\n <p>具体的实现代码如下：</p>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">  public void <span class=\"hljs-function\"><span class=\"hljs-title\">inOrder</span></span>() {\n    <span class=\"hljs-keyword\">if</span> (null == root) {\n      <span class=\"hljs-built_in\">return</span>;\n    }\n\n    Stack&lt;BinaryNode&lt;AnyType&gt;&gt; stack = new Stack&lt;&gt;();\n    BinaryNode&lt;AnyType&gt; pointer = root;\n\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n      <span class=\"hljs-keyword\">if</span> (null != pointer) {\n        stack.push(pointer);\n        pointer = pointer.left;\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (stack.isEmpty()) {\n          <span class=\"hljs-built_in\">break</span>;\n        }\n        pointer = stack.pop();\n        visit(pointer);\n        pointer = pointer.right;\n      }\n    }\n  }<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p> 比较前序和中序的非递归遍历方式，可以发现，前序和中序遍历，变化的只是访问节点的位置不同。对于后序递归，其访问方式相较于前序和中序较为复杂，我们还是以图B所示二叉树对其访问方式进行讲解，首先以后序方式访问该二叉树，其遍历次序为：</p>\n <p><b>6 13 11 14 10 20 23 28 24 22 15</b></p>\n <p> 对于后序递归，首先当前结点处于15所在节点，15、10、22三个节点组成一个ABC三角，根据后序遍历规则（B--&gt;C--&gt;A），我们将当前结点切换到10所在节点；此时10与其左右子节点组成三角，根据后序遍历规则，我们先得访问10的左子树，当前结点切换到6所在节点；此时6与其左右子树（空子树）组成三角，因而当前结点要切换到6的左子节点；此时当前结点为空，因为空子树即为被完全访问的子树，因而6的左子树被访问完全，当前结点被切换到6的右子树，此时当前结点也为空，因而6的右子树被访问完全，当前结点切换回6所在节点，进而对6进行访问；此时10的左子树被访问完全，当前切点切换到10所在节点的右子节点14，此时14与其左右子树组成访问三角，当前结点切换到11；11与其左右子树组成三角，当前结点切换到11的左子节点，由于当前结点为空，因而当前结点切换回11，然后切换到其右子节点13，与6的访问类似，13被访问完全，当前结点切换回11并且对11进行访问；接着当前结点切换回14，由于其右子节点为空，因而其右子节点也顺序访问完全，此时当前结点切换回14并对其进行访问，14访问完成之后10所在结点的左右子树都被访问完全，因而10将被访问；以此类推，将整棵树访问完全。</p>\n <p> 从上述的分析可以看出，在对二叉树进行后序遍历的时候每个节点初次访问都需要通过当前结点访问到其左子节点，待左子节点访问完毕后又返回到当前结点，然后访问其右子节点，待右子节点访问完毕之后也返回到当前结点，此时才可以对当前结点进行访问。因而后序非递归遍历二叉树需要有一个域来保存结点是从左子树还是右子树返回的，如果是从右子树返回的才可以对当前结点进行访问。额外的域用枚举来保存，代码如下：</p>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">  private class StackElement&lt;AnyType&gt; {\n    Tag tag;\n    BinaryNode&lt;AnyType&gt; node;\n\n    StackElement(BinaryNode&lt;AnyType&gt; n, Tag t) {\n      node = n;\n      tag = t;\n    }\n  }\n  enum Tag{\n    LEFT, RIGHT\n  }<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p> 对于后序遍历，从根节点开始，当前结点依次切换到其左子节点，待当前结点为空时从左子节点返回，然后访问其右子节点，这里也用到了先进后出的访问顺序，因而需要借助于栈来协助我们进行后序遍历。对于后序遍历，需要注意的点如下：</p>\n <ol>\n  <li>若当前结点（初始为根节点）不为空则将其入栈，将当前结点切换到其左子节点；</li>\n  <li>若当前结点为空则获取栈顶元素（此时是从左子树返回），将当前结点切换到该元素的右子树；</li>\n  <li>若右子树为空则弹出栈顶元素（此时是从右子树返回），访问该元素；若右子树不为空则重复1和2的步骤；</li>\n </ol>\n <p>具体的实现代码如下：</p>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">  public void <span class=\"hljs-function\"><span class=\"hljs-title\">laterOrder</span></span>() {\n    <span class=\"hljs-keyword\">if</span> (null == root) {\n      <span class=\"hljs-built_in\">return</span>;\n    }\n\n    Stack&lt;StackElement&lt;AnyType&gt;&gt; stack = new Stack&lt;&gt;();\n    StackElement&lt;AnyType&gt; pointer = new StackElement&lt;&gt;(root, null);\n\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n      <span class=\"hljs-keyword\">if</span> (null != pointer.node) { // 依次将遍历至左子节点为空，并将元素入栈\n        stack.push(pointer);\n        pointer = new StackElement&lt;&gt;(pointer.node.left, Tag.LEFT);\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (stack.isEmpty()) {\n          <span class=\"hljs-built_in\">return</span>;\n        }\n        pointer = stack.peek(); // 左子树元素访问完毕，查看栈顶元素\n        <span class=\"hljs-keyword\">if</span> (pointer.tag == Tag.RIGHT) { // 若为右路返回则访问当前元素，并将其弹出\n          visit(pointer.node);\n          stack.pop();\n          pointer.node = null;\n        } <span class=\"hljs-keyword\">else</span> {  // 若为左路返回则继续访问右路子节点，并将tag标记为RIGHT\n          pointer.tag = Tag.RIGHT;\n          pointer = new StackElement&lt;&gt;(pointer.node.right, Tag.LEFT);\n        }\n      }\n    }\n  }<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p> 至此，我们已经将前序、中序和后序的递归和非递归算法都讨论完毕了，而二叉树的层序遍历我们使用不多，这里简要讨论一下思路，并附上代码。</p>\n <p> 二叉树的层序遍历即从上往下从左往右依次遍历。首先我们从根节点开始，将根节点入队列，然后弹出队列第一个元素，访问该元素，若其左右子元素不为空，我们就将其左右子元素入队列，按照此顺序依次访问直至队列为空，从而实现对二叉树的层序遍历。具体的代码如下：</p>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">  public void <span class=\"hljs-function\"><span class=\"hljs-title\">breadthOrder</span></span>() {\n    Queue&lt;BinaryNode&lt;AnyType&gt;&gt; queue = new LinkedList&lt;&gt;();\n    queue.add(root);\n    BinaryNode&lt;AnyType&gt; pointer = null;\n\n    <span class=\"hljs-keyword\">while</span> (!queue.isEmpty()) {\n      pointer = queue.remove();\n      visit(pointer);\n      <span class=\"hljs-keyword\">if</span> (null != pointer.left) {\n        queue.add(pointer.left);\n      }\n      <span class=\"hljs-keyword\">if</span> (null != pointer.right) {\n        queue.add(pointer.right);\n      }\n    }\n  }<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p></p>\n <p><br></p>\n</div>', '<div data-id=\"5d82d3ef5188252eb077dc7d\" itemprop=\"articleBody\" class=\"article-content\" data-v-5e15fbe3>\n <p>&nbsp; &nbsp;二叉树又称为红黑树，是一种每个节点最多有两个子节点的数据结构，两个节点分别有左右之分，称为左子树和右子树，并且顺序不能颠倒。二叉树的遍历有前序，中序和后序遍历，以及广度优先遍历（也成为层序遍历）。这四种遍历方式都是相对于根节点而言的，假设有根节点A和左右子节点B、C，前序遍历顺序为ABC，中序遍历顺序为BAC，后序遍历顺序为BCA，广度优先遍历顺序则为ABC。可以看出这里的遍历次序是相对于根节点A而言的，A先于左右子节点被访问，则称为前序遍历，A在左右子节点访问的中间被访问则称为中序遍历，A后于左右子节点被访问则称为后序遍历，而广度优先遍历则是一层一层的从左往右进行遍历。对于如图A所示的二叉树，我们则有如下所示的遍历顺序：</p>\n <p> <img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470b763c3a8b7?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"505\" data-height=\"239\"></p>\n <p>图A</p>\n <p>前序遍历：ABDHEICFJG</p>\n <p>中序遍历：HDBIEAFJCG</p>\n <p>后序遍历：HDIEBJFGCA</p>\n <p>层序遍历：ABCDEFGHIJ</p>\n <p> 对于前序，中序和后序遍历，使用递归的方式实现较为简便，并且代码也容易阅读。我们可以定义recursive(BinaryNode&lt;AnyType&gt; node)，该方法以一定的顺序访问当前方法及其子树，若左子节点为空则终止对左子节点的访问，否则递归访问左子节点；若右子节点为空则终止对右子节点的访问，则递归访问右子节点；若都为空则访问当前结点即可。对于前序遍历，我们只需要在递归方法中以“当前结点--&gt;左子树--&gt;右子树”的顺序进行访问即可；对于中序遍历，遍历顺序则为“左子树--&gt;当前结点--&gt;右子树”；对于后序遍历则为“左子树--&gt;右子树--&gt;当前结点”。</p>\n <p>对于二叉树的每个节点，我们需要使用一个辅助的内部类来保存每个节点的信息，该内部类有三个域，分别保存左子节点，右子节点的引用以及当前数据，具体的代码如下：</p>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">​\n  private static class BinaryNode&lt;AnyType&gt; {\n    BinaryNode(AnyType theElement) {\n      this(theElement, null, null);\n    }\n\n    BinaryNode(AnyType theElement, BinaryNode&lt;AnyType&gt; lt, BinaryNode&lt;AnyType&gt; rt) {\n      element = theElement;\n      left = lt;\n      right = rt;\n    }\n\n    AnyType element;\n    BinaryNode&lt;AnyType&gt; left;\n    BinaryNode&lt;AnyType&gt; right;\n  }\n\n​<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p>通过辅助的内部类，我们可以很方便的对二叉树进行前序，中序和后序访问：</p>\n <ul>\n  <li>递归前序</li>\n </ul>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">​\n​\n  public void <span class=\"hljs-function\"><span class=\"hljs-title\">preOrder</span></span>() {\n    <span class=\"hljs-keyword\">if</span> (null == root) {\n      <span class=\"hljs-built_in\">return</span>;\n    }\n    recursive(root);\n  }\n\n  private void recursive(BinaryNode&lt;AnyType&gt; node) {\n    // 访问当前结点\n    visit(node);\n\n    // 访问左子节点\n    <span class=\"hljs-keyword\">if</span> (null != node.left) {\n      recursive(node.left);\n    }\n\n    // 访问右子节点\n    <span class=\"hljs-keyword\">if</span> (null != node.right) {\n      recursive(node.right);\n    }\n  }\n\n​\n\n​<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <ul>\n  <li>递归中序</li>\n </ul>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">​\n  public void <span class=\"hljs-function\"><span class=\"hljs-title\">inOrder</span></span>() {\n    <span class=\"hljs-keyword\">if</span> (null == root) {\n      <span class=\"hljs-built_in\">return</span>;\n    }\n    recursive(root);\n  }\n\n  private void recursive(BinaryNode&lt;AnyType&gt; node) {\n    // 访问左子节点\n    <span class=\"hljs-keyword\">if</span> (null != node.left) {\n      recursive(node.left);\n    }\n    \n    // 访问当前结点\n    visit(node);\n\n    // 访问右子节点\n    <span class=\"hljs-keyword\">if</span> (null != node.right) {\n      recursive(node.right);\n    }\n  }\n\n​<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <ul>\n  <li>递归后序</li>\n </ul>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">​\n  public void <span class=\"hljs-function\"><span class=\"hljs-title\">laterOrder</span></span>() {  \n    <span class=\"hljs-keyword\">if</span> (null == root) {\n      <span class=\"hljs-built_in\">return</span>;\n    }\n    recursive(root);\n  }\n  \n  private void recursive(BinaryNode&lt;AnyType&gt; node) {\n    // 访问左子节点\n    <span class=\"hljs-keyword\">if</span> (null != node.left) {\n      recursive(node.left);\n    }\n    \n    // 访问右子节点\n    <span class=\"hljs-keyword\">if</span> (null != node.right) {\n      recursive(node.right);\n    }\n    \n    // 访问当前结点\n    visit(node);\n  }\n\n​<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p> 从上述代码中可以看出，使用递归对二叉树进行前序，中序和后序访问的时候变化的只是visit(BinaryNode&lt;AnyType&gt;)方法的位置，其实现思路是没有变化的。</p>\n <p> 对于二叉树的非递归访问，我们则必须分别整理清楚二叉树的前序、中序、后序以及层序遍历的实际过程，首先我们看如图B所示的二叉树</p>\n <p><img alt=\"\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2019/9/19/16d470b763e28b85?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"558\" data-height=\"420\"></p>\n <p>图B</p>\n <p> 对于如图B所示的二叉树，根据我们前面讲述的前序遍历的规则，我们可以得出前序遍历的顺序为：</p>\n <p><b>15 10 6 14 11 13 22 20 24 23 28</b></p>\n <p> 首先，当前结点处于根节点15的位置，ABC三角对应于15、10、22，根据前序的规则，首先访问三角根节点，即15被打印出来；接着访问左子节点，当前结点切换到10，此时10、6、14也组成一个三角，首先访问三角根节点，10被打印出来；然后访问6，当前结点被切换到6，6和它的左右子节点组成一个三角，根据前序规则，首先打印6，其次访问左子节点，由于左子节点为空，转而访问右子节点，由于右子节点也为空，当前三角访问完成，此时返回到10、6、14的三角，该三角的左子节点访问完成，进而访问该三角的右子节点14，当前结点切换到14。14和其左右子节点组成一个三角，首先访问14，14被打印出来；依次类推，直至访问完成。</p>\n <p> 从上边的分析可以看出，对于二叉树的先序遍历，我们访问了一个节点之后继而访问其左子节点，再访问左子节点的左子节点，访问完之后还要依此顺序的倒序返回回来进而访问右子节点，这里很明显需要用到栈来帮我们实现“先访问后退出”的遍历顺序。从前面的分析我们也总结出前序遍历的顺序为，首先访问当前结点，然后当前结点入栈，当前结点切换到左子节点，继续访问当前结点并且入栈，当前结点切换到左子节点，直至当前结点为空，此时当前结点所在三角访问完毕，从栈中弹出一个元素，由于该元素已经访问过，因而将当前结点切换到该节点的右子节点并访问当前结点，继续将当前结点入栈，访问当前结点的左子节点，以此类推。这里面有三个关键点：</p>\n <ol>\n  <li>当前结点沿链的左子节点一直访问；</li>\n  <li>当当前结点为空时从栈中弹出元素将当前结点切换到该元素的右子节点；</li>\n  <li>重复1和2的步骤</li>\n </ol>\n <p>具体的实现代码如下：</p>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">  public void <span class=\"hljs-function\"><span class=\"hljs-title\">preOrder</span></span>() {\n    <span class=\"hljs-keyword\">if</span> (null == root) {\n      <span class=\"hljs-built_in\">return</span>;\n    }\n\n    Stack&lt;BinaryNode&lt;AnyType&gt;&gt; stack = new Stack&lt;&gt;();\n    BinaryNode&lt;AnyType&gt; pointer = root;\n\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n      <span class=\"hljs-keyword\">if</span> (null != pointer) {\n        visit(pointer);\n        stack.push(pointer);\n        pointer = pointer.left;\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (stack.isEmpty()) {\n          <span class=\"hljs-built_in\">break</span>;\n        }\n        pointer = stack.pop().right;\n      }\n    }\n  }<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p> 对于图B所示的二叉树，如果我们使用中序遍历的方式，遍历次序如下：</p>\n <p><b>6 10 11 13 14 15 20 22 23 24 28</b></p>\n <p> 中序遍历按照“左子树--&gt;当前结点--&gt;右子树”的顺序进行遍历，对于二叉树而言，由于二叉树排布有一个规则，即对于每个节点，其左子树的所有节点都小于当前结点的值，其右子树的值都大于当前结点的值。因而按照中序遍历的方式，最终得到的结果将是有序的，从上述遍历次序我们也可以看出这一点。</p>\n <p> 对于中序遍历，首先当前结点处于15处，而三角ABC分别对应15、10、22。根据中序的遍历规则（B--&gt;A--&gt;C），首先访问的是左子树，因而当前结点切换到10处，此时遍历三角变为10、6、14，因为对于当前结点而言，其左子节点不为空，因而必须先访问当前结点的左子节点（即6），当前结点切换到6。此时当前结点和其左右子节点（虽都为空节点）组成三角，虽然6的左右子节点都为空，但是还是得将当前结点切换到6的左子节点，因为对于一个空子树而言，其已经相当于被完全遍历了。通过判空我们已经知道6的左子树遍历完全，根据中序遍历规则，此时我们可以对6进行访问了，然后将当前结点切换到6的右子节点，由于当前结点为空，右子树被访问完全，因而当前三角访问完毕，当前结点切换到10处，并且10所在左子树被完全访问完毕，因而可以访问10所在节点，访问完毕后当前结点切换到其右子树，即14，由于14的左子树没有被访问，因而当前结点切换到14的左子节点11，根据前面对6所在节点的分析，因为11所在节点为空，因而当前结点切换到其左子树（空子树）之后即访问完全了，当前结点切换回11，并对11进行访问，接着访问其右子树。依此类推，从而对整棵树进行遍历。</p>\n <p> 从上边的访问我们可以看出，中序遍历从根节点开始，沿着向左的链依次向左进行判空，直至左子节点为空即可访问该节点，然后访问其右子节点，访问完右子节点之后沿着该链返回，继续访问上一左子节点。很明显，这里是先进后出的访问次序，因而在访问过程中需要借助栈来协助我们进行中序遍历。</p>\n <p> 中序遍历有三条规则：</p>\n <ol>\n  <li>从当前结点（初始为根节点）依次切换到其左子节点，沿途元素入栈；</li>\n  <li>当当前结点为空时表示当前子树访问完毕，从栈顶弹出元素，当前结点指向该元素并访问该元素；</li>\n  <li>当前结点切换到其右子节点，重复1和2的步骤；</li>\n </ol>\n <p>具体的实现代码如下：</p>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">  public void <span class=\"hljs-function\"><span class=\"hljs-title\">inOrder</span></span>() {\n    <span class=\"hljs-keyword\">if</span> (null == root) {\n      <span class=\"hljs-built_in\">return</span>;\n    }\n\n    Stack&lt;BinaryNode&lt;AnyType&gt;&gt; stack = new Stack&lt;&gt;();\n    BinaryNode&lt;AnyType&gt; pointer = root;\n\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n      <span class=\"hljs-keyword\">if</span> (null != pointer) {\n        stack.push(pointer);\n        pointer = pointer.left;\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (stack.isEmpty()) {\n          <span class=\"hljs-built_in\">break</span>;\n        }\n        pointer = stack.pop();\n        visit(pointer);\n        pointer = pointer.right;\n      }\n    }\n  }<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p> 比较前序和中序的非递归遍历方式，可以发现，前序和中序遍历，变化的只是访问节点的位置不同。对于后序递归，其访问方式相较于前序和中序较为复杂，我们还是以图B所示二叉树对其访问方式进行讲解，首先以后序方式访问该二叉树，其遍历次序为：</p>\n <p><b>6 13 11 14 10 20 23 28 24 22 15</b></p>\n <p> 对于后序递归，首先当前结点处于15所在节点，15、10、22三个节点组成一个ABC三角，根据后序遍历规则（B--&gt;C--&gt;A），我们将当前结点切换到10所在节点；此时10与其左右子节点组成三角，根据后序遍历规则，我们先得访问10的左子树，当前结点切换到6所在节点；此时6与其左右子树（空子树）组成三角，因而当前结点要切换到6的左子节点；此时当前结点为空，因为空子树即为被完全访问的子树，因而6的左子树被访问完全，当前结点被切换到6的右子树，此时当前结点也为空，因而6的右子树被访问完全，当前结点切换回6所在节点，进而对6进行访问；此时10的左子树被访问完全，当前切点切换到10所在节点的右子节点14，此时14与其左右子树组成访问三角，当前结点切换到11；11与其左右子树组成三角，当前结点切换到11的左子节点，由于当前结点为空，因而当前结点切换回11，然后切换到其右子节点13，与6的访问类似，13被访问完全，当前结点切换回11并且对11进行访问；接着当前结点切换回14，由于其右子节点为空，因而其右子节点也顺序访问完全，此时当前结点切换回14并对其进行访问，14访问完成之后10所在结点的左右子树都被访问完全，因而10将被访问；以此类推，将整棵树访问完全。</p>\n <p> 从上述的分析可以看出，在对二叉树进行后序遍历的时候每个节点初次访问都需要通过当前结点访问到其左子节点，待左子节点访问完毕后又返回到当前结点，然后访问其右子节点，待右子节点访问完毕之后也返回到当前结点，此时才可以对当前结点进行访问。因而后序非递归遍历二叉树需要有一个域来保存结点是从左子树还是右子树返回的，如果是从右子树返回的才可以对当前结点进行访问。额外的域用枚举来保存，代码如下：</p>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">  private class StackElement&lt;AnyType&gt; {\n    Tag tag;\n    BinaryNode&lt;AnyType&gt; node;\n\n    StackElement(BinaryNode&lt;AnyType&gt; n, Tag t) {\n      node = n;\n      tag = t;\n    }\n  }\n  enum Tag{\n    LEFT, RIGHT\n  }<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p> 对于后序遍历，从根节点开始，当前结点依次切换到其左子节点，待当前结点为空时从左子节点返回，然后访问其右子节点，这里也用到了先进后出的访问顺序，因而需要借助于栈来协助我们进行后序遍历。对于后序遍历，需要注意的点如下：</p>\n <ol>\n  <li>若当前结点（初始为根节点）不为空则将其入栈，将当前结点切换到其左子节点；</li>\n  <li>若当前结点为空则获取栈顶元素（此时是从左子树返回），将当前结点切换到该元素的右子树；</li>\n  <li>若右子树为空则弹出栈顶元素（此时是从右子树返回），访问该元素；若右子树不为空则重复1和2的步骤；</li>\n </ol>\n <p>具体的实现代码如下：</p>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">  public void <span class=\"hljs-function\"><span class=\"hljs-title\">laterOrder</span></span>() {\n    <span class=\"hljs-keyword\">if</span> (null == root) {\n      <span class=\"hljs-built_in\">return</span>;\n    }\n\n    Stack&lt;StackElement&lt;AnyType&gt;&gt; stack = new Stack&lt;&gt;();\n    StackElement&lt;AnyType&gt; pointer = new StackElement&lt;&gt;(root, null);\n\n    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {\n      <span class=\"hljs-keyword\">if</span> (null != pointer.node) { // 依次将遍历至左子节点为空，并将元素入栈\n        stack.push(pointer);\n        pointer = new StackElement&lt;&gt;(pointer.node.left, Tag.LEFT);\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">if</span> (stack.isEmpty()) {\n          <span class=\"hljs-built_in\">return</span>;\n        }\n        pointer = stack.peek(); // 左子树元素访问完毕，查看栈顶元素\n        <span class=\"hljs-keyword\">if</span> (pointer.tag == Tag.RIGHT) { // 若为右路返回则访问当前元素，并将其弹出\n          visit(pointer.node);\n          stack.pop();\n          pointer.node = null;\n        } <span class=\"hljs-keyword\">else</span> {  // 若为左路返回则继续访问右路子节点，并将tag标记为RIGHT\n          pointer.tag = Tag.RIGHT;\n          pointer = new StackElement&lt;&gt;(pointer.node.right, Tag.LEFT);\n        }\n      }\n    }\n  }<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p> 至此，我们已经将前序、中序和后序的递归和非递归算法都讨论完毕了，而二叉树的层序遍历我们使用不多，这里简要讨论一下思路，并附上代码。</p>\n <p> 二叉树的层序遍历即从上往下从左往右依次遍历。首先我们从根节点开始，将根节点入队列，然后弹出队列第一个元素，访问该元素，若其左右子元素不为空，我们就将其左右子元素入队列，按照此顺序依次访问直至队列为空，从而实现对二叉树的层序遍历。具体的代码如下：</p>\n <pre code-lang=\"\" class=\"hljs bash\"><code class=\"hljs bash copyable\" lang=\"bash\">  public void <span class=\"hljs-function\"><span class=\"hljs-title\">breadthOrder</span></span>() {\n    Queue&lt;BinaryNode&lt;AnyType&gt;&gt; queue = new LinkedList&lt;&gt;();\n    queue.add(root);\n    BinaryNode&lt;AnyType&gt; pointer = null;\n\n    <span class=\"hljs-keyword\">while</span> (!queue.isEmpty()) {\n      pointer = queue.remove();\n      visit(pointer);\n      <span class=\"hljs-keyword\">if</span> (null != pointer.left) {\n        queue.add(pointer.left);\n      }\n      <span class=\"hljs-keyword\">if</span> (null != pointer.right) {\n        queue.add(pointer.right);\n      }\n    }\n  }<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p></p>\n <p><br></p>\n</div>', '', null, null, 'Java', null, null, '2', '1', '2019-10-16 15:20:53', null, '2019-10-16 15:20:53', '0000');
INSERT INTO `blog` VALUES ('8', '一文理解Netty模型架构 - 掘金', '<div data-id=\"5bea1dae51882548f5463254\" itemprop=\"articleBody\" class=\"article-content\" data-v-5e15fbe3>\n <p>[作者：陈彩华]本文基于Netty4.1展开介绍相关理论模型，使用场景，基本组件、整体架构，<strong>知其然且知其所以然</strong>，希望给读者提供学习实践参考。</p> \n <h1 class=\"heading\" data-id=\"heading-0\">1 Netty简介</h1> \n <p></p>\n <figure>\n  <img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbcfbbe9f66?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"700\" data-height=\"400\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <p>Netty是 一个异步事件驱动的网络应用程序框架，用于快速开发可维护的高性能协议服务器和客户端。</p> \n <h2 class=\"heading\" data-id=\"heading-1\">JDK原生NIO程序的问题</h2> \n <p>JDK原生也有一套网络应用程序API，但是存在一系列问题，主要如下：</p> \n <ul> \n  <li>NIO的类库和API繁杂，使用麻烦，你需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等</li> \n  <li>需要具备其它的额外技能做铺垫，例如熟悉Java多线程编程，因为NIO编程涉及到Reactor模式，你必须对多线程和网路编程非常熟悉，才能编写出高质量的NIO程序</li> \n  <li>可靠性能力补齐，开发工作量和难度都非常大。例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常码流的处理等等，NIO编程的特点是功能开发相对容易，但是可靠性能力补齐工作量和难度都非常大</li> \n  <li>JDK NIO的BUG，例如臭名昭著的epoll bug，它会导致Selector空轮询，最终导致CPU 100%。官方声称在JDK1.6版本的update18修复了该问题，但是直到JDK1.7版本该问题仍旧存在，只不过该bug发生概率降低了一些而已，它并没有被根本解决</li> \n </ul> \n <h2 class=\"heading\" data-id=\"heading-2\">Netty的特点</h2> \n <p>Netty的对JDK自带的NIO的API进行封装，解决上述问题，主要特点有：</p> \n <ul> \n  <li>设计优雅 适用于各种传输类型的统一API - 阻塞和非阻塞Socket 基于灵活且可扩展的事件模型，可以清晰地分离关注点 高度可定制的线程模型 - 单线程，一个或多个线程池 真正的无连接数据报套接字支持（自3.1起）</li> \n  <li>使用方便 详细记录的Javadoc，用户指南和示例 没有其他依赖项，JDK 5（Netty 3.x）或6（Netty 4.x）就足够了</li> \n  <li>高性能 吞吐量更高，延迟更低 减少资源消耗 最小化不必要的内存复制</li> \n  <li>安全 完整的SSL / TLS和StartTLS支持</li> \n  <li>社区活跃，不断更新 社区活跃，版本迭代周期短，发现的BUG可以被及时修复，同时，更多的新功能会被加入</li> \n </ul> \n <h2 class=\"heading\" data-id=\"heading-3\">Netty常见使用常见</h2> \n <p>Netty常见的使用场景如下：</p> \n <ul> \n  <li>互联网行业 在分布式系统中，各个节点之间需要远程服务调用，高性能的RPC框架必不可少，Netty作为异步高新能的通信框架,往往作为基础通信组件被这些RPC框架使用。 典型的应用有：阿里分布式服务框架Dubbo的RPC框架使用Dubbo协议进行节点间通信，Dubbo协议默认使用Netty作为基础通信组件，用于实现各进程节点之间的内部通信。</li> \n  <li>游戏行业 无论是手游服务端还是大型的网络游戏，Java语言得到了越来越广泛的应用。Netty作为高性能的基础通信组件，它本身提供了TCP/UDP和HTTP协议栈。 非常方便定制和开发私有协议栈，账号登录服务器，地图服务器之间可以方便的通过Netty进行高性能的通信</li> \n  <li>大数据领域 经典的Hadoop的高性能通信和序列化组件Avro的RPC框架，默认采用Netty进行跨界点通信，它的Netty Service基于Netty框架二次封装实现</li> \n </ul> \n <p>有兴趣的读者可以了解一下目前有哪些开源项目使用了 Netty：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fnetty.io%2Fwiki%2Frelated-projects.html\" rel=\"nofollow noopener noreferrer\">Related projects</a></p> \n <h1 class=\"heading\" data-id=\"heading-4\">2 Netty高性能设计</h1> \n <p>Netty作为异步事件驱动的网络，高性能之处主要来自于其I/O模型和线程处理模型，前者决定如何收发数据，后者决定如何处理数据</p> \n <h2 class=\"heading\" data-id=\"heading-5\">I/O模型</h2> \n <p>用什么样的通道将数据发送给对方，BIO、NIO或者AIO，I/O模型在很大程度上决定了框架的性能</p> \n <h3 class=\"heading\" data-id=\"heading-6\">阻塞I/O</h3> \n <p>传统阻塞型I/O(BIO)可以用下图表示： </p>\n <figure>\n  <img alt=\"Blocking I/O\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbcfb70c111?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"690\" data-height=\"493\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <p><strong>特点</strong></p> \n <ul> \n  <li>每个请求都需要独立的线程完成数据read，业务处理，数据write的完整操作</li> \n </ul> \n <p><strong>问题</strong></p> \n <ul> \n  <li>当并发数较大时，需要创建大量线程来处理连接，系统资源占用较大</li> \n  <li>连接建立后，如果当前线程暂时没有数据可读，则线程就阻塞在read操作上，造成线程资源浪费</li> \n </ul> \n <h3 class=\"heading\" data-id=\"heading-7\">I/O复用模型</h3> \n <p></p>\n <figure>\n  <img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbcfba53c0a?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1212\" data-height=\"649\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <p>在I/O复用模型中，会用到select，这个函数也会使进程阻塞，但是和阻塞I/O所不同的的，这两个函数可以同时阻塞多个I/O操作，而且可以同时对多个读操作，多个写操作的I/O函数进行检测，直到有数据可读或可写时，才真正调用I/O操作函数</p> \n <p>Netty的非阻塞I/O的实现关键是基于I/O复用模型，这里用Selector对象表示：</p> \n <p></p>\n <figure>\n  <img alt=\"Nonblocking I/O\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbcfba32169?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"652\" data-height=\"645\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <p>Netty的IO线程NioEventLoop由于聚合了多路复用器Selector，可以同时并发处理成百上千个客户端连接。当线程从某客户端Socket通道进行读写数据时，若没有数据可用时，该线程可以进行其他任务。线程通常将非阻塞 IO 的空闲时间用于在其他通道上执行 IO 操作，所以单独的线程可以管理多个输入和输出通道。</p> \n <p>由于读写操作都是非阻塞的，这就可以充分提升IO线程的运行效率，避免由于频繁I/O阻塞导致的线程挂起，一个I/O线程可以并发处理N个客户端连接和读写操作，这从根本上解决了传统同步阻塞I/O一连接一线程模型，架构的性能、弹性伸缩能力和可靠性都得到了极大的提升。</p> \n <h3 class=\"heading\" data-id=\"heading-8\">基于buffer</h3> \n <p>传统的I/O是面向字节流或字符流的，以流式的方式顺序地从一个Stream 中读取一个或多个字节, 因此也就不能随意改变读取指针的位置。</p> \n <p>在NIO中, 抛弃了传统的 I/O流, 而是引入了Channel和Buffer的概念. 在NIO中, 只能从Channel中读取数据到Buffer中或将数据 Buffer 中写入到 Channel。</p> \n <p>基于buffer操作不像传统IO的顺序操作, NIO 中可以随意地读取任意位置的数据</p> \n <h2 class=\"heading\" data-id=\"heading-9\">线程模型</h2> \n <p>数据报如何读取？读取之后的编解码在哪个线程进行，编解码后的消息如何派发，线程模型的不同，对性能的影响也非常大。</p> \n <h3 class=\"heading\" data-id=\"heading-10\">事件驱动模型</h3> \n <p>通常，我们设计一个事件处理模型的程序有两种思路</p> \n <ul> \n  <li>轮询方式 线程不断轮询访问相关事件发生源有没有发生事件，有发生事件就调用事件处理逻辑。</li> \n  <li>事件驱动方式 发生事件，主线程把事件放入事件队列，在另外线程不断循环消费事件列表中的事件，调用事件对应的处理逻辑处理事件。事件驱动方式也被称为消息通知方式，其实是设计模式中<strong>观察者模式</strong>的思路。</li> \n </ul> \n <p>以GUI的逻辑处理为例，说明两种逻辑的不同：</p> \n <ul> \n  <li>轮询方式 线程不断轮询是否发生按钮点击事件，如果发生，调用处理逻辑</li> \n  <li>事件驱动方式 发生点击事件把事件放入事件队列，在另外线程消费的事件列表中的事件，根据事件类型调用相关事件处理逻辑</li> \n </ul> \n <p>这里借用O\'Reilly 大神关于<a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.oreilly.com%2Fprogramming%2Ffree%2Fsoftware-architecture-patterns.csp\" rel=\"nofollow noopener noreferrer\">事件驱动模型解释图</a> </p>\n <figure>\n  <img alt=\"事件驱动模型\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbcfbdf3439?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"750\" data-height=\"578\">\n  <figcaption></figcaption>\n </figure> 主要包括4个基本组件：\n <p></p> \n <ul> \n  <li>事件队列（event queue）：接收事件的入口，存储待处理事件</li> \n  <li>分发器（event mediator）：将不同的事件分发到不同的业务逻辑单元</li> \n  <li>事件通道（event channel）：分发器与处理器之间的联系渠道</li> \n  <li>事件处理器（event processor）：实现业务逻辑，处理完成后会发出事件，触发下一步操作</li> \n </ul> \n <p>可以看出，相对传统轮询模式，事件驱动有如下优点：</p> \n <ul> \n  <li>可扩展性好，分布式的异步架构，事件处理器之间高度解耦，可以方便扩展事件处理逻辑</li> \n  <li>高性能，基于队列暂存事件，能方便并行异步处理事件</li> \n </ul> \n <h3 class=\"heading\" data-id=\"heading-11\">Reactor线程模型</h3> \n <p>Reactor是反应堆的意思，Reactor模型，是指通过一个或多个输入同时传递给服务处理器的服务请求的<strong>事件驱动处理模式</strong>。 服务端程序处理传入多路请求，并将它们同步分派给请求对应的处理线程，Reactor模式也叫Dispatcher模式，即I/O多了复用统一监听事件，收到事件后分发(Dispatch给某进程)，是编写高性能网络服务器的必备技术之一。</p> \n <p>Reactor模型中有2个关键组成：</p> \n <ul> \n  <li> <p>Reactor Reactor在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对IO事件做出反应。 它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人</p> </li> \n  <li> <p>Handlers 处理程序执行I/O事件要完成的实际事件，类似于客户想要与之交谈的公司中的实际官员。Reactor通过调度适当的处理程序来响应I/O事件，处理程序执行非阻塞操作</p> </li> \n </ul> \n <p></p>\n <figure>\n  <img alt=\"Reactor模型\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbdc654d6dc?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1084\" data-height=\"691\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <p>取决于Reactor的数量和Hanndler线程数量的不同，Reactor模型有3个变种</p> \n <ul> \n  <li>单Reactor单线程</li> \n  <li>单Reactor多线程</li> \n  <li>主从Reactor多线程</li> \n </ul> \n <p>可以这样理解，Reactor就是一个执行while (true) { selector.select(); ...}循环的线程，会源源不断的产生新的事件，称作反应堆很贴切。</p> \n <p>篇幅关系，这里不再具体展开Reactor特性、优缺点比较，有兴趣的读者可以参考我之前另外一篇文章：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F2965fca6bb8f\" rel=\"nofollow noopener noreferrer\">《理解高性能网络模型》</a></p> \n <h3 class=\"heading\" data-id=\"heading-12\">Netty线程模型</h3> \n <p>Netty主要<strong>基于主从Reactors多线程模型</strong>（如下图）做了一定的修改，其中主从Reactor多线程模型有多个Reactor：MainReactor和SubReactor：</p> \n <ul> \n  <li>MainReactor负责客户端的连接请求，并将请求转交给SubReactor</li> \n  <li>SubReactor负责相应通道的IO读写请求</li> \n  <li>非IO请求（具体逻辑处理）的任务则会直接写入队列，等待worker threads进行处理</li> \n </ul> \n <p>这里引用Doug Lee大神的Reactor介绍：<a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fgee.cs.oswego.edu%2Fdl%2Fcpjslides%2Fnio.pdf\" rel=\"nofollow noopener noreferrer\">Scalable IO in Java</a>里面关于主从Reactor多线程模型的图</p> \n <p></p>\n <figure>\n  <img alt=\"主从Rreactor多线程模型\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbdc698ddd6?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1240\" data-height=\"847\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <p>特别说明的是： 虽然Netty的线程模型基于主从Reactor多线程，借用了MainReactor和SubReactor的结构，但是实际实现上，SubReactor和Worker线程在同一个线程池中：</p> \n <pre><code class=\"hljs java copyable\" lang=\"java\">EventLoopGroup bossGroup = <span class=\"hljs-keyword\">new</span> NioEventLoopGroup();\nEventLoopGroup workerGroup = <span class=\"hljs-keyword\">new</span> NioEventLoopGroup();\nServerBootstrap server = <span class=\"hljs-keyword\">new</span> ServerBootstrap();\nserver.group(bossGroup, workerGroup)\n .channel(NioServerSocketChannel.class)\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p>上面代码中的bossGroup 和workerGroup是Bootstrap构造方法中传入的两个对象，这两个group均是线程池</p> \n <ul> \n  <li>bossGroup线程池则只是在bind某个端口后，获得其中一个线程作为MainReactor，专门处理端口的accept事件，<strong>每个端口对应一个boss线程</strong></li> \n  <li>workerGroup线程池会被各个SubReactor和worker线程充分利用</li> \n </ul> \n <h3 class=\"heading\" data-id=\"heading-13\">异步处理</h3> \n <p>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。</p> \n <p>Netty中的I/O操作是异步的，包括bind、write、connect等操作会简单的返回一个ChannelFuture，调用者并不能立刻获得结果，通过Future-Listener机制，用户可以方便的主动获取或者通过通知机制获得IO操作结果。</p> \n <p>当future对象刚刚创建时，处于非完成状态，调用者可以通过返回的ChannelFuture来获取操作执行的状态，注册监听函数来执行完成后的操，常见有如下操作：</p> \n <ul> \n  <li>通过isDone方法来判断当前操作是否完成</li> \n  <li>通过isSuccess方法来判断已完成的当前操作是否成功</li> \n  <li>通过getCause方法来获取已完成的当前操作失败的原因</li> \n  <li>通过isCancelled方法来判断已完成的当前操作是否被取消</li> \n  <li>通过addListener方法来注册监听器，当操作已完成(isDone方法返回完成)，将会通知指定的监听器；如果future对象已完成，则理解通知指定的监听器</li> \n </ul> \n <p>例如下面的的代码中绑定端口是异步操作，当绑定操作处理完，将会调用相应的监听器处理逻辑</p> \n <pre><code class=\"hljs java copyable\" lang=\"java\">    serverBootstrap.bind(port).addListener(future -&gt; {\n        <span class=\"hljs-keyword\">if</span> (future.isSuccess()) {\n            System.out.println(<span class=\"hljs-keyword\">new</span> Date() + <span class=\"hljs-string\">\": 端口[\"</span> + port + <span class=\"hljs-string\">\"]绑定成功!\"</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            System.err.println(<span class=\"hljs-string\">\"端口[\"</span> + port + <span class=\"hljs-string\">\"]绑定失败!\"</span>);\n        }\n    });\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p>相比传统阻塞I/O，执行I/O操作后线程会被阻塞住, 直到操作完成；异步处理的好处是不会造成线程阻塞，线程在I/O操作期间可以执行别的程序，在高并发情形下会更稳定和更高的吞吐量。</p> \n <h1 class=\"heading\" data-id=\"heading-14\">3 Netty架构设计</h1> \n <p>前面介绍完Netty相关一些理论介绍，下面从功能特性、模块组件、运作过程来介绍Netty的架构设计</p> \n <h2 class=\"heading\" data-id=\"heading-15\">功能特性</h2> \n <p></p>\n <figure>\n  <img alt=\"Netty功能特性图\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbdc8614c8f?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1147\" data-height=\"662\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <ul> \n  <li>传输服务 支持BIO和NIO</li> \n  <li>容器集成 支持OSGI、JBossMC、Spring、Guice容器</li> \n  <li>协议支持 HTTP、Protobuf、二进制、文本、WebSocket等一系列常见协议都支持。 还支持通过实行编码解码逻辑来实现自定义协议</li> \n  <li>Core核心 可扩展事件模型、通用通信API、支持零拷贝的ByteBuf缓冲对象</li> \n </ul> \n <h2 class=\"heading\" data-id=\"heading-16\">模块组件</h2> \n <h3 class=\"heading\" data-id=\"heading-17\">Bootstrap、ServerBootstrap</h3> \n <p>Bootstrap意思是引导，一个Netty应用通常由一个Bootstrap开始，主要作用是配置整个Netty程序，串联各个组件，Netty中Bootstrap类是客户端程序的启动引导类，ServerBootstrap是服务端启动引导类。</p> \n <h3 class=\"heading\" data-id=\"heading-18\">Future、ChannelFuture</h3> \n <p>正如前面介绍，在Netty中所有的IO操作都是异步的，不能立刻得知消息是否被正确处理，但是可以过一会等它执行完成或者直接注册一个监听，具体的实现就是通过Future和ChannelFutures，他们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件。</p> \n <h3 class=\"heading\" data-id=\"heading-19\">Channel</h3> \n <p>Netty网络通信的组件，能够用于执行网络I/O操作。 Channel为用户提供：</p> \n <ul> \n  <li>当前网络连接的通道的状态（例如是否打开？是否已连接？）</li> \n  <li>网络连接的配置参数 （例如接收缓冲区大小）</li> \n  <li>提供异步的网络I/O操作(如建立连接，读写，绑定端口)，异步调用意味着任何I / O调用都将立即返回，并且不保证在调用结束时所请求的I / O操作已完成。调用立即返回一个ChannelFuture实例，通过注册监听器到ChannelFuture上，可以I / O操作成功、失败或取消时回调通知调用方。</li> \n  <li>支持关联I/O操作与对应的处理程序</li> \n </ul> \n <p>不同协议、不同的阻塞类型的连接都有不同的 Channel 类型与之对应，下面是一些常用的 Channel 类型</p> \n <ul> \n  <li>NioSocketChannel，异步的客户端 TCP Socket 连接</li> \n  <li>NioServerSocketChannel，异步的服务器端 TCP Socket 连接</li> \n  <li>NioDatagramChannel，异步的 UDP 连接</li> \n  <li>NioSctpChannel，异步的客户端 Sctp 连接</li> \n  <li>NioSctpServerChannel，异步的 Sctp 服务器端连接 这些通道涵盖了 UDP 和 TCP网络 IO以及文件 IO.</li> \n </ul> \n <h3 class=\"heading\" data-id=\"heading-20\">Selector</h3> \n <p>Netty基于Selector对象实现I/O多路复用，通过 Selector, 一个线程可以监听多个连接的Channel事件, 当向一个Selector中注册Channel 后，Selector 内部的机制就可以自动不断地查询(select) 这些注册的Channel是否有已就绪的I/O事件(例如可读, 可写, 网络连接完成等)，这样程序就可以很简单地使用一个线程高效地管理多个 Channel 。</p> \n <h3 class=\"heading\" data-id=\"heading-21\">NioEventLoop</h3> \n <p>NioEventLoop中维护了一个线程和任务队列，支持异步提交执行任务，线程启动时会调用NioEventLoop的run方法，执行I/O任务和非I/O任务：</p> \n <ul> \n  <li>I/O任务 即selectionKey中ready的事件，如accept、connect、read、write等，由processSelectedKeys方法触发。</li> \n  <li>非IO任务 添加到taskQueue中的任务，如register0、bind0等任务，由runAllTasks方法触发。</li> \n </ul> \n <p>两种任务的执行时间比由变量ioRatio控制，默认为50，则表示允许非IO任务执行的时间与IO任务的执行时间相等。</p> \n <h3 class=\"heading\" data-id=\"heading-22\">NioEventLoopGroup</h3> \n <p>NioEventLoopGroup，主要管理eventLoop的生命周期，可以理解为一个线程池，内部维护了一组线程，每个线程(NioEventLoop)负责处理多个Channel上的事件，而一个Channel只对应于一个线程。</p> \n <h3 class=\"heading\" data-id=\"heading-23\">ChannelHandler</h3> \n <p>ChannelHandler是一个接口，处理I / O事件或拦截I / O操作，并将其转发到其ChannelPipeline(业务处理链)中的下一个处理程序。</p> \n <p>ChannelHandler本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类：</p> \n <ul> \n  <li>ChannelInboundHandler用于处理入站I / O事件</li> \n  <li>ChannelOutboundHandler用于处理出站I / O操作</li> \n </ul> \n <p>或者使用以下适配器类：</p> \n <ul> \n  <li>ChannelInboundHandlerAdapter用于处理入站I / O事件</li> \n  <li>ChannelOutboundHandlerAdapter用于处理出站I / O操作</li> \n  <li>ChannelDuplexHandler用于处理入站和出站事件</li> \n </ul> \n <h3 class=\"heading\" data-id=\"heading-24\">ChannelHandlerContext</h3> \n <p>保存Channel相关的所有上下文信息，同时关联一个ChannelHandler对象</p> \n <h3 class=\"heading\" data-id=\"heading-25\">ChannelPipline</h3> \n <p>保存ChannelHandler的List，用于处理或拦截Channel的入站事件和出站操作。 ChannelPipeline实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及Channel中各个的ChannelHandler如何相互交互。</p> \n <p>下图引用Netty的Javadoc4.1中ChannelPipline的说明，描述了ChannelPipeline中ChannelHandler通常如何处理I/O事件。 I/O事件由ChannelInboundHandler或ChannelOutboundHandler处理，并通过调用ChannelHandlerContext中定义的事件传播方法（例如ChannelHandlerContext.fireChannelRead（Object）和ChannelOutboundInvoker.write（Object））转发到其最近的处理程序。</p> \n <pre><code class=\"hljs bash copyable\" lang=\"bash\">                                                 I/O Request\n                                            via Channel or\n                                        ChannelHandlerContext\n                                                      |\n  +---------------------------------------------------+---------------+\n  |                           ChannelPipeline         |               |\n  |                                                  \\|/              |\n  |    +---------------------+            +-----------+----------+    |\n  |    | Inbound Handler  N  |            | Outbound Handler  1  |    |\n  |    +----------+----------+            +-----------+----------+    |\n  |              /|\\                                  |               |\n  |               |                                  \\|/              |\n  |    +----------+----------+            +-----------+----------+    |\n  |    | Inbound Handler N-1 |            | Outbound Handler  2  |    |\n  |    +----------+----------+            +-----------+----------+    |\n  |              /|\\                                  .               |\n  |               .                                   .               |\n  | ChannelHandlerContext.fireIN_EVT() ChannelHandlerContext.OUT_EVT()|\n  |        [ method call]                       [method call]         |\n  |               .                                   .               |\n  |               .                                  \\|/              |\n  |    +----------+----------+            +-----------+----------+    |\n  |    | Inbound Handler  2  |            | Outbound Handler M-1 |    |\n  |    +----------+----------+            +-----------+----------+    |\n  |              /|\\                                  |               |\n  |               |                                  \\|/              |\n  |    +----------+----------+            +-----------+----------+    |\n  |    | Inbound Handler  1  |            | Outbound Handler  M  |    |\n  |    +----------+----------+            +-----------+----------+    |\n  |              /|\\                                  |               |\n  +---------------+-----------------------------------+---------------+\n                  |                                  \\|/\n  +---------------+-----------------------------------+---------------+\n  |               |                                   |               |\n  |       [ Socket.read() ]                    [ Socket.write() ]     |\n  |                                                                   |\n  |  Netty Internal I/O Threads (Transport Implementation)            |\n  +-------------------------------------------------------------------+\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p>入站事件由自下而上方向的入站处理程序处理，如图左侧所示。 入站Handler处理程序通常处理由图底部的I / O线程生成的入站数据。 通常通过实际输入操作（例如SocketChannel.read（ByteBuffer））从远程读取入站数据。</p> \n <p>出站事件由上下方向处理，如图右侧所示。 出站Handler处理程序通常会生成或转换出站传输，例如write请求。 I/O线程通常执行实际的输出操作，例如SocketChannel.write（ByteBuffer）。</p> \n <p>在 Netty 中每个 Channel 都有且仅有一个 ChannelPipeline 与之对应, 它们的组成关系如下:</p> \n <p></p>\n <figure>\n  <img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbdc8cd1a2f?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1240\" data-height=\"393\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <p>一个 Channel 包含了一个 ChannelPipeline, 而 ChannelPipeline 中又维护了一个由 ChannelHandlerContext 组成的双向链表, 并且每个 ChannelHandlerContext 中又关联着一个 ChannelHandler。入站事件和出站事件在一个双向链表中，入站事件会从链表head往后传递到最后一个入站的handler，出站事件会从链表tail往前传递到最前一个出站的handler，两种类型的handler互不干扰。</p> \n <h2 class=\"heading\" data-id=\"heading-26\">工作原理架构</h2> \n <p>初始化并启动Netty服务端过程如下：</p> \n <pre><code class=\"hljs java copyable\" lang=\"java\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        <span class=\"hljs-comment\">// 创建mainReactor</span>\n        NioEventLoopGroup boosGroup = <span class=\"hljs-keyword\">new</span> NioEventLoopGroup();\n        <span class=\"hljs-comment\">// 创建工作线程组</span>\n        NioEventLoopGroup workerGroup = <span class=\"hljs-keyword\">new</span> NioEventLoopGroup();\n\n        <span class=\"hljs-keyword\">final</span> ServerBootstrap serverBootstrap = <span class=\"hljs-keyword\">new</span> ServerBootstrap();\n        serverBootstrap \n                 <span class=\"hljs-comment\">// 组装NioEventLoopGroup </span>\n                .group(boosGroup, workerGroup)\n                 <span class=\"hljs-comment\">// 设置channel类型为NIO类型</span>\n                .channel(NioServerSocketChannel.class)\n                <span class=\"hljs-comment\">// 设置连接配置参数</span>\n                .option(ChannelOption.SO_BACKLOG, <span class=\"hljs-number\">1024</span>)\n                .childOption(ChannelOption.SO_KEEPALIVE, <span class=\"hljs-keyword\">true</span>)\n                .childOption(ChannelOption.TCP_NODELAY, <span class=\"hljs-keyword\">true</span>)\n                <span class=\"hljs-comment\">// 配置入站、出站事件handler</span>\n                .childHandler(<span class=\"hljs-keyword\">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() {\n                    <span class=\"hljs-meta\">@Override</span>\n                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> </span>{\n                        <span class=\"hljs-comment\">// 配置入站、出站事件channel</span>\n                        ch.pipeline().addLast(...);\n                        ch.pipeline().addLast(...);\n                    }\n    });\n\n        <span class=\"hljs-comment\">// 绑定端口</span>\n        <span class=\"hljs-keyword\">int</span> port = <span class=\"hljs-number\">8080</span>;\n        serverBootstrap.bind(port).addListener(future -&gt; {\n            <span class=\"hljs-keyword\">if</span> (future.isSuccess()) {\n                System.out.println(<span class=\"hljs-keyword\">new</span> Date() + <span class=\"hljs-string\">\": 端口[\"</span> + port + <span class=\"hljs-string\">\"]绑定成功!\"</span>);\n            } <span class=\"hljs-keyword\">else</span> {\n                System.err.println(<span class=\"hljs-string\">\"端口[\"</span> + port + <span class=\"hljs-string\">\"]绑定失败!\"</span>);\n            }\n        });\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <ul> \n  <li>基本过程如下：</li> \n  <li>1 初始化创建2个NioEventLoopGroup，其中boosGroup用于Accetpt连接建立事件并分发请求， workerGroup用于处理I/O读写事件和业务逻辑</li> \n  <li>2 基于ServerBootstrap(服务端启动引导类)，配置EventLoopGroup、Channel类型，连接参数、配置入站、出站事件handler</li> \n  <li>3 绑定端口，开始工作</li> \n </ul> \n <p>结合上面的介绍的Netty Reactor模型，介绍服务端Netty的工作架构图：</p> \n <p></p>\n <figure>\n  <img alt=\"服务端Netty Reactor工作架构图\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbdc9a7cabe?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1167\" data-height=\"978\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <p>server端包含1个Boss NioEventLoopGroup和1个Worker NioEventLoopGroup，NioEventLoopGroup相当于1个事件循环组，这个组里包含多个事件循环NioEventLoop，每个NioEventLoop包含1个selector和1个事件循环线程。</p> \n <p>每个Boss NioEventLoop循环执行的任务包含3步：</p> \n <ul> \n  <li>1 轮询accept事件</li> \n  <li>2 处理accept I/O事件，与Client建立连接，生成NioSocketChannel，并将NioSocketChannel注册到某个Worker NioEventLoop的Selector上 *3 处理任务队列中的任务，runAllTasks。任务队列中的任务包括用户调用eventloop.execute或schedule执行的任务，或者其它线程提交到该eventloop的任务。</li> \n </ul> \n <p>每个Worker NioEventLoop循环执行的任务包含3步：</p> \n <ul> \n  <li>1 轮询read、write事件；</li> \n  <li>2 处I/O事件，即read、write事件，在NioSocketChannel可读、可写事件发生时进行处理</li> \n  <li>3 处理任务队列中的任务，runAllTasks。</li> \n </ul> \n <p>其中任务队列中的task有3种典型使用场景</p> \n <ul> \n  <li>1 用户程序自定义的普通任务</li> \n </ul> \n <pre><code class=\"hljs java copyable\" lang=\"java\">ctx.channel().eventLoop().execute(<span class=\"hljs-keyword\">new</span> Runnable() {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">//...</span>\n    }\n});\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <ul> \n  <li> <p>2 非当前reactor线程调用channel的各种方法 例如在推送系统的业务线程里面，根据用户的标识，找到对应的channel引用，然后调用write类方法向该用户推送消息，就会进入到这种场景。最终的write会提交到任务队列中后被异步消费。</p> </li> \n  <li> <p>3 用户自定义定时任务</p> </li> \n </ul> \n <pre><code class=\"hljs bash copyable\" lang=\"bash\">ctx.channel().eventLoop().schedule(new <span class=\"hljs-function\"><span class=\"hljs-title\">Runnable</span></span>() {\n    @Override\n    public void <span class=\"hljs-function\"><span class=\"hljs-title\">run</span></span>() {\n\n    }\n}, 60, TimeUnit.SECONDS);\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <h1 class=\"heading\" data-id=\"heading-27\">4 总结</h1> \n <p>现在稳定推荐使用的主流版本还是Netty4，Netty5 中使用了 ForkJoinPool，增加了代码的复杂度，但是对性能的改善却不明显，所以这个版本不推荐使用，官网也没有提供下载链接。</p> \n <p>Netty 入门门槛相对较高，其实是因为这方面的资料较少，并不是因为他有多难，大家其实都可以像搞透 Spring 一样搞透 Netty。在学习之前，建议先理解透整个框架原理结构，运行过程，可以少走很多弯路。</p> \n <h1 class=\"heading\" data-id=\"heading-28\">参考</h1> \n <p><a target=\"_blank\" href=\"https://juejin.im/book/5b4bc28bf265da0f60130116?referrer=598ff735f265da3e1c0f9643\" rel=\"\">Netty入门与实战：仿写微信 IM 即时通讯系统</a></p> \n <p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fnetty.io%2F\" rel=\"nofollow noopener noreferrer\">Netty官网</a></p> \n <p><a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fyihongwei.com%2F2014%2F01%2Fnetty-4-x-thread-model%2F\" rel=\"nofollow noopener noreferrer\">Netty 4.x学习笔记 - 线程模型</a></p> \n <p><a target=\"_blank\" href=\"https://juejin.im/book/5b4bc28bf265da0f60130116?referrer=598ff735f265da3e1c0f9643\" rel=\"\">Netty入门与实战</a></p> \n <p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F2965fca6bb8f\" rel=\"nofollow noopener noreferrer\">理解高性能网络模型</a></p> \n <p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwangwei.one%2Fposts%2Fnetty-base-theory-intro.html\" rel=\"nofollow noopener noreferrer\">Netty基本原理介绍</a></p> \n <p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.oreilly.com%2Fprogramming%2Ffree%2Ffiles%2Fsoftware-architecture-patterns.pdf\" rel=\"nofollow noopener noreferrer\">software-architecture-patterns.pdf</a></p> \n <p><a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.infoq.com%2Fcn%2Farticles%2Fnetty-high-performance\" rel=\"nofollow noopener noreferrer\">Netty高性能之道 —— 李林锋</a></p> \n <p>《Netty In Action》</p> \n <p>《Netty权威指南》</p> \n</div>', '<div data-id=\"5bea1dae51882548f5463254\" itemprop=\"articleBody\" class=\"article-content\" data-v-5e15fbe3>\n <p>[作者：陈彩华]本文基于Netty4.1展开介绍相关理论模型，使用场景，基本组件、整体架构，<strong>知其然且知其所以然</strong>，希望给读者提供学习实践参考。</p> \n <h1 class=\"heading\" data-id=\"heading-0\">1 Netty简介</h1> \n <p></p>\n <figure>\n  <img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbcfbbe9f66?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"700\" data-height=\"400\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <p>Netty是 一个异步事件驱动的网络应用程序框架，用于快速开发可维护的高性能协议服务器和客户端。</p> \n <h2 class=\"heading\" data-id=\"heading-1\">JDK原生NIO程序的问题</h2> \n <p>JDK原生也有一套网络应用程序API，但是存在一系列问题，主要如下：</p> \n <ul> \n  <li>NIO的类库和API繁杂，使用麻烦，你需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等</li> \n  <li>需要具备其它的额外技能做铺垫，例如熟悉Java多线程编程，因为NIO编程涉及到Reactor模式，你必须对多线程和网路编程非常熟悉，才能编写出高质量的NIO程序</li> \n  <li>可靠性能力补齐，开发工作量和难度都非常大。例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常码流的处理等等，NIO编程的特点是功能开发相对容易，但是可靠性能力补齐工作量和难度都非常大</li> \n  <li>JDK NIO的BUG，例如臭名昭著的epoll bug，它会导致Selector空轮询，最终导致CPU 100%。官方声称在JDK1.6版本的update18修复了该问题，但是直到JDK1.7版本该问题仍旧存在，只不过该bug发生概率降低了一些而已，它并没有被根本解决</li> \n </ul> \n <h2 class=\"heading\" data-id=\"heading-2\">Netty的特点</h2> \n <p>Netty的对JDK自带的NIO的API进行封装，解决上述问题，主要特点有：</p> \n <ul> \n  <li>设计优雅 适用于各种传输类型的统一API - 阻塞和非阻塞Socket 基于灵活且可扩展的事件模型，可以清晰地分离关注点 高度可定制的线程模型 - 单线程，一个或多个线程池 真正的无连接数据报套接字支持（自3.1起）</li> \n  <li>使用方便 详细记录的Javadoc，用户指南和示例 没有其他依赖项，JDK 5（Netty 3.x）或6（Netty 4.x）就足够了</li> \n  <li>高性能 吞吐量更高，延迟更低 减少资源消耗 最小化不必要的内存复制</li> \n  <li>安全 完整的SSL / TLS和StartTLS支持</li> \n  <li>社区活跃，不断更新 社区活跃，版本迭代周期短，发现的BUG可以被及时修复，同时，更多的新功能会被加入</li> \n </ul> \n <h2 class=\"heading\" data-id=\"heading-3\">Netty常见使用常见</h2> \n <p>Netty常见的使用场景如下：</p> \n <ul> \n  <li>互联网行业 在分布式系统中，各个节点之间需要远程服务调用，高性能的RPC框架必不可少，Netty作为异步高新能的通信框架,往往作为基础通信组件被这些RPC框架使用。 典型的应用有：阿里分布式服务框架Dubbo的RPC框架使用Dubbo协议进行节点间通信，Dubbo协议默认使用Netty作为基础通信组件，用于实现各进程节点之间的内部通信。</li> \n  <li>游戏行业 无论是手游服务端还是大型的网络游戏，Java语言得到了越来越广泛的应用。Netty作为高性能的基础通信组件，它本身提供了TCP/UDP和HTTP协议栈。 非常方便定制和开发私有协议栈，账号登录服务器，地图服务器之间可以方便的通过Netty进行高性能的通信</li> \n  <li>大数据领域 经典的Hadoop的高性能通信和序列化组件Avro的RPC框架，默认采用Netty进行跨界点通信，它的Netty Service基于Netty框架二次封装实现</li> \n </ul> \n <p>有兴趣的读者可以了解一下目前有哪些开源项目使用了 Netty：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fnetty.io%2Fwiki%2Frelated-projects.html\" rel=\"nofollow noopener noreferrer\">Related projects</a></p> \n <h1 class=\"heading\" data-id=\"heading-4\">2 Netty高性能设计</h1> \n <p>Netty作为异步事件驱动的网络，高性能之处主要来自于其I/O模型和线程处理模型，前者决定如何收发数据，后者决定如何处理数据</p> \n <h2 class=\"heading\" data-id=\"heading-5\">I/O模型</h2> \n <p>用什么样的通道将数据发送给对方，BIO、NIO或者AIO，I/O模型在很大程度上决定了框架的性能</p> \n <h3 class=\"heading\" data-id=\"heading-6\">阻塞I/O</h3> \n <p>传统阻塞型I/O(BIO)可以用下图表示： </p>\n <figure>\n  <img alt=\"Blocking I/O\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbcfb70c111?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"690\" data-height=\"493\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <p><strong>特点</strong></p> \n <ul> \n  <li>每个请求都需要独立的线程完成数据read，业务处理，数据write的完整操作</li> \n </ul> \n <p><strong>问题</strong></p> \n <ul> \n  <li>当并发数较大时，需要创建大量线程来处理连接，系统资源占用较大</li> \n  <li>连接建立后，如果当前线程暂时没有数据可读，则线程就阻塞在read操作上，造成线程资源浪费</li> \n </ul> \n <h3 class=\"heading\" data-id=\"heading-7\">I/O复用模型</h3> \n <p></p>\n <figure>\n  <img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbcfba53c0a?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1212\" data-height=\"649\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <p>在I/O复用模型中，会用到select，这个函数也会使进程阻塞，但是和阻塞I/O所不同的的，这两个函数可以同时阻塞多个I/O操作，而且可以同时对多个读操作，多个写操作的I/O函数进行检测，直到有数据可读或可写时，才真正调用I/O操作函数</p> \n <p>Netty的非阻塞I/O的实现关键是基于I/O复用模型，这里用Selector对象表示：</p> \n <p></p>\n <figure>\n  <img alt=\"Nonblocking I/O\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbcfba32169?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"652\" data-height=\"645\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <p>Netty的IO线程NioEventLoop由于聚合了多路复用器Selector，可以同时并发处理成百上千个客户端连接。当线程从某客户端Socket通道进行读写数据时，若没有数据可用时，该线程可以进行其他任务。线程通常将非阻塞 IO 的空闲时间用于在其他通道上执行 IO 操作，所以单独的线程可以管理多个输入和输出通道。</p> \n <p>由于读写操作都是非阻塞的，这就可以充分提升IO线程的运行效率，避免由于频繁I/O阻塞导致的线程挂起，一个I/O线程可以并发处理N个客户端连接和读写操作，这从根本上解决了传统同步阻塞I/O一连接一线程模型，架构的性能、弹性伸缩能力和可靠性都得到了极大的提升。</p> \n <h3 class=\"heading\" data-id=\"heading-8\">基于buffer</h3> \n <p>传统的I/O是面向字节流或字符流的，以流式的方式顺序地从一个Stream 中读取一个或多个字节, 因此也就不能随意改变读取指针的位置。</p> \n <p>在NIO中, 抛弃了传统的 I/O流, 而是引入了Channel和Buffer的概念. 在NIO中, 只能从Channel中读取数据到Buffer中或将数据 Buffer 中写入到 Channel。</p> \n <p>基于buffer操作不像传统IO的顺序操作, NIO 中可以随意地读取任意位置的数据</p> \n <h2 class=\"heading\" data-id=\"heading-9\">线程模型</h2> \n <p>数据报如何读取？读取之后的编解码在哪个线程进行，编解码后的消息如何派发，线程模型的不同，对性能的影响也非常大。</p> \n <h3 class=\"heading\" data-id=\"heading-10\">事件驱动模型</h3> \n <p>通常，我们设计一个事件处理模型的程序有两种思路</p> \n <ul> \n  <li>轮询方式 线程不断轮询访问相关事件发生源有没有发生事件，有发生事件就调用事件处理逻辑。</li> \n  <li>事件驱动方式 发生事件，主线程把事件放入事件队列，在另外线程不断循环消费事件列表中的事件，调用事件对应的处理逻辑处理事件。事件驱动方式也被称为消息通知方式，其实是设计模式中<strong>观察者模式</strong>的思路。</li> \n </ul> \n <p>以GUI的逻辑处理为例，说明两种逻辑的不同：</p> \n <ul> \n  <li>轮询方式 线程不断轮询是否发生按钮点击事件，如果发生，调用处理逻辑</li> \n  <li>事件驱动方式 发生点击事件把事件放入事件队列，在另外线程消费的事件列表中的事件，根据事件类型调用相关事件处理逻辑</li> \n </ul> \n <p>这里借用O\'Reilly 大神关于<a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.oreilly.com%2Fprogramming%2Ffree%2Fsoftware-architecture-patterns.csp\" rel=\"nofollow noopener noreferrer\">事件驱动模型解释图</a> </p>\n <figure>\n  <img alt=\"事件驱动模型\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbcfbdf3439?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"750\" data-height=\"578\">\n  <figcaption></figcaption>\n </figure> 主要包括4个基本组件：\n <p></p> \n <ul> \n  <li>事件队列（event queue）：接收事件的入口，存储待处理事件</li> \n  <li>分发器（event mediator）：将不同的事件分发到不同的业务逻辑单元</li> \n  <li>事件通道（event channel）：分发器与处理器之间的联系渠道</li> \n  <li>事件处理器（event processor）：实现业务逻辑，处理完成后会发出事件，触发下一步操作</li> \n </ul> \n <p>可以看出，相对传统轮询模式，事件驱动有如下优点：</p> \n <ul> \n  <li>可扩展性好，分布式的异步架构，事件处理器之间高度解耦，可以方便扩展事件处理逻辑</li> \n  <li>高性能，基于队列暂存事件，能方便并行异步处理事件</li> \n </ul> \n <h3 class=\"heading\" data-id=\"heading-11\">Reactor线程模型</h3> \n <p>Reactor是反应堆的意思，Reactor模型，是指通过一个或多个输入同时传递给服务处理器的服务请求的<strong>事件驱动处理模式</strong>。 服务端程序处理传入多路请求，并将它们同步分派给请求对应的处理线程，Reactor模式也叫Dispatcher模式，即I/O多了复用统一监听事件，收到事件后分发(Dispatch给某进程)，是编写高性能网络服务器的必备技术之一。</p> \n <p>Reactor模型中有2个关键组成：</p> \n <ul> \n  <li> <p>Reactor Reactor在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对IO事件做出反应。 它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人</p> </li> \n  <li> <p>Handlers 处理程序执行I/O事件要完成的实际事件，类似于客户想要与之交谈的公司中的实际官员。Reactor通过调度适当的处理程序来响应I/O事件，处理程序执行非阻塞操作</p> </li> \n </ul> \n <p></p>\n <figure>\n  <img alt=\"Reactor模型\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbdc654d6dc?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1084\" data-height=\"691\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <p>取决于Reactor的数量和Hanndler线程数量的不同，Reactor模型有3个变种</p> \n <ul> \n  <li>单Reactor单线程</li> \n  <li>单Reactor多线程</li> \n  <li>主从Reactor多线程</li> \n </ul> \n <p>可以这样理解，Reactor就是一个执行while (true) { selector.select(); ...}循环的线程，会源源不断的产生新的事件，称作反应堆很贴切。</p> \n <p>篇幅关系，这里不再具体展开Reactor特性、优缺点比较，有兴趣的读者可以参考我之前另外一篇文章：<a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F2965fca6bb8f\" rel=\"nofollow noopener noreferrer\">《理解高性能网络模型》</a></p> \n <h3 class=\"heading\" data-id=\"heading-12\">Netty线程模型</h3> \n <p>Netty主要<strong>基于主从Reactors多线程模型</strong>（如下图）做了一定的修改，其中主从Reactor多线程模型有多个Reactor：MainReactor和SubReactor：</p> \n <ul> \n  <li>MainReactor负责客户端的连接请求，并将请求转交给SubReactor</li> \n  <li>SubReactor负责相应通道的IO读写请求</li> \n  <li>非IO请求（具体逻辑处理）的任务则会直接写入队列，等待worker threads进行处理</li> \n </ul> \n <p>这里引用Doug Lee大神的Reactor介绍：<a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fgee.cs.oswego.edu%2Fdl%2Fcpjslides%2Fnio.pdf\" rel=\"nofollow noopener noreferrer\">Scalable IO in Java</a>里面关于主从Reactor多线程模型的图</p> \n <p></p>\n <figure>\n  <img alt=\"主从Rreactor多线程模型\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbdc698ddd6?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1240\" data-height=\"847\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <p>特别说明的是： 虽然Netty的线程模型基于主从Reactor多线程，借用了MainReactor和SubReactor的结构，但是实际实现上，SubReactor和Worker线程在同一个线程池中：</p> \n <pre><code class=\"hljs java copyable\" lang=\"java\">EventLoopGroup bossGroup = <span class=\"hljs-keyword\">new</span> NioEventLoopGroup();\nEventLoopGroup workerGroup = <span class=\"hljs-keyword\">new</span> NioEventLoopGroup();\nServerBootstrap server = <span class=\"hljs-keyword\">new</span> ServerBootstrap();\nserver.group(bossGroup, workerGroup)\n .channel(NioServerSocketChannel.class)\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p>上面代码中的bossGroup 和workerGroup是Bootstrap构造方法中传入的两个对象，这两个group均是线程池</p> \n <ul> \n  <li>bossGroup线程池则只是在bind某个端口后，获得其中一个线程作为MainReactor，专门处理端口的accept事件，<strong>每个端口对应一个boss线程</strong></li> \n  <li>workerGroup线程池会被各个SubReactor和worker线程充分利用</li> \n </ul> \n <h3 class=\"heading\" data-id=\"heading-13\">异步处理</h3> \n <p>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的部件在完成后，通过状态、通知和回调来通知调用者。</p> \n <p>Netty中的I/O操作是异步的，包括bind、write、connect等操作会简单的返回一个ChannelFuture，调用者并不能立刻获得结果，通过Future-Listener机制，用户可以方便的主动获取或者通过通知机制获得IO操作结果。</p> \n <p>当future对象刚刚创建时，处于非完成状态，调用者可以通过返回的ChannelFuture来获取操作执行的状态，注册监听函数来执行完成后的操，常见有如下操作：</p> \n <ul> \n  <li>通过isDone方法来判断当前操作是否完成</li> \n  <li>通过isSuccess方法来判断已完成的当前操作是否成功</li> \n  <li>通过getCause方法来获取已完成的当前操作失败的原因</li> \n  <li>通过isCancelled方法来判断已完成的当前操作是否被取消</li> \n  <li>通过addListener方法来注册监听器，当操作已完成(isDone方法返回完成)，将会通知指定的监听器；如果future对象已完成，则理解通知指定的监听器</li> \n </ul> \n <p>例如下面的的代码中绑定端口是异步操作，当绑定操作处理完，将会调用相应的监听器处理逻辑</p> \n <pre><code class=\"hljs java copyable\" lang=\"java\">    serverBootstrap.bind(port).addListener(future -&gt; {\n        <span class=\"hljs-keyword\">if</span> (future.isSuccess()) {\n            System.out.println(<span class=\"hljs-keyword\">new</span> Date() + <span class=\"hljs-string\">\": 端口[\"</span> + port + <span class=\"hljs-string\">\"]绑定成功!\"</span>);\n        } <span class=\"hljs-keyword\">else</span> {\n            System.err.println(<span class=\"hljs-string\">\"端口[\"</span> + port + <span class=\"hljs-string\">\"]绑定失败!\"</span>);\n        }\n    });\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p>相比传统阻塞I/O，执行I/O操作后线程会被阻塞住, 直到操作完成；异步处理的好处是不会造成线程阻塞，线程在I/O操作期间可以执行别的程序，在高并发情形下会更稳定和更高的吞吐量。</p> \n <h1 class=\"heading\" data-id=\"heading-14\">3 Netty架构设计</h1> \n <p>前面介绍完Netty相关一些理论介绍，下面从功能特性、模块组件、运作过程来介绍Netty的架构设计</p> \n <h2 class=\"heading\" data-id=\"heading-15\">功能特性</h2> \n <p></p>\n <figure>\n  <img alt=\"Netty功能特性图\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbdc8614c8f?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1147\" data-height=\"662\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <ul> \n  <li>传输服务 支持BIO和NIO</li> \n  <li>容器集成 支持OSGI、JBossMC、Spring、Guice容器</li> \n  <li>协议支持 HTTP、Protobuf、二进制、文本、WebSocket等一系列常见协议都支持。 还支持通过实行编码解码逻辑来实现自定义协议</li> \n  <li>Core核心 可扩展事件模型、通用通信API、支持零拷贝的ByteBuf缓冲对象</li> \n </ul> \n <h2 class=\"heading\" data-id=\"heading-16\">模块组件</h2> \n <h3 class=\"heading\" data-id=\"heading-17\">Bootstrap、ServerBootstrap</h3> \n <p>Bootstrap意思是引导，一个Netty应用通常由一个Bootstrap开始，主要作用是配置整个Netty程序，串联各个组件，Netty中Bootstrap类是客户端程序的启动引导类，ServerBootstrap是服务端启动引导类。</p> \n <h3 class=\"heading\" data-id=\"heading-18\">Future、ChannelFuture</h3> \n <p>正如前面介绍，在Netty中所有的IO操作都是异步的，不能立刻得知消息是否被正确处理，但是可以过一会等它执行完成或者直接注册一个监听，具体的实现就是通过Future和ChannelFutures，他们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件。</p> \n <h3 class=\"heading\" data-id=\"heading-19\">Channel</h3> \n <p>Netty网络通信的组件，能够用于执行网络I/O操作。 Channel为用户提供：</p> \n <ul> \n  <li>当前网络连接的通道的状态（例如是否打开？是否已连接？）</li> \n  <li>网络连接的配置参数 （例如接收缓冲区大小）</li> \n  <li>提供异步的网络I/O操作(如建立连接，读写，绑定端口)，异步调用意味着任何I / O调用都将立即返回，并且不保证在调用结束时所请求的I / O操作已完成。调用立即返回一个ChannelFuture实例，通过注册监听器到ChannelFuture上，可以I / O操作成功、失败或取消时回调通知调用方。</li> \n  <li>支持关联I/O操作与对应的处理程序</li> \n </ul> \n <p>不同协议、不同的阻塞类型的连接都有不同的 Channel 类型与之对应，下面是一些常用的 Channel 类型</p> \n <ul> \n  <li>NioSocketChannel，异步的客户端 TCP Socket 连接</li> \n  <li>NioServerSocketChannel，异步的服务器端 TCP Socket 连接</li> \n  <li>NioDatagramChannel，异步的 UDP 连接</li> \n  <li>NioSctpChannel，异步的客户端 Sctp 连接</li> \n  <li>NioSctpServerChannel，异步的 Sctp 服务器端连接 这些通道涵盖了 UDP 和 TCP网络 IO以及文件 IO.</li> \n </ul> \n <h3 class=\"heading\" data-id=\"heading-20\">Selector</h3> \n <p>Netty基于Selector对象实现I/O多路复用，通过 Selector, 一个线程可以监听多个连接的Channel事件, 当向一个Selector中注册Channel 后，Selector 内部的机制就可以自动不断地查询(select) 这些注册的Channel是否有已就绪的I/O事件(例如可读, 可写, 网络连接完成等)，这样程序就可以很简单地使用一个线程高效地管理多个 Channel 。</p> \n <h3 class=\"heading\" data-id=\"heading-21\">NioEventLoop</h3> \n <p>NioEventLoop中维护了一个线程和任务队列，支持异步提交执行任务，线程启动时会调用NioEventLoop的run方法，执行I/O任务和非I/O任务：</p> \n <ul> \n  <li>I/O任务 即selectionKey中ready的事件，如accept、connect、read、write等，由processSelectedKeys方法触发。</li> \n  <li>非IO任务 添加到taskQueue中的任务，如register0、bind0等任务，由runAllTasks方法触发。</li> \n </ul> \n <p>两种任务的执行时间比由变量ioRatio控制，默认为50，则表示允许非IO任务执行的时间与IO任务的执行时间相等。</p> \n <h3 class=\"heading\" data-id=\"heading-22\">NioEventLoopGroup</h3> \n <p>NioEventLoopGroup，主要管理eventLoop的生命周期，可以理解为一个线程池，内部维护了一组线程，每个线程(NioEventLoop)负责处理多个Channel上的事件，而一个Channel只对应于一个线程。</p> \n <h3 class=\"heading\" data-id=\"heading-23\">ChannelHandler</h3> \n <p>ChannelHandler是一个接口，处理I / O事件或拦截I / O操作，并将其转发到其ChannelPipeline(业务处理链)中的下一个处理程序。</p> \n <p>ChannelHandler本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类：</p> \n <ul> \n  <li>ChannelInboundHandler用于处理入站I / O事件</li> \n  <li>ChannelOutboundHandler用于处理出站I / O操作</li> \n </ul> \n <p>或者使用以下适配器类：</p> \n <ul> \n  <li>ChannelInboundHandlerAdapter用于处理入站I / O事件</li> \n  <li>ChannelOutboundHandlerAdapter用于处理出站I / O操作</li> \n  <li>ChannelDuplexHandler用于处理入站和出站事件</li> \n </ul> \n <h3 class=\"heading\" data-id=\"heading-24\">ChannelHandlerContext</h3> \n <p>保存Channel相关的所有上下文信息，同时关联一个ChannelHandler对象</p> \n <h3 class=\"heading\" data-id=\"heading-25\">ChannelPipline</h3> \n <p>保存ChannelHandler的List，用于处理或拦截Channel的入站事件和出站操作。 ChannelPipeline实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及Channel中各个的ChannelHandler如何相互交互。</p> \n <p>下图引用Netty的Javadoc4.1中ChannelPipline的说明，描述了ChannelPipeline中ChannelHandler通常如何处理I/O事件。 I/O事件由ChannelInboundHandler或ChannelOutboundHandler处理，并通过调用ChannelHandlerContext中定义的事件传播方法（例如ChannelHandlerContext.fireChannelRead（Object）和ChannelOutboundInvoker.write（Object））转发到其最近的处理程序。</p> \n <pre><code class=\"hljs bash copyable\" lang=\"bash\">                                                 I/O Request\n                                            via Channel or\n                                        ChannelHandlerContext\n                                                      |\n  +---------------------------------------------------+---------------+\n  |                           ChannelPipeline         |               |\n  |                                                  \\|/              |\n  |    +---------------------+            +-----------+----------+    |\n  |    | Inbound Handler  N  |            | Outbound Handler  1  |    |\n  |    +----------+----------+            +-----------+----------+    |\n  |              /|\\                                  |               |\n  |               |                                  \\|/              |\n  |    +----------+----------+            +-----------+----------+    |\n  |    | Inbound Handler N-1 |            | Outbound Handler  2  |    |\n  |    +----------+----------+            +-----------+----------+    |\n  |              /|\\                                  .               |\n  |               .                                   .               |\n  | ChannelHandlerContext.fireIN_EVT() ChannelHandlerContext.OUT_EVT()|\n  |        [ method call]                       [method call]         |\n  |               .                                   .               |\n  |               .                                  \\|/              |\n  |    +----------+----------+            +-----------+----------+    |\n  |    | Inbound Handler  2  |            | Outbound Handler M-1 |    |\n  |    +----------+----------+            +-----------+----------+    |\n  |              /|\\                                  |               |\n  |               |                                  \\|/              |\n  |    +----------+----------+            +-----------+----------+    |\n  |    | Inbound Handler  1  |            | Outbound Handler  M  |    |\n  |    +----------+----------+            +-----------+----------+    |\n  |              /|\\                                  |               |\n  +---------------+-----------------------------------+---------------+\n                  |                                  \\|/\n  +---------------+-----------------------------------+---------------+\n  |               |                                   |               |\n  |       [ Socket.read() ]                    [ Socket.write() ]     |\n  |                                                                   |\n  |  Netty Internal I/O Threads (Transport Implementation)            |\n  +-------------------------------------------------------------------+\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <p>入站事件由自下而上方向的入站处理程序处理，如图左侧所示。 入站Handler处理程序通常处理由图底部的I / O线程生成的入站数据。 通常通过实际输入操作（例如SocketChannel.read（ByteBuffer））从远程读取入站数据。</p> \n <p>出站事件由上下方向处理，如图右侧所示。 出站Handler处理程序通常会生成或转换出站传输，例如write请求。 I/O线程通常执行实际的输出操作，例如SocketChannel.write（ByteBuffer）。</p> \n <p>在 Netty 中每个 Channel 都有且仅有一个 ChannelPipeline 与之对应, 它们的组成关系如下:</p> \n <p></p>\n <figure>\n  <img class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbdc8cd1a2f?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1240\" data-height=\"393\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <p>一个 Channel 包含了一个 ChannelPipeline, 而 ChannelPipeline 中又维护了一个由 ChannelHandlerContext 组成的双向链表, 并且每个 ChannelHandlerContext 中又关联着一个 ChannelHandler。入站事件和出站事件在一个双向链表中，入站事件会从链表head往后传递到最后一个入站的handler，出站事件会从链表tail往前传递到最前一个出站的handler，两种类型的handler互不干扰。</p> \n <h2 class=\"heading\" data-id=\"heading-26\">工作原理架构</h2> \n <p>初始化并启动Netty服务端过程如下：</p> \n <pre><code class=\"hljs java copyable\" lang=\"java\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(String[] args)</span> </span>{\n        <span class=\"hljs-comment\">// 创建mainReactor</span>\n        NioEventLoopGroup boosGroup = <span class=\"hljs-keyword\">new</span> NioEventLoopGroup();\n        <span class=\"hljs-comment\">// 创建工作线程组</span>\n        NioEventLoopGroup workerGroup = <span class=\"hljs-keyword\">new</span> NioEventLoopGroup();\n\n        <span class=\"hljs-keyword\">final</span> ServerBootstrap serverBootstrap = <span class=\"hljs-keyword\">new</span> ServerBootstrap();\n        serverBootstrap \n                 <span class=\"hljs-comment\">// 组装NioEventLoopGroup </span>\n                .group(boosGroup, workerGroup)\n                 <span class=\"hljs-comment\">// 设置channel类型为NIO类型</span>\n                .channel(NioServerSocketChannel.class)\n                <span class=\"hljs-comment\">// 设置连接配置参数</span>\n                .option(ChannelOption.SO_BACKLOG, <span class=\"hljs-number\">1024</span>)\n                .childOption(ChannelOption.SO_KEEPALIVE, <span class=\"hljs-keyword\">true</span>)\n                .childOption(ChannelOption.TCP_NODELAY, <span class=\"hljs-keyword\">true</span>)\n                <span class=\"hljs-comment\">// 配置入站、出站事件handler</span>\n                .childHandler(<span class=\"hljs-keyword\">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() {\n                    <span class=\"hljs-meta\">@Override</span>\n                    <span class=\"hljs-function\"><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">initChannel</span><span class=\"hljs-params\">(NioSocketChannel ch)</span> </span>{\n                        <span class=\"hljs-comment\">// 配置入站、出站事件channel</span>\n                        ch.pipeline().addLast(...);\n                        ch.pipeline().addLast(...);\n                    }\n    });\n\n        <span class=\"hljs-comment\">// 绑定端口</span>\n        <span class=\"hljs-keyword\">int</span> port = <span class=\"hljs-number\">8080</span>;\n        serverBootstrap.bind(port).addListener(future -&gt; {\n            <span class=\"hljs-keyword\">if</span> (future.isSuccess()) {\n                System.out.println(<span class=\"hljs-keyword\">new</span> Date() + <span class=\"hljs-string\">\": 端口[\"</span> + port + <span class=\"hljs-string\">\"]绑定成功!\"</span>);\n            } <span class=\"hljs-keyword\">else</span> {\n                System.err.println(<span class=\"hljs-string\">\"端口[\"</span> + port + <span class=\"hljs-string\">\"]绑定失败!\"</span>);\n            }\n        });\n}\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <ul> \n  <li>基本过程如下：</li> \n  <li>1 初始化创建2个NioEventLoopGroup，其中boosGroup用于Accetpt连接建立事件并分发请求， workerGroup用于处理I/O读写事件和业务逻辑</li> \n  <li>2 基于ServerBootstrap(服务端启动引导类)，配置EventLoopGroup、Channel类型，连接参数、配置入站、出站事件handler</li> \n  <li>3 绑定端口，开始工作</li> \n </ul> \n <p>结合上面的介绍的Netty Reactor模型，介绍服务端Netty的工作架构图：</p> \n <p></p>\n <figure>\n  <img alt=\"服务端Netty Reactor工作架构图\" class=\"lazyload\" data-src=\"https://user-gold-cdn.xitu.io/2018/11/1/166ccbbdc9a7cabe?imageView2/0/w/1280/h/960/ignore-error/1\" data-width=\"1167\" data-height=\"978\">\n  <figcaption></figcaption>\n </figure>\n <p></p> \n <p>server端包含1个Boss NioEventLoopGroup和1个Worker NioEventLoopGroup，NioEventLoopGroup相当于1个事件循环组，这个组里包含多个事件循环NioEventLoop，每个NioEventLoop包含1个selector和1个事件循环线程。</p> \n <p>每个Boss NioEventLoop循环执行的任务包含3步：</p> \n <ul> \n  <li>1 轮询accept事件</li> \n  <li>2 处理accept I/O事件，与Client建立连接，生成NioSocketChannel，并将NioSocketChannel注册到某个Worker NioEventLoop的Selector上 *3 处理任务队列中的任务，runAllTasks。任务队列中的任务包括用户调用eventloop.execute或schedule执行的任务，或者其它线程提交到该eventloop的任务。</li> \n </ul> \n <p>每个Worker NioEventLoop循环执行的任务包含3步：</p> \n <ul> \n  <li>1 轮询read、write事件；</li> \n  <li>2 处I/O事件，即read、write事件，在NioSocketChannel可读、可写事件发生时进行处理</li> \n  <li>3 处理任务队列中的任务，runAllTasks。</li> \n </ul> \n <p>其中任务队列中的task有3种典型使用场景</p> \n <ul> \n  <li>1 用户程序自定义的普通任务</li> \n </ul> \n <pre><code class=\"hljs java copyable\" lang=\"java\">ctx.channel().eventLoop().execute(<span class=\"hljs-keyword\">new</span> Runnable() {\n    <span class=\"hljs-meta\">@Override</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-comment\">//...</span>\n    }\n});\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <ul> \n  <li> <p>2 非当前reactor线程调用channel的各种方法 例如在推送系统的业务线程里面，根据用户的标识，找到对应的channel引用，然后调用write类方法向该用户推送消息，就会进入到这种场景。最终的write会提交到任务队列中后被异步消费。</p> </li> \n  <li> <p>3 用户自定义定时任务</p> </li> \n </ul> \n <pre><code class=\"hljs bash copyable\" lang=\"bash\">ctx.channel().eventLoop().schedule(new <span class=\"hljs-function\"><span class=\"hljs-title\">Runnable</span></span>() {\n    @Override\n    public void <span class=\"hljs-function\"><span class=\"hljs-title\">run</span></span>() {\n\n    }\n}, 60, TimeUnit.SECONDS);\n<span class=\"copy-code-btn\">复制代码</span></code></pre>\n <h1 class=\"heading\" data-id=\"heading-27\">4 总结</h1> \n <p>现在稳定推荐使用的主流版本还是Netty4，Netty5 中使用了 ForkJoinPool，增加了代码的复杂度，但是对性能的改善却不明显，所以这个版本不推荐使用，官网也没有提供下载链接。</p> \n <p>Netty 入门门槛相对较高，其实是因为这方面的资料较少，并不是因为他有多难，大家其实都可以像搞透 Spring 一样搞透 Netty。在学习之前，建议先理解透整个框架原理结构，运行过程，可以少走很多弯路。</p> \n <h1 class=\"heading\" data-id=\"heading-28\">参考</h1> \n <p><a target=\"_blank\" href=\"https://juejin.im/book/5b4bc28bf265da0f60130116?referrer=598ff735f265da3e1c0f9643\" rel=\"\">Netty入门与实战：仿写微信 IM 即时通讯系统</a></p> \n <p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fnetty.io%2F\" rel=\"nofollow noopener noreferrer\">Netty官网</a></p> \n <p><a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fyihongwei.com%2F2014%2F01%2Fnetty-4-x-thread-model%2F\" rel=\"nofollow noopener noreferrer\">Netty 4.x学习笔记 - 线程模型</a></p> \n <p><a target=\"_blank\" href=\"https://juejin.im/book/5b4bc28bf265da0f60130116?referrer=598ff735f265da3e1c0f9643\" rel=\"\">Netty入门与实战</a></p> \n <p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F2965fca6bb8f\" rel=\"nofollow noopener noreferrer\">理解高性能网络模型</a></p> \n <p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwangwei.one%2Fposts%2Fnetty-base-theory-intro.html\" rel=\"nofollow noopener noreferrer\">Netty基本原理介绍</a></p> \n <p><a target=\"_blank\" href=\"https://link.juejin.im?target=https%3A%2F%2Fwww.oreilly.com%2Fprogramming%2Ffree%2Ffiles%2Fsoftware-architecture-patterns.pdf\" rel=\"nofollow noopener noreferrer\">software-architecture-patterns.pdf</a></p> \n <p><a target=\"_blank\" href=\"https://link.juejin.im?target=http%3A%2F%2Fwww.infoq.com%2Fcn%2Farticles%2Fnetty-high-performance\" rel=\"nofollow noopener noreferrer\">Netty高性能之道 —— 李林锋</a></p> \n <p>《Netty In Action》</p> \n <p>《Netty权威指南》</p> \n</div>', '', null, null, 'redis', null, null, '2', '1', '2019-10-16 15:20:52', null, '2019-10-16 15:20:52', '0000');
INSERT INTO `blog` VALUES ('15', '感知哈希算法实现简单图片搜索', '@[TOC](这里写自定义目录标题)\r\n\r\n# 欢迎使用Markdown编辑器\r\n\r\n你好！ 这是你第一次使用 **Markdown编辑器** 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。\r\n\r\n## 新的改变\r\n\r\n我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：\r\n 1. **全新的界面设计** ，将会带来全新的写作体验；\r\n 2. 在创作中心设置你喜爱的代码高亮样式，Markdown **将代码片显示选择的高亮样式** 进行展示；\r\n 3. 增加了 **图片拖拽** 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；\r\n 4. 全新的 **KaTeX数学公式** 语法；\r\n 5. 增加了支持**甘特图的mermaid语法[^1]** 功能；\r\n 6. 增加了 **多屏幕编辑** Markdown文章功能；\r\n 7. 增加了 **焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置** 等功能，功能按钮位于编辑区域与预览区域中间；\r\n 8. 增加了 **检查列表** 功能。\r\n [^1]: [mermaid语法说明](https://mermaidjs.github.io/)\r\n\r\n## 功能快捷键\r\n\r\n撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd>\r\n\r\n重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd>\r\n\r\n加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd>\r\n\r\n斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd>\r\n\r\n标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd>\r\n\r\n无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd>\r\n\r\n有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd>\r\n\r\n检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd>\r\n\r\n插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd>\r\n\r\n插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>\r\n\r\n插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd>\r\n\r\n查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd>\r\n\r\n替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd>\r\n\r\n\r\n## 合理的创建标题，有助于目录的生成\r\n\r\n直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。\r\n输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。\r\n以此类推，我们支持6级标题。有助于使用`TOC`语法后生成一个完美的目录。\r\n\r\n## 如何改变文本的样式\r\n\r\n*强调文本* _强调文本_\r\n\r\n**加粗文本** __加粗文本__\r\n\r\n==标记文本==\r\n\r\n~~删除文本~~\r\n\r\n> 引用文本\r\n\r\nH~2~O is是液体。\r\n\r\n2^10^ 运算结果是 1024.\r\n\r\n## 插入链接与图片\r\n\r\n链接: [link](https://mp.csdn.net).\r\n\r\n图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)\r\n\r\n带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30)\r\n\r\n居中的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)\r\n\r\n居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30)\r\n\r\n当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。\r\n\r\n## 如何插入一段漂亮的代码片\r\n\r\n去[博客设置](https://mp.csdn.net/configure)页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 `代码片`.\r\n```javascript\r\n// An highlighted block\r\nvar foo = \'bar\';\r\n```\r\n\r\n## 生成一个适合你的列表\r\n\r\n- 项目\r\n  - 项目\r\n    - 项目\r\n\r\n1. 项目1\r\n2. 项目2\r\n3. 项目3\r\n\r\n- [ ] 计划任务\r\n- [x] 完成任务\r\n\r\n## 创建一个表格\r\n一个简单的表格是这么创建的：\r\n项目     | Value\r\n-------- | -----\r\n电脑  | $1600\r\n手机  | $12\r\n导管  | $1\r\n\r\n### 设定内容居中、居左、居右\r\n使用`:---------:`居中\r\n使用`:----------`居左\r\n使用`----------:`居右\r\n| 第一列       | 第二列         | 第三列        |\r\n|:-----------:| -------------:|:-------------|\r\n| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 | \r\n\r\n### SmartyPants\r\nSmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：\r\n|    TYPE   |ASCII                          |HTML                         \r\n|----------------|-------------------------------|-----------------------------|\r\n|Single backticks|`\'Isn\'t this fun?\'`            |\'Isn\'t this fun?\'            |\r\n|Quotes          |`\"Isn\'t this fun?\"`            |\"Isn\'t this fun?\"            |\r\n|Dashes          |`-- is en-dash, --- is em-dash`|-- is en-dash, --- is em-dash|\r\n\r\n## 创建一个自定义列表\r\nMarkdown\r\n:  Text-to-HTML conversion tool\r\n\r\nAuthors\r\n:  John\r\n:  Luke\r\n\r\n## 如何创建一个注脚\r\n\r\n一个具有注脚的文本。[^2]\r\n\r\n[^2]: 注脚的解释\r\n\r\n##  注释也是必不可少的\r\n\r\nMarkdown将文本转换为 HTML。\r\n\r\n*[HTML]:   超文本标记语言\r\n\r\n## KaTeX数学公式\r\n\r\n您可以使用渲染LaTeX数学表达式 [KaTeX](https://khan.github.io/KaTeX/):\r\n\r\nGamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall\r\nn\\in\\mathbb N$ 是通过欧拉积分\r\n\r\n$$\r\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.\r\n$$\r\n\r\n> 你可以找到更多关于的信息 **LaTeX** 数学表达式[here][1].\r\n\r\n## 新的甘特图功能，丰富你的文章\r\n\r\n```mermaid\r\ngantt\r\n        dateFormat  YYYY-MM-DD\r\n        title Adding GANTT diagram functionality to mermaid\r\n        section 现有任务\r\n        已完成               :done,    des1, 2014-01-06,2014-01-08\r\n        进行中               :active,  des2, 2014-01-09, 3d\r\n        计划一               :         des3, after des2, 5d\r\n        计划二               :         des4, after des3, 5d\r\n```\r\n- 关于 **甘特图** 语法，参考 [这儿][2],\r\n\r\n## UML 图表\r\n\r\n可以使用UML图表进行渲染。 [Mermaid](https://mermaidjs.github.io/). 例如下面产生的一个序列图：\r\n\r\n```mermaid\r\nsequenceDiagram\r\n张三 ->> 李四: 你好！李四, 最近怎么样?\r\n李四-->>王五: 你最近怎么样，王五？\r\n李四--x 张三: 我很好，谢谢!\r\n李四-x 王五: 我很好，谢谢!\r\nNote right of 王五: 李四想了很长时间, 文字太长了<br/>不适合放在一行.\r\n\r\n李四-->>张三: 打量着王五...\r\n张三->>王五: 很好... 王五, 你怎么样?\r\n```\r\n\r\n这将产生一个流程图。:\r\n\r\n```mermaid\r\ngraph LR\r\nA[长方形] -- 链接 --> B((圆))\r\nA --> C(圆角长方形)\r\nB --> D{菱形}\r\nC --> D\r\n```\r\n\r\n- 关于 **Mermaid** 语法，参考 [这儿][3],\r\n\r\n## FLowchart流程图\r\n\r\n我们依旧会支持flowchart的流程图：\r\n```mermaid\r\nflowchat\r\nst=>start: 开始\r\ne=>end: 结束\r\nop=>operation: 我的操作\r\ncond=>condition: 确认？\r\n\r\nst->op->cond\r\ncond(yes)->e\r\ncond(no)->op\r\n```\r\n\r\n- 关于 **Flowchart流程图** 语法，参考 [这儿][4].', '<p>@<a href=\"%E8%BF%99%E9%87%8C%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95%E6%A0%87%E9%A2%98\">TOC</a></p>\n<h1 id=\"-markdown-\">欢迎使用Markdown编辑器</h1>\n<p>你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。</p>\n<h2 id=\"-\">新的改变</h2>\n<p>我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p>\n<ol>\n<li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li>\n<li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li>\n<li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li>\n<li>全新的 <strong>KaTeX数学公式</strong> 语法；</li>\n<li>增加了支持<strong>甘特图的mermaid语法<a href=\"%5Bmermaid%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E%5D(https://mermaidjs.github.io/)\">^1</a></strong> 功能；</li>\n<li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li>\n<li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li>\n<li>增加了 <strong>检查列表</strong> 功能。</li>\n</ol>\n<h2 id=\"-\">功能快捷键</h2>\n<p>撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd></p>\n<p>重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd></p>\n<p>加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd></p>\n<p>斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd></p>\n<p>标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd></p>\n<p>无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd></p>\n<p>有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd></p>\n<p>检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd></p>\n<p>插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd></p>\n<p>插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd></p>\n<p>插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd></p>\n<p>查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd></p>\n<p>替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd></p>\n<h2 id=\"-\">合理的创建标题，有助于目录的生成</h2>\n<p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。\n输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。\n以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p>\n<h2 id=\"-\">如何改变文本的样式</h2>\n<p><em>强调文本</em> <em>强调文本</em></p>\n<p><strong>加粗文本</strong> <strong>加粗文本</strong></p>\n<p>==标记文本==</p>\n<p><del>删除文本</del></p>\n<blockquote>\n<p>引用文本</p>\n</blockquote>\n<p>H~2~O is是液体。</p>\n<p>2^10^ 运算结果是 1024.</p>\n<h2 id=\"-\">插入链接与图片</h2>\n<p>链接: <a href=\"https://mp.csdn.net\">link</a>.</p>\n<p>图片: <img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\" alt=\"Alt\"></p>\n<p>带尺寸的图片: ![Alt](<a href=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</a> =30x30)</p>\n<p>居中的图片: <img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\" alt=\"Alt\"></p>\n<p>居中并且带尺寸的图片: ![Alt](<a href=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</a> =30x30)</p>\n<p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p>\n<h2 id=\"-\">如何插入一段漂亮的代码片</h2>\n<p>去<a href=\"https://mp.csdn.net/configure\">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// An highlighted block</span>\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-string\">\'bar\'</span>;</code></pre>\n<h2 id=\"-\">生成一个适合你的列表</h2>\n<ul>\n<li>项目<ul>\n<li>项目<ul>\n<li>项目</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>项目1</li>\n<li>项目2</li>\n<li>项目3</li>\n</ol>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 计划任务</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 完成任务</li>\n</ul>\n<h2 id=\"-\">创建一个表格</h2>\n<p>一个简单的表格是这么创建的：\n项目     | Value\n-------- | -----\n电脑  | $1600\n手机  | $12\n导管  | $1</p>\n<h3 id=\"-\">设定内容居中、居左、居右</h3>\n<p>使用<code>:---------:</code>居中\n使用<code>:----------</code>居左\n使用<code>----------:</code>居右\n| 第一列       | 第二列         | 第三列        |\n|:-----------:| -------------:|:-------------|\n| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 | </p>\n<h3 id=\"smartypants\">SmartyPants</h3>\n<p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：\n|    TYPE   |ASCII                          |HTML<br>|----------------|-------------------------------|-----------------------------|\n|Single backticks|<code>&#39;Isn&#39;t this fun?&#39;</code>            |&#39;Isn&#39;t this fun?&#39;            |\n|Quotes          |<code>&quot;Isn&#39;t this fun?&quot;</code>            |&quot;Isn&#39;t this fun?&quot;            |\n|Dashes          |<code>-- is en-dash, --- is em-dash</code>|-- is en-dash, --- is em-dash|</p>\n<h2 id=\"-\">创建一个自定义列表</h2>\n<p>Markdown\n:  Text-to-HTML conversion tool</p>\n<p>Authors\n:  John\n:  Luke</p>\n<h2 id=\"-\">如何创建一个注脚</h2>\n<p>一个具有注脚的文本。<a href=\"%E6%B3%A8%E8%84%9A%E7%9A%84%E8%A7%A3%E9%87%8A\">^2</a></p>\n<h2 id=\"-\">注释也是必不可少的</h2>\n<p>Markdown将文本转换为 HTML。</p>\n<p>*[HTML]:   超文本标记语言</p>\n<h2 id=\"katex-\">KaTeX数学公式</h2>\n<p>您可以使用渲染LaTeX数学表达式 <a href=\"https://khan.github.io/KaTeX/\">KaTeX</a>:</p>\n<p>Gamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall\nn\\in\\mathbb N$ 是通过欧拉积分</p>\n<p>$$\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt,.\n$$</p>\n<blockquote>\n<p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式[here][1].</p>\n</blockquote>\n<h2 id=\"-\">新的甘特图功能，丰富你的文章</h2>\n<pre><code class=\"language-mermaid\">gantt\n        dateFormat  YYYY-MM-DD\n        title Adding GANTT diagram functionality to mermaid\n        section 现有任务\n        已完成               :done,    des1, <span class=\"hljs-number\">2014</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-06</span>,<span class=\"hljs-number\">2014</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-08</span>\n        进行中               :active,  des2, <span class=\"hljs-number\">2014</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-09</span>, <span class=\"hljs-number\">3d</span>\n        计划一               :         des3, after des2, <span class=\"hljs-number\">5d</span>\n        计划二               :         des4, after des3, <span class=\"hljs-number\">5d</span></code></pre>\n<ul>\n<li>关于 <strong>甘特图</strong> 语法，参考 [这儿][2],</li>\n</ul>\n<h2 id=\"uml-\">UML 图表</h2>\n<p>可以使用UML图表进行渲染。 <a href=\"https://mermaidjs.github.io/\">Mermaid</a>. 例如下面产生的一个序列图：</p>\n<pre><code class=\"language-mermaid\">sequenceDiagram\n张三 -<span class=\"hljs-meta\">&gt;&gt; </span>李四: 你好！李四, 最近怎么样?\n李四--&gt;&gt;王五: 你最近怎么样，王五？\n李四--x 张三: 我很好，谢谢!\n李四-x 王五: 我很好，谢谢!\nNote right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.\n\n李四--<span class=\"hljs-meta\">&gt;&gt;</span>张三: 打量着王五...\n张三-<span class=\"hljs-meta\">&gt;&gt;</span>王五: 很好... 王五, 你怎么样?</code></pre>\n<p>这将产生一个流程图。:</p>\n<pre><code class=\"language-mermaid\">graph LR\nA[长方形] -- 链接 --&gt; B((圆))\nA --&gt; C(圆角长方形)\nB --&gt; D{菱形}\nC --&gt; D</code></pre>\n<ul>\n<li>关于 <strong>Mermaid</strong> 语法，参考 [这儿][3],</li>\n</ul>\n<h2 id=\"flowchart-\">FLowchart流程图</h2>\n<p>我们依旧会支持flowchart的流程图：</p>\n<pre><code class=\"language-mermaid\">flowchat\nst=&gt;start: 开始\ne=&gt;end: 结束\nop=&gt;operation: 我的操作\ncond=&gt;condition: 确认？\n\nst-&gt;op-&gt;cond\ncond(yes)-&gt;e\ncond(no)-&gt;op</code></pre>\n<ul>\n<li>关于 <strong>Flowchart流程图</strong> 语法，参考 [这儿][4].</li>\n</ul>\n', 'GitHub', 'vue', 'test,JAVASE', '1', 'zzz', '', '2', '1', '2019-10-17 11:09:03', null, '2019-10-17 11:09:03', '0000');
INSERT INTO `blog` VALUES ('16', '设计模式--Strategy - ReDisaster的博客 - CSDN博客', '@[TOC](这里写自定义目录标题)\r\n\r\n# 欢迎使用Markdown编辑器\r\n\r\n你好！ 这是你第一次使用 **Markdown编辑器** 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。\r\n\r\n## 新的改变\r\n\r\n我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：\r\n 1. **全新的界面设计** ，将会带来全新的写作体验；\r\n 2. 在创作中心设置你喜爱的代码高亮样式，Markdown **将代码片显示选择的高亮样式** 进行展示；\r\n 3. 增加了 **图片拖拽** 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；\r\n 4. 全新的 **KaTeX数学公式** 语法；\r\n 5. 增加了支持**甘特图的mermaid语法[^1]** 功能；\r\n 6. 增加了 **多屏幕编辑** Markdown文章功能；\r\n 7. 增加了 **焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置** 等功能，功能按钮位于编辑区域与预览区域中间；\r\n 8. 增加了 **检查列表** 功能。\r\n [^1]: [mermaid语法说明](https://mermaidjs.github.io/)\r\n\r\n## 功能快捷键\r\n\r\n撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd>\r\n\r\n重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd>\r\n\r\n加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd>\r\n\r\n斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd>\r\n\r\n标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd>\r\n\r\n无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd>\r\n\r\n有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd>\r\n\r\n检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd>\r\n\r\n插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd>\r\n\r\n插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>\r\n\r\n插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd>\r\n\r\n查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd>\r\n\r\n替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd>\r\n\r\n\r\n## 合理的创建标题，有助于目录的生成\r\n\r\n直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。\r\n输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。\r\n以此类推，我们支持6级标题。有助于使用`TOC`语法后生成一个完美的目录。\r\n\r\n## 如何改变文本的样式\r\n\r\n*强调文本* _强调文本_\r\n\r\n**加粗文本** __加粗文本__\r\n\r\n==标记文本==\r\n\r\n~~删除文本~~\r\n\r\n> 引用文本\r\n\r\nH~2~O is是液体。\r\n\r\n2^10^ 运算结果是 1024.\r\n\r\n## 插入链接与图片\r\n\r\n链接: [link](https://mp.csdn.net).\r\n\r\n图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)\r\n\r\n带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30)\r\n\r\n居中的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)\r\n\r\n居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30)\r\n\r\n当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。\r\n\r\n## 如何插入一段漂亮的代码片\r\n\r\n去[博客设置](https://mp.csdn.net/configure)页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 `代码片`.\r\n```javascript\r\n// An highlighted block\r\nvar foo = \'bar\';\r\n```\r\n\r\n## 生成一个适合你的列表\r\n\r\n- 项目\r\n  - 项目\r\n    - 项目\r\n\r\n1. 项目1\r\n2. 项目2\r\n3. 项目3\r\n\r\n- [ ] 计划任务\r\n- [x] 完成任务\r\n\r\n## 创建一个表格\r\n一个简单的表格是这么创建的：\r\n项目     | Value\r\n-------- | -----\r\n电脑  | $1600\r\n手机  | $12\r\n导管  | $1\r\n\r\n### 设定内容居中、居左、居右\r\n使用`:---------:`居中\r\n使用`:----------`居左\r\n使用`----------:`居右\r\n| 第一列       | 第二列         | 第三列        |\r\n|:-----------:| -------------:|:-------------|\r\n| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 | \r\n\r\n### SmartyPants\r\nSmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：\r\n|    TYPE   |ASCII                          |HTML                         \r\n|----------------|-------------------------------|-----------------------------|\r\n|Single backticks|`\'Isn\'t this fun?\'`            |\'Isn\'t this fun?\'            |\r\n|Quotes          |`\"Isn\'t this fun?\"`            |\"Isn\'t this fun?\"            |\r\n|Dashes          |`-- is en-dash, --- is em-dash`|-- is en-dash, --- is em-dash|\r\n\r\n## 创建一个自定义列表\r\nMarkdown\r\n:  Text-to-HTML conversion tool\r\n\r\nAuthors\r\n:  John\r\n:  Luke\r\n\r\n## 如何创建一个注脚\r\n\r\n一个具有注脚的文本。[^2]\r\n\r\n[^2]: 注脚的解释\r\n\r\n##  注释也是必不可少的\r\n\r\nMarkdown将文本转换为 HTML。\r\n\r\n*[HTML]:   超文本标记语言\r\n\r\n## KaTeX数学公式\r\n\r\n您可以使用渲染LaTeX数学表达式 [KaTeX](https://khan.github.io/KaTeX/):\r\n\r\nGamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall\r\nn\\in\\mathbb N$ 是通过欧拉积分\r\n\r\n$$\r\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.\r\n$$\r\n\r\n> 你可以找到更多关于的信息 **LaTeX** 数学表达式[here][1].\r\n\r\n## 新的甘特图功能，丰富你的文章\r\n\r\n```mermaid\r\ngantt\r\n        dateFormat  YYYY-MM-DD\r\n        title Adding GANTT diagram functionality to mermaid\r\n        section 现有任务\r\n        已完成               :done,    des1, 2014-01-06,2014-01-08\r\n        进行中               :active,  des2, 2014-01-09, 3d\r\n        计划一               :         des3, after des2, 5d\r\n        计划二               :         des4, after des3, 5d\r\n```\r\n- 关于 **甘特图** 语法，参考 [这儿][2],\r\n\r\n## UML 图表\r\n\r\n可以使用UML图表进行渲染。 [Mermaid](https://mermaidjs.github.io/). 例如下面产生的一个序列图：\r\n\r\n```mermaid\r\nsequenceDiagram\r\n张三 ->> 李四: 你好！李四, 最近怎么样?\r\n李四-->>王五: 你最近怎么样，王五？\r\n李四--x 张三: 我很好，谢谢!\r\n李四-x 王五: 我很好，谢谢!\r\nNote right of 王五: 李四想了很长时间, 文字太长了<br/>不适合放在一行.\r\n\r\n李四-->>张三: 打量着王五...\r\n张三->>王五: 很好... 王五, 你怎么样?\r\n```\r\n\r\n这将产生一个流程图。:\r\n\r\n```mermaid\r\ngraph LR\r\nA[长方形] -- 链接 --> B((圆))\r\nA --> C(圆角长方形)\r\nB --> D{菱形}\r\nC --> D\r\n```\r\n\r\n- 关于 **Mermaid** 语法，参考 [这儿][3],\r\n\r\n## FLowchart流程图\r\n\r\n我们依旧会支持flowchart的流程图：\r\n```mermaid\r\nflowchat\r\nst=>start: 开始\r\ne=>end: 结束\r\nop=>operation: 我的操作\r\ncond=>condition: 确认？\r\n\r\nst->op->cond\r\ncond(yes)->e\r\ncond(no)->op\r\n```\r\n\r\n- 关于 **Flowchart流程图** 语法，参考 [这儿][4].', '<p>@<a href=\"%E8%BF%99%E9%87%8C%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95%E6%A0%87%E9%A2%98\">TOC</a></p>\n<h1 id=\"-markdown-\">欢迎使用Markdown编辑器</h1>\n<p>你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。</p>\n<h2 id=\"-\">新的改变</h2>\n<p>我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p>\n<ol>\n<li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li>\n<li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li>\n<li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li>\n<li>全新的 <strong>KaTeX数学公式</strong> 语法；</li>\n<li>增加了支持<strong>甘特图的mermaid语法<a href=\"%5Bmermaid%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E%5D(https://mermaidjs.github.io/)\">^1</a></strong> 功能；</li>\n<li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li>\n<li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li>\n<li>增加了 <strong>检查列表</strong> 功能。</li>\n</ol>\n<h2 id=\"-\">功能快捷键</h2>\n<p>撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd></p>\n<p>重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd></p>\n<p>加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd></p>\n<p>斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd></p>\n<p>标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd></p>\n<p>无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd></p>\n<p>有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd></p>\n<p>检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd></p>\n<p>插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd></p>\n<p>插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd></p>\n<p>插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd></p>\n<p>查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd></p>\n<p>替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd></p>\n<h2 id=\"-\">合理的创建标题，有助于目录的生成</h2>\n<p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。\n输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。\n以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p>\n<h2 id=\"-\">如何改变文本的样式</h2>\n<p><em>强调文本</em> <em>强调文本</em></p>\n<p><strong>加粗文本</strong> <strong>加粗文本</strong></p>\n<p>==标记文本==</p>\n<p><del>删除文本</del></p>\n<blockquote>\n<p>引用文本</p>\n</blockquote>\n<p>H~2~O is是液体。</p>\n<p>2^10^ 运算结果是 1024.</p>\n<h2 id=\"-\">插入链接与图片</h2>\n<p>链接: <a href=\"https://mp.csdn.net\">link</a>.</p>\n<p>图片: <img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\" alt=\"Alt\"></p>\n<p>带尺寸的图片: ![Alt](<a href=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</a> =30x30)</p>\n<p>居中的图片: <img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\" alt=\"Alt\"></p>\n<p>居中并且带尺寸的图片: ![Alt](<a href=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</a> =30x30)</p>\n<p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p>\n<h2 id=\"-\">如何插入一段漂亮的代码片</h2>\n<p>去<a href=\"https://mp.csdn.net/configure\">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// An highlighted block</span>\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-string\">\'bar\'</span>;</code></pre>\n<h2 id=\"-\">生成一个适合你的列表</h2>\n<ul>\n<li>项目<ul>\n<li>项目<ul>\n<li>项目</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>项目1</li>\n<li>项目2</li>\n<li>项目3</li>\n</ol>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 计划任务</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 完成任务</li>\n</ul>\n<h2 id=\"-\">创建一个表格</h2>\n<p>一个简单的表格是这么创建的：\n项目     | Value\n-------- | -----\n电脑  | $1600\n手机  | $12\n导管  | $1</p>\n<h3 id=\"-\">设定内容居中、居左、居右</h3>\n<p>使用<code>:---------:</code>居中\n使用<code>:----------</code>居左\n使用<code>----------:</code>居右\n| 第一列       | 第二列         | 第三列        |\n|:-----------:| -------------:|:-------------|\n| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 | </p>\n<h3 id=\"smartypants\">SmartyPants</h3>\n<p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：\n|    TYPE   |ASCII                          |HTML<br>|----------------|-------------------------------|-----------------------------|\n|Single backticks|<code>&#39;Isn&#39;t this fun?&#39;</code>            |&#39;Isn&#39;t this fun?&#39;            |\n|Quotes          |<code>&quot;Isn&#39;t this fun?&quot;</code>            |&quot;Isn&#39;t this fun?&quot;            |\n|Dashes          |<code>-- is en-dash, --- is em-dash</code>|-- is en-dash, --- is em-dash|</p>\n<h2 id=\"-\">创建一个自定义列表</h2>\n<p>Markdown\n:  Text-to-HTML conversion tool</p>\n<p>Authors\n:  John\n:  Luke</p>\n<h2 id=\"-\">如何创建一个注脚</h2>\n<p>一个具有注脚的文本。<a href=\"%E6%B3%A8%E8%84%9A%E7%9A%84%E8%A7%A3%E9%87%8A\">^2</a></p>\n<h2 id=\"-\">注释也是必不可少的</h2>\n<p>Markdown将文本转换为 HTML。</p>\n<p>*[HTML]:   超文本标记语言</p>\n<h2 id=\"katex-\">KaTeX数学公式</h2>\n<p>您可以使用渲染LaTeX数学表达式 <a href=\"https://khan.github.io/KaTeX/\">KaTeX</a>:</p>\n<p>Gamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall\nn\\in\\mathbb N$ 是通过欧拉积分</p>\n<p>$$\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt,.\n$$</p>\n<blockquote>\n<p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式[here][1].</p>\n</blockquote>\n<h2 id=\"-\">新的甘特图功能，丰富你的文章</h2>\n<pre><code class=\"language-mermaid\">gantt\n        dateFormat  YYYY-MM-DD\n        title Adding GANTT diagram functionality to mermaid\n        section 现有任务\n        已完成               :done,    des1, <span class=\"hljs-number\">2014</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-06</span>,<span class=\"hljs-number\">2014</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-08</span>\n        进行中               :active,  des2, <span class=\"hljs-number\">2014</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-09</span>, <span class=\"hljs-number\">3d</span>\n        计划一               :         des3, after des2, <span class=\"hljs-number\">5d</span>\n        计划二               :         des4, after des3, <span class=\"hljs-number\">5d</span></code></pre>\n<ul>\n<li>关于 <strong>甘特图</strong> 语法，参考 [这儿][2],</li>\n</ul>\n<h2 id=\"uml-\">UML 图表</h2>\n<p>可以使用UML图表进行渲染。 <a href=\"https://mermaidjs.github.io/\">Mermaid</a>. 例如下面产生的一个序列图：</p>\n<pre><code class=\"language-mermaid\">sequenceDiagram\n张三 -<span class=\"hljs-meta\">&gt;&gt; </span>李四: 你好！李四, 最近怎么样?\n李四--&gt;&gt;王五: 你最近怎么样，王五？\n李四--x 张三: 我很好，谢谢!\n李四-x 王五: 我很好，谢谢!\nNote right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.\n\n李四--<span class=\"hljs-meta\">&gt;&gt;</span>张三: 打量着王五...\n张三-<span class=\"hljs-meta\">&gt;&gt;</span>王五: 很好... 王五, 你怎么样?</code></pre>\n<p>这将产生一个流程图。:</p>\n<pre><code class=\"language-mermaid\">graph LR\nA[长方形] -- 链接 --&gt; B((圆))\nA --&gt; C(圆角长方形)\nB --&gt; D{菱形}\nC --&gt; D</code></pre>\n<ul>\n<li>关于 <strong>Mermaid</strong> 语法，参考 [这儿][3],</li>\n</ul>\n<h2 id=\"flowchart-\">FLowchart流程图</h2>\n<p>我们依旧会支持flowchart的流程图：</p>\n<pre><code class=\"language-mermaid\">flowchat\nst=&gt;start: 开始\ne=&gt;end: 结束\nop=&gt;operation: 我的操作\ncond=&gt;condition: 确认？\n\nst-&gt;op-&gt;cond\ncond(yes)-&gt;e\ncond(no)-&gt;op</code></pre>\n<ul>\n<li>关于 <strong>Flowchart流程图</strong> 语法，参考 [这儿][4].</li>\n</ul>\n', 'GitHub', 'vue', 'test,JAVASE', '1', 'zzz', '', '2', '1', '2019-10-17 11:09:11', null, '2019-10-17 11:09:11', '0000');
INSERT INTO `blog` VALUES ('17', 'windows下redis集群安装（V3.2.100）单机模式', '@[TOC](这里写自定义目录标题)\r\n\r\n# 欢迎使用Markdown编辑器\r\n\r\n你好！ 这是你第一次使用 **Markdown编辑器** 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。\r\n\r\n## 新的改变\r\n\r\n我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：\r\n 1. **全新的界面设计** ，将会带来全新的写作体验；\r\n 2. 在创作中心设置你喜爱的代码高亮样式，Markdown **将代码片显示选择的高亮样式** 进行展示；\r\n 3. 增加了 **图片拖拽** 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；\r\n 4. 全新的 **KaTeX数学公式** 语法；\r\n 5. 增加了支持**甘特图的mermaid语法[^1]** 功能；\r\n 6. 增加了 **多屏幕编辑** Markdown文章功能；\r\n 7. 增加了 **焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置** 等功能，功能按钮位于编辑区域与预览区域中间；\r\n 8. 增加了 **检查列表** 功能。\r\n [^1]: [mermaid语法说明](https://mermaidjs.github.io/)\r\n\r\n## 功能快捷键\r\n\r\n撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd>\r\n\r\n重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd>\r\n\r\n加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd>\r\n\r\n斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd>\r\n\r\n标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd>\r\n\r\n无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd>\r\n\r\n有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd>\r\n\r\n检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd>\r\n\r\n插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd>\r\n\r\n插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>\r\n\r\n插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd>\r\n\r\n查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd>\r\n\r\n替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd>\r\n\r\n\r\n## 合理的创建标题，有助于目录的生成\r\n\r\n直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。\r\n输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。\r\n以此类推，我们支持6级标题。有助于使用`TOC`语法后生成一个完美的目录。\r\n\r\n## 如何改变文本的样式\r\n\r\n*强调文本* _强调文本_\r\n\r\n**加粗文本** __加粗文本__\r\n\r\n==标记文本==\r\n\r\n~~删除文本~~\r\n\r\n> 引用文本\r\n\r\nH~2~O is是液体。\r\n\r\n2^10^ 运算结果是 1024.\r\n\r\n## 插入链接与图片\r\n\r\n链接: [link](https://mp.csdn.net).\r\n\r\n图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)\r\n\r\n带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30)\r\n\r\n居中的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)\r\n\r\n居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30)\r\n\r\n当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。\r\n\r\n## 如何插入一段漂亮的代码片\r\n\r\n去[博客设置](https://mp.csdn.net/configure)页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 `代码片`.\r\n```javascript\r\n// An highlighted block\r\nvar foo = \'bar\';\r\n```\r\n\r\n## 生成一个适合你的列表\r\n\r\n- 项目\r\n  - 项目\r\n    - 项目\r\n\r\n1. 项目1\r\n2. 项目2\r\n3. 项目3\r\n\r\n- [ ] 计划任务\r\n- [x] 完成任务\r\n\r\n## 创建一个表格\r\n一个简单的表格是这么创建的：\r\n项目     | Value\r\n-------- | -----\r\n电脑  | $1600\r\n手机  | $12\r\n导管  | $1\r\n\r\n### 设定内容居中、居左、居右\r\n使用`:---------:`居中\r\n使用`:----------`居左\r\n使用`----------:`居右\r\n| 第一列       | 第二列         | 第三列        |\r\n|:-----------:| -------------:|:-------------|\r\n| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 | \r\n\r\n### SmartyPants\r\nSmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：\r\n|    TYPE   |ASCII                          |HTML                         \r\n|----------------|-------------------------------|-----------------------------|\r\n|Single backticks|`\'Isn\'t this fun?\'`            |\'Isn\'t this fun?\'            |\r\n|Quotes          |`\"Isn\'t this fun?\"`            |\"Isn\'t this fun?\"            |\r\n|Dashes          |`-- is en-dash, --- is em-dash`|-- is en-dash, --- is em-dash|\r\n\r\n## 创建一个自定义列表\r\nMarkdown\r\n:  Text-to-HTML conversion tool\r\n\r\nAuthors\r\n:  John\r\n:  Luke\r\n\r\n## 如何创建一个注脚\r\n\r\n一个具有注脚的文本。[^2]\r\n\r\n[^2]: 注脚的解释\r\n\r\n##  注释也是必不可少的\r\n\r\nMarkdown将文本转换为 HTML。\r\n\r\n*[HTML]:   超文本标记语言\r\n\r\n## KaTeX数学公式\r\n\r\n您可以使用渲染LaTeX数学表达式 [KaTeX](https://khan.github.io/KaTeX/):\r\n\r\nGamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall\r\nn\\in\\mathbb N$ 是通过欧拉积分\r\n\r\n$$\r\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.\r\n$$\r\n\r\n> 你可以找到更多关于的信息 **LaTeX** 数学表达式[here][1].\r\n\r\n## 新的甘特图功能，丰富你的文章\r\n\r\n```mermaid\r\ngantt\r\n        dateFormat  YYYY-MM-DD\r\n        title Adding GANTT diagram functionality to mermaid\r\n        section 现有任务\r\n        已完成               :done,    des1, 2014-01-06,2014-01-08\r\n        进行中               :active,  des2, 2014-01-09, 3d\r\n        计划一               :         des3, after des2, 5d\r\n        计划二               :         des4, after des3, 5d\r\n```\r\n- 关于 **甘特图** 语法，参考 [这儿][2],\r\n\r\n## UML 图表\r\n\r\n可以使用UML图表进行渲染。 [Mermaid](https://mermaidjs.github.io/). 例如下面产生的一个序列图：\r\n\r\n```mermaid\r\nsequenceDiagram\r\n张三 ->> 李四: 你好！李四, 最近怎么样?\r\n李四-->>王五: 你最近怎么样，王五？\r\n李四--x 张三: 我很好，谢谢!\r\n李四-x 王五: 我很好，谢谢!\r\nNote right of 王五: 李四想了很长时间, 文字太长了<br/>不适合放在一行.\r\n\r\n李四-->>张三: 打量着王五...\r\n张三->>王五: 很好... 王五, 你怎么样?\r\n```\r\n\r\n这将产生一个流程图。:\r\n\r\n```mermaid\r\ngraph LR\r\nA[长方形] -- 链接 --> B((圆))\r\nA --> C(圆角长方形)\r\nB --> D{菱形}\r\nC --> D\r\n```\r\n\r\n- 关于 **Mermaid** 语法，参考 [这儿][3],\r\n\r\n## FLowchart流程图\r\n\r\n我们依旧会支持flowchart的流程图：\r\n```mermaid\r\nflowchat\r\nst=>start: 开始\r\ne=>end: 结束\r\nop=>operation: 我的操作\r\ncond=>condition: 确认？\r\n\r\nst->op->cond\r\ncond(yes)->e\r\ncond(no)->op\r\n```\r\n\r\n- 关于 **Flowchart流程图** 语法，参考 [这儿][4].', '<p>@<a href=\"%E8%BF%99%E9%87%8C%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95%E6%A0%87%E9%A2%98\">TOC</a></p>\n<h1 id=\"-markdown-\">欢迎使用Markdown编辑器</h1>\n<p>你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。</p>\n<h2 id=\"-\">新的改变</h2>\n<p>我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p>\n<ol>\n<li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li>\n<li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li>\n<li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li>\n<li>全新的 <strong>KaTeX数学公式</strong> 语法；</li>\n<li>增加了支持<strong>甘特图的mermaid语法<a href=\"%5Bmermaid%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E%5D(https://mermaidjs.github.io/)\">^1</a></strong> 功能；</li>\n<li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li>\n<li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li>\n<li>增加了 <strong>检查列表</strong> 功能。</li>\n</ol>\n<h2 id=\"-\">功能快捷键</h2>\n<p>撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd></p>\n<p>重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd></p>\n<p>加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd></p>\n<p>斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd></p>\n<p>标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd></p>\n<p>无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd></p>\n<p>有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd></p>\n<p>检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd></p>\n<p>插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd></p>\n<p>插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd></p>\n<p>插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd></p>\n<p>查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd></p>\n<p>替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd></p>\n<h2 id=\"-\">合理的创建标题，有助于目录的生成</h2>\n<p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。\n输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。\n以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p>\n<h2 id=\"-\">如何改变文本的样式</h2>\n<p><em>强调文本</em> <em>强调文本</em></p>\n<p><strong>加粗文本</strong> <strong>加粗文本</strong></p>\n<p>==标记文本==</p>\n<p><del>删除文本</del></p>\n<blockquote>\n<p>引用文本</p>\n</blockquote>\n<p>H~2~O is是液体。</p>\n<p>2^10^ 运算结果是 1024.</p>\n<h2 id=\"-\">插入链接与图片</h2>\n<p>链接: <a href=\"https://mp.csdn.net\">link</a>.</p>\n<p>图片: <img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\" alt=\"Alt\"></p>\n<p>带尺寸的图片: ![Alt](<a href=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</a> =30x30)</p>\n<p>居中的图片: <img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\" alt=\"Alt\"></p>\n<p>居中并且带尺寸的图片: ![Alt](<a href=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</a> =30x30)</p>\n<p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p>\n<h2 id=\"-\">如何插入一段漂亮的代码片</h2>\n<p>去<a href=\"https://mp.csdn.net/configure\">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// An highlighted block</span>\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-string\">\'bar\'</span>;</code></pre>\n<h2 id=\"-\">生成一个适合你的列表</h2>\n<ul>\n<li>项目<ul>\n<li>项目<ul>\n<li>项目</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>项目1</li>\n<li>项目2</li>\n<li>项目3</li>\n</ol>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 计划任务</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 完成任务</li>\n</ul>\n<h2 id=\"-\">创建一个表格</h2>\n<p>一个简单的表格是这么创建的：\n项目     | Value\n-------- | -----\n电脑  | $1600\n手机  | $12\n导管  | $1</p>\n<h3 id=\"-\">设定内容居中、居左、居右</h3>\n<p>使用<code>:---------:</code>居中\n使用<code>:----------</code>居左\n使用<code>----------:</code>居右\n| 第一列       | 第二列         | 第三列        |\n|:-----------:| -------------:|:-------------|\n| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 | </p>\n<h3 id=\"smartypants\">SmartyPants</h3>\n<p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：\n|    TYPE   |ASCII                          |HTML<br>|----------------|-------------------------------|-----------------------------|\n|Single backticks|<code>&#39;Isn&#39;t this fun?&#39;</code>            |&#39;Isn&#39;t this fun?&#39;            |\n|Quotes          |<code>&quot;Isn&#39;t this fun?&quot;</code>            |&quot;Isn&#39;t this fun?&quot;            |\n|Dashes          |<code>-- is en-dash, --- is em-dash</code>|-- is en-dash, --- is em-dash|</p>\n<h2 id=\"-\">创建一个自定义列表</h2>\n<p>Markdown\n:  Text-to-HTML conversion tool</p>\n<p>Authors\n:  John\n:  Luke</p>\n<h2 id=\"-\">如何创建一个注脚</h2>\n<p>一个具有注脚的文本。<a href=\"%E6%B3%A8%E8%84%9A%E7%9A%84%E8%A7%A3%E9%87%8A\">^2</a></p>\n<h2 id=\"-\">注释也是必不可少的</h2>\n<p>Markdown将文本转换为 HTML。</p>\n<p>*[HTML]:   超文本标记语言</p>\n<h2 id=\"katex-\">KaTeX数学公式</h2>\n<p>您可以使用渲染LaTeX数学表达式 <a href=\"https://khan.github.io/KaTeX/\">KaTeX</a>:</p>\n<p>Gamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall\nn\\in\\mathbb N$ 是通过欧拉积分</p>\n<p>$$\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt,.\n$$</p>\n<blockquote>\n<p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式[here][1].</p>\n</blockquote>\n<h2 id=\"-\">新的甘特图功能，丰富你的文章</h2>\n<pre><code class=\"language-mermaid\">gantt\n        dateFormat  YYYY-MM-DD\n        title Adding GANTT diagram functionality to mermaid\n        section 现有任务\n        已完成               :done,    des1, <span class=\"hljs-number\">2014</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-06</span>,<span class=\"hljs-number\">2014</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-08</span>\n        进行中               :active,  des2, <span class=\"hljs-number\">2014</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-09</span>, <span class=\"hljs-number\">3d</span>\n        计划一               :         des3, after des2, <span class=\"hljs-number\">5d</span>\n        计划二               :         des4, after des3, <span class=\"hljs-number\">5d</span></code></pre>\n<ul>\n<li>关于 <strong>甘特图</strong> 语法，参考 [这儿][2],</li>\n</ul>\n<h2 id=\"uml-\">UML 图表</h2>\n<p>可以使用UML图表进行渲染。 <a href=\"https://mermaidjs.github.io/\">Mermaid</a>. 例如下面产生的一个序列图：</p>\n<pre><code class=\"language-mermaid\">sequenceDiagram\n张三 -<span class=\"hljs-meta\">&gt;&gt; </span>李四: 你好！李四, 最近怎么样?\n李四--&gt;&gt;王五: 你最近怎么样，王五？\n李四--x 张三: 我很好，谢谢!\n李四-x 王五: 我很好，谢谢!\nNote right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.\n\n李四--<span class=\"hljs-meta\">&gt;&gt;</span>张三: 打量着王五...\n张三-<span class=\"hljs-meta\">&gt;&gt;</span>王五: 很好... 王五, 你怎么样?</code></pre>\n<p>这将产生一个流程图。:</p>\n<pre><code class=\"language-mermaid\">graph LR\nA[长方形] -- 链接 --&gt; B((圆))\nA --&gt; C(圆角长方形)\nB --&gt; D{菱形}\nC --&gt; D</code></pre>\n<ul>\n<li>关于 <strong>Mermaid</strong> 语法，参考 [这儿][3],</li>\n</ul>\n<h2 id=\"flowchart-\">FLowchart流程图</h2>\n<p>我们依旧会支持flowchart的流程图：</p>\n<pre><code class=\"language-mermaid\">flowchat\nst=&gt;start: 开始\ne=&gt;end: 结束\nop=&gt;operation: 我的操作\ncond=&gt;condition: 确认？\n\nst-&gt;op-&gt;cond\ncond(yes)-&gt;e\ncond(no)-&gt;op</code></pre>\n<ul>\n<li>关于 <strong>Flowchart流程图</strong> 语法，参考 [这儿][4].</li>\n</ul>\n', 'GitHub', '', '', '', 'name', '', '2', '1', '2019-10-17 11:09:06', null, '2019-10-17 11:09:06', '0000');
INSERT INTO `blog` VALUES ('18', 'B树和B+树是怎么长的 - 掘金', '@[TOC](这里写自定义目录标题)\r\n\r\n# 欢迎使用Markdown编辑器\r\n\r\n你好！ 这是你第一次使用 **Markdown编辑器** 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。\r\n\r\n## 新的改变\r\n\r\n我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：\r\n 1. **全新的界面设计** ，将会带来全新的写作体验；\r\n 2. 在创作中心设置你喜爱的代码高亮样式，Markdown **将代码片显示选择的高亮样式** 进行展示；\r\n 3. 增加了 **图片拖拽** 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；\r\n 4. 全新的 **KaTeX数学公式** 语法；\r\n 5. 增加了支持**甘特图的mermaid语法[^1]** 功能；\r\n 6. 增加了 **多屏幕编辑** Markdown文章功能；\r\n 7. 增加了 **焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置** 等功能，功能按钮位于编辑区域与预览区域中间；\r\n 8. 增加了 **检查列表** 功能。\r\n [^1]: [mermaid语法说明](https://mermaidjs.github.io/)\r\n\r\n## 功能快捷键\r\n\r\n撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd>\r\n\r\n重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd>\r\n\r\n加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd>\r\n\r\n斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd>\r\n\r\n标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd>\r\n\r\n无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd>\r\n\r\n有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd>\r\n\r\n检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd>\r\n\r\n插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd>\r\n\r\n插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd>\r\n\r\n插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd>\r\n\r\n查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd>\r\n\r\n替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd>\r\n\r\n\r\n## 合理的创建标题，有助于目录的生成\r\n\r\n直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。\r\n输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。\r\n以此类推，我们支持6级标题。有助于使用`TOC`语法后生成一个完美的目录。\r\n\r\n## 如何改变文本的样式\r\n\r\n*强调文本* _强调文本_\r\n\r\n**加粗文本** __加粗文本__\r\n\r\n==标记文本==\r\n\r\n~~删除文本~~\r\n\r\n> 引用文本\r\n\r\nH~2~O is是液体。\r\n\r\n2^10^ 运算结果是 1024.\r\n\r\n## 插入链接与图片\r\n\r\n链接: [link](https://mp.csdn.net).\r\n\r\n图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)\r\n\r\n带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30)\r\n\r\n居中的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)\r\n\r\n居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30)\r\n\r\n当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。\r\n\r\n## 如何插入一段漂亮的代码片\r\n\r\n去[博客设置](https://mp.csdn.net/configure)页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 `代码片`.\r\n```javascript\r\n// An highlighted block\r\nvar foo = \'bar\';\r\n```\r\n\r\n## 生成一个适合你的列表\r\n\r\n- 项目\r\n  - 项目\r\n    - 项目\r\n\r\n1. 项目1\r\n2. 项目2\r\n3. 项目3\r\n\r\n- [ ] 计划任务\r\n- [x] 完成任务\r\n\r\n## 创建一个表格\r\n一个简单的表格是这么创建的：\r\n项目     | Value\r\n-------- | -----\r\n电脑  | $1600\r\n手机  | $12\r\n导管  | $1\r\n\r\n### 设定内容居中、居左、居右\r\n使用`:---------:`居中\r\n使用`:----------`居左\r\n使用`----------:`居右\r\n| 第一列       | 第二列         | 第三列        |\r\n|:-----------:| -------------:|:-------------|\r\n| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 | \r\n\r\n### SmartyPants\r\nSmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：\r\n|    TYPE   |ASCII                          |HTML                         \r\n|----------------|-------------------------------|-----------------------------|\r\n|Single backticks|`\'Isn\'t this fun?\'`            |\'Isn\'t this fun?\'            |\r\n|Quotes          |`\"Isn\'t this fun?\"`            |\"Isn\'t this fun?\"            |\r\n|Dashes          |`-- is en-dash, --- is em-dash`|-- is en-dash, --- is em-dash|\r\n\r\n## 创建一个自定义列表\r\nMarkdown\r\n:  Text-to-HTML conversion tool\r\n\r\nAuthors\r\n:  John\r\n:  Luke\r\n\r\n## 如何创建一个注脚\r\n\r\n一个具有注脚的文本。[^2]\r\n\r\n[^2]: 注脚的解释\r\n\r\n##  注释也是必不可少的\r\n\r\nMarkdown将文本转换为 HTML。\r\n\r\n*[HTML]:   超文本标记语言\r\n\r\n## KaTeX数学公式\r\n\r\n您可以使用渲染LaTeX数学表达式 [KaTeX](https://khan.github.io/KaTeX/):\r\n\r\nGamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall\r\nn\\in\\mathbb N$ 是通过欧拉积分\r\n\r\n$$\r\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt\\,.\r\n$$\r\n\r\n> 你可以找到更多关于的信息 **LaTeX** 数学表达式[here][1].\r\n\r\n## 新的甘特图功能，丰富你的文章\r\n\r\n```mermaid\r\ngantt\r\n        dateFormat  YYYY-MM-DD\r\n        title Adding GANTT diagram functionality to mermaid\r\n        section 现有任务\r\n        已完成               :done,    des1, 2014-01-06,2014-01-08\r\n        进行中               :active,  des2, 2014-01-09, 3d\r\n        计划一               :         des3, after des2, 5d\r\n        计划二               :         des4, after des3, 5d\r\n```\r\n- 关于 **甘特图** 语法，参考 [这儿][2],\r\n\r\n## UML 图表\r\n\r\n可以使用UML图表进行渲染。 [Mermaid](https://mermaidjs.github.io/). 例如下面产生的一个序列图：\r\n\r\n```mermaid\r\nsequenceDiagram\r\n张三 ->> 李四: 你好！李四, 最近怎么样?\r\n李四-->>王五: 你最近怎么样，王五？\r\n李四--x 张三: 我很好，谢谢!\r\n李四-x 王五: 我很好，谢谢!\r\nNote right of 王五: 李四想了很长时间, 文字太长了<br/>不适合放在一行.\r\n\r\n李四-->>张三: 打量着王五...\r\n张三->>王五: 很好... 王五, 你怎么样?\r\n```\r\n\r\n这将产生一个流程图。:\r\n\r\n```mermaid\r\ngraph LR\r\nA[长方形] -- 链接 --> B((圆))\r\nA --> C(圆角长方形)\r\nB --> D{菱形}\r\nC --> D\r\n```\r\n\r\n- 关于 **Mermaid** 语法，参考 [这儿][3],\r\n\r\n## FLowchart流程图\r\n\r\n我们依旧会支持flowchart的流程图：\r\n```mermaid\r\nflowchat\r\nst=>start: 开始\r\ne=>end: 结束\r\nop=>operation: 我的操作\r\ncond=>condition: 确认？\r\n\r\nst->op->cond\r\ncond(yes)->e\r\ncond(no)->op\r\n```\r\n\r\n- 关于 **Flowchart流程图** 语法，参考 [这儿][4].', '<p>@<a href=\"%E8%BF%99%E9%87%8C%E5%86%99%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95%E6%A0%87%E9%A2%98\">TOC</a></p>\n<h1 id=\"-markdown-\">欢迎使用Markdown编辑器</h1>\n<p>你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。</p>\n<h2 id=\"-\">新的改变</h2>\n<p>我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p>\n<ol>\n<li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li>\n<li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li>\n<li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li>\n<li>全新的 <strong>KaTeX数学公式</strong> 语法；</li>\n<li>增加了支持<strong>甘特图的mermaid语法<a href=\"%5Bmermaid%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E%5D(https://mermaidjs.github.io/)\">^1</a></strong> 功能；</li>\n<li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li>\n<li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li>\n<li>增加了 <strong>检查列表</strong> 功能。</li>\n</ol>\n<h2 id=\"-\">功能快捷键</h2>\n<p>撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd></p>\n<p>重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd></p>\n<p>加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd></p>\n<p>斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd></p>\n<p>标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd></p>\n<p>无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd></p>\n<p>有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd></p>\n<p>检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd></p>\n<p>插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd></p>\n<p>插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd></p>\n<p>插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd></p>\n<p>查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd></p>\n<p>替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd></p>\n<h2 id=\"-\">合理的创建标题，有助于目录的生成</h2>\n<p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。\n输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。\n以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p>\n<h2 id=\"-\">如何改变文本的样式</h2>\n<p><em>强调文本</em> <em>强调文本</em></p>\n<p><strong>加粗文本</strong> <strong>加粗文本</strong></p>\n<p>==标记文本==</p>\n<p><del>删除文本</del></p>\n<blockquote>\n<p>引用文本</p>\n</blockquote>\n<p>H~2~O is是液体。</p>\n<p>2^10^ 运算结果是 1024.</p>\n<h2 id=\"-\">插入链接与图片</h2>\n<p>链接: <a href=\"https://mp.csdn.net\">link</a>.</p>\n<p>图片: <img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\" alt=\"Alt\"></p>\n<p>带尺寸的图片: ![Alt](<a href=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</a> =30x30)</p>\n<p>居中的图片: <img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\" alt=\"Alt\"></p>\n<p>居中并且带尺寸的图片: ![Alt](<a href=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</a> =30x30)</p>\n<p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p>\n<h2 id=\"-\">如何插入一段漂亮的代码片</h2>\n<p>去<a href=\"https://mp.csdn.net/configure\">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">// An highlighted block</span>\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-string\">\'bar\'</span>;</code></pre>\n<h2 id=\"-\">生成一个适合你的列表</h2>\n<ul>\n<li>项目<ul>\n<li>项目<ul>\n<li>项目</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>项目1</li>\n<li>项目2</li>\n<li>项目3</li>\n</ol>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> 计划任务</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 完成任务</li>\n</ul>\n<h2 id=\"-\">创建一个表格</h2>\n<p>一个简单的表格是这么创建的：\n项目     | Value\n-------- | -----\n电脑  | $1600\n手机  | $12\n导管  | $1</p>\n<h3 id=\"-\">设定内容居中、居左、居右</h3>\n<p>使用<code>:---------:</code>居中\n使用<code>:----------</code>居左\n使用<code>----------:</code>居右\n| 第一列       | 第二列         | 第三列        |\n|:-----------:| -------------:|:-------------|\n| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 | </p>\n<h3 id=\"smartypants\">SmartyPants</h3>\n<p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：\n|    TYPE   |ASCII                          |HTML<br>|----------------|-------------------------------|-----------------------------|\n|Single backticks|<code>&#39;Isn&#39;t this fun?&#39;</code>            |&#39;Isn&#39;t this fun?&#39;            |\n|Quotes          |<code>&quot;Isn&#39;t this fun?&quot;</code>            |&quot;Isn&#39;t this fun?&quot;            |\n|Dashes          |<code>-- is en-dash, --- is em-dash</code>|-- is en-dash, --- is em-dash|</p>\n<h2 id=\"-\">创建一个自定义列表</h2>\n<p>Markdown\n:  Text-to-HTML conversion tool</p>\n<p>Authors\n:  John\n:  Luke</p>\n<h2 id=\"-\">如何创建一个注脚</h2>\n<p>一个具有注脚的文本。<a href=\"%E6%B3%A8%E8%84%9A%E7%9A%84%E8%A7%A3%E9%87%8A\">^2</a></p>\n<h2 id=\"-\">注释也是必不可少的</h2>\n<p>Markdown将文本转换为 HTML。</p>\n<p>*[HTML]:   超文本标记语言</p>\n<h2 id=\"katex-\">KaTeX数学公式</h2>\n<p>您可以使用渲染LaTeX数学表达式 <a href=\"https://khan.github.io/KaTeX/\">KaTeX</a>:</p>\n<p>Gamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\forall\nn\\in\\mathbb N$ 是通过欧拉积分</p>\n<p>$$\n\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt,.\n$$</p>\n<blockquote>\n<p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式[here][1].</p>\n</blockquote>\n<h2 id=\"-\">新的甘特图功能，丰富你的文章</h2>\n<pre><code class=\"language-mermaid\">gantt\n        dateFormat  YYYY-MM-DD\n        title Adding GANTT diagram functionality to mermaid\n        section 现有任务\n        已完成               :done,    des1, <span class=\"hljs-number\">2014</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-06</span>,<span class=\"hljs-number\">2014</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-08</span>\n        进行中               :active,  des2, <span class=\"hljs-number\">2014</span><span class=\"hljs-number\">-01</span><span class=\"hljs-number\">-09</span>, <span class=\"hljs-number\">3d</span>\n        计划一               :         des3, after des2, <span class=\"hljs-number\">5d</span>\n        计划二               :         des4, after des3, <span class=\"hljs-number\">5d</span></code></pre>\n<ul>\n<li>关于 <strong>甘特图</strong> 语法，参考 [这儿][2],</li>\n</ul>\n<h2 id=\"uml-\">UML 图表</h2>\n<p>可以使用UML图表进行渲染。 <a href=\"https://mermaidjs.github.io/\">Mermaid</a>. 例如下面产生的一个序列图：</p>\n<pre><code class=\"language-mermaid\">sequenceDiagram\n张三 -<span class=\"hljs-meta\">&gt;&gt; </span>李四: 你好！李四, 最近怎么样?\n李四--&gt;&gt;王五: 你最近怎么样，王五？\n李四--x 张三: 我很好，谢谢!\n李四-x 王五: 我很好，谢谢!\nNote right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.\n\n李四--<span class=\"hljs-meta\">&gt;&gt;</span>张三: 打量着王五...\n张三-<span class=\"hljs-meta\">&gt;&gt;</span>王五: 很好... 王五, 你怎么样?</code></pre>\n<p>这将产生一个流程图。:</p>\n<pre><code class=\"language-mermaid\">graph LR\nA[长方形] -- 链接 --&gt; B((圆))\nA --&gt; C(圆角长方形)\nB --&gt; D{菱形}\nC --&gt; D</code></pre>\n<ul>\n<li>关于 <strong>Mermaid</strong> 语法，参考 [这儿][3],</li>\n</ul>\n<h2 id=\"flowchart-\">FLowchart流程图</h2>\n<p>我们依旧会支持flowchart的流程图：</p>\n<pre><code class=\"language-mermaid\">flowchat\nst=&gt;start: 开始\ne=&gt;end: 结束\nop=&gt;operation: 我的操作\ncond=&gt;condition: 确认？\n\nst-&gt;op-&gt;cond\ncond(yes)-&gt;e\ncond(no)-&gt;op</code></pre>\n<ul>\n<li>关于 <strong>Flowchart流程图</strong> 语法，参考 [这儿][4].</li>\n</ul>\n', 'GitHub', 'vue,zzz', 'test', '1', 'test', 'H:\\MyEclipse2016\\homePage\\src\\main\\webapp\\2288057ad98eddce3463611a2d3f84b.jpg', '2', '1', '2019-10-17 11:09:08', null, '2019-10-17 11:09:08', '0000');

-- ----------------------------
-- Table structure for blogclass
-- ----------------------------
DROP TABLE IF EXISTS `blogclass`;
CREATE TABLE `blogclass` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `typename` varchar(255) NOT NULL COMMENT '类型名称',
  `blogsum` int(11) DEFAULT '0' COMMENT '该类型blog总数',
  `deleted` tinyint(4) unsigned zerofill DEFAULT '0000' COMMENT '已删除？1：0',
  `createdtime` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `deletedtime` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`,`typename`),
  KEY `typename` (`typename`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blogclass
-- ----------------------------
INSERT INTO `blogclass` VALUES ('1', 'JAVASE', '0', '0000', '2019-10-16 16:38:09', '2019-10-16 16:38:09');
INSERT INTO `blogclass` VALUES ('2', 'Spring', '0', '0000', '2019-10-16 16:38:14', '2019-10-16 16:38:14');
INSERT INTO `blogclass` VALUES ('3', 'REDIS', '0', '0000', '2019-10-16 16:38:20', '2019-10-16 16:38:20');
INSERT INTO `blogclass` VALUES ('4', 'SQL', '0', '0000', '2019-10-16 16:38:25', '2019-10-16 16:38:25');
INSERT INTO `blogclass` VALUES ('5', '设计模式', '0', '0000', '2019-10-16 16:40:43', '2019-10-16 16:40:43');
INSERT INTO `blogclass` VALUES ('6', 'VUE', '0', '0000', '2019-10-16 16:39:48', '2019-10-16 16:39:48');
INSERT INTO `blogclass` VALUES ('7', '其余', '0', '0000', '2019-10-16 16:40:45', '2019-10-16 16:40:45');
INSERT INTO `blogclass` VALUES ('8', 'MySQL', '0', '0001', '2019-10-16 16:41:02', '2019-10-16 16:41:02');
INSERT INTO `blogclass` VALUES ('9', 'Nginx', '0', '0001', '2019-10-16 16:41:03', '2019-10-16 16:41:03');
INSERT INTO `blogclass` VALUES ('10', '负载均衡', '0', '0001', '2019-10-16 16:41:04', '2019-10-16 16:41:04');
INSERT INTO `blogclass` VALUES ('12', 'rabbitMQ', '0', '0001', '2019-10-16 16:41:05', '2019-10-16 16:41:05');
INSERT INTO `blogclass` VALUES ('13', 'test', '1', '0000', null, null);

-- ----------------------------
-- Table structure for learnresource
-- ----------------------------
DROP TABLE IF EXISTS `learnresource`;
CREATE TABLE `learnresource` (
  `author` varchar(255) DEFAULT NULL,
  `title` varchar(255) DEFAULT NULL,
  `url` varchar(255) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of learnresource
-- ----------------------------

-- ----------------------------
-- Table structure for liveus
-- ----------------------------
DROP TABLE IF EXISTS `liveus`;
CREATE TABLE `liveus` (
  `Pic` varchar(255) DEFAULT NULL,
  `nickName` varchar(50) NOT NULL DEFAULT '',
  `Github` varchar(255) NOT NULL COMMENT 'Github',
  `juejin` varchar(255) NOT NULL COMMENT '掘金',
  `CSDN` varchar(255) NOT NULL COMMENT 'CSDN',
  `jianshu` varchar(255) NOT NULL COMMENT '简书',
  `skills` json NOT NULL,
  `moto` varchar(255) NOT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of liveus
-- ----------------------------
INSERT INTO `liveus` VALUES ('default.png', 'Liveus', 'https://github.com/Liveus', 'https://juejin.im/user/5b72f890f265da27e879bbb7', 'https://blog.csdn.net/LoveRestart', 'https://www.jianshu.com/u/a80b8e3299cc', '{\"1\": \"java\", \"2\": \"SpringBoot\", \"3\": \"Redis\", \"4\": \"RabbitMQ\", \"5\": \"MySQL\", \"6\": \"Vue\", \"7\": \"ssm\"}', 'Liveus\'s name!', '1');

-- ----------------------------
-- Table structure for message
-- ----------------------------
DROP TABLE IF EXISTS `message`;
CREATE TABLE `message` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ip` varchar(255) DEFAULT NULL,
  `messagetimestamp` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP COMMENT '留言时间',
  `context` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of message
-- ----------------------------
INSERT INTO `message` VALUES ('4', '0:0:0:0:0:0:0:1', '2019-05-31 20:40:34', '测试2');

-- ----------------------------
-- Table structure for redis
-- ----------------------------
DROP TABLE IF EXISTS `redis`;
CREATE TABLE `redis` (
  `name` int(11) NOT NULL,
  `value` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of redis
-- ----------------------------
INSERT INTO `redis` VALUES ('1', '10101000');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');
INSERT INTO `redis` VALUES ('1', '2');

-- ----------------------------
-- Table structure for test
-- ----------------------------
DROP TABLE IF EXISTS `test`;
CREATE TABLE `test` (
  `id` int(11) NOT NULL,
  `name` varchar(2) DEFAULT NULL,
  `longtitude` decimal(10,2) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of test
-- ----------------------------
INSERT INTO `test` VALUES ('1', '神李', '2.22');

-- ----------------------------
-- Table structure for user
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `name` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `skill` varchar(255) DEFAULT NULL,
  `profession` varchar(255) DEFAULT NULL,
  `phone` varchar(255) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `publicemail` varchar(255) DEFAULT NULL COMMENT 'publicEmail',
  `id` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('Liveus', 'RWbLBJ6cETtXVdrkj/p37A==', 'java', null, '17826806306', '17826806306@163.com', 'shen26806306@gmail.com', '1');

-- ----------------------------
-- Table structure for webcfg
-- ----------------------------
DROP TABLE IF EXISTS `webcfg`;
CREATE TABLE `webcfg` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `configname` varchar(255) DEFAULT NULL COMMENT '配置名称',
  `configvalue` varchar(255) DEFAULT NULL COMMENT '值',
  `iseffective` tinyint(2) DEFAULT NULL COMMENT '是否生效：0 ？1',
  `create_by` int(11) DEFAULT NULL,
  `create_time` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `update_by` int(11) DEFAULT NULL,
  `update_time` datetime DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of webcfg
-- ----------------------------
